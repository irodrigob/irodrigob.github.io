'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/sap/abap/','title':"ABAP",'content':"ABAP\r#\r\rSe aglutina todo lo referente al lenguaje de programación de SAP.\nPublicaciones\r#\r\r\r\rBOPF\r\r\rBOPF\r\r\rCDS\r\r\rCore Data Services\r\r\rSentencias \u0026gt;= 7.4\r\r\rNuevas sentencias aparecidas en la versión 7.4\r\r\rALV\r\r\rALV\r\r\rArchivelink\r\r\rArchivelink / GOS / BDS / Etc.\r\r\rClases\r\r\rClases\r\r\rClases de desarrollo\r\r\rClases de desarrollo\r\r\rFunciones\r\r\rFunciones\r\r\rIDOC\r\r\rIDOC\r\r\rNotas de SAP\r\r\rNotas de SAP\r\r\rProgramas\r\r\rProgramas\r\r\rRecursos humanos\r\r\rRecursos humanos\r\r\rRTTS\r\r\rRuntime Type Services\r\r\rTransacciones\r\r\rTransacciones\r\r\rUtilidades generales\r\r\rUtilidades generales\r\r\r"});index.add({'id':1,'href':'/docs/sap/abap/cds/atajos/','title':"Atajos",'content':"Objetivo\r#\r\rDisponer de pequeños trozos de código que al no usarse mucho me cuestan saber como utilizarlo y siempre tengo que estar buscandolos.\nParámetros\r#\r\rdefine view ZATRON_CDS_DOMAIN_TEXTS with parameters p_domain :DOMNAME, Valores por defecto\r#\r\rEn este ejemplo se usa para pasar por defecto en un parámetro de entrada. Pero la misma variable variable de entorno se puede usar en un WHERE\n@Environment.systemField: #SYSTEM_DATE p_langu :abap.dats "});index.add({'id':2,'href':'/docs/sap/abap/bopf/','title':"BOPF",'content':"Objetivo\r#\r\rBOPF es un framework que permite modelar datos, definir validaciones, definir la persistencia en base de datos, realizar determinaciones, definir consultas, etc..\nEs un herramienta muy útil porque te ahorra toda la gestión que hay que hacer en los modelos de datos propios que se hacen en los proyectos.\nAquí iré recogiendo un poco de todo de lo que voy haciendo y/o aprendiendo sobre los BOPF.\nProyectos personales\r#\r\rEn el siguiente enlace están las utilidades que voy creando para los BOPF.\nPublicaciones\r#\r\r\r\rAcciones\r\r\rTodo lo referente a las acciones\r\r\rAPI desde ABAP\r\r\rComo usar la API de los BOPF desde ABAP\r\r\rCódigo ejemplo dentro del BOPF\r\r\rCódigo ejemplo dentro del BOPF\r\r\rDeterminaciones\r\r\rTodo lo referente a determinaciones\r\r\rNomenclaturas\r\r\rNomenclaturas\r\r\rTablas\r\r\rTablas\r\r\r"});index.add({'id':3,'href':'/docs/sap/abap/cds/','title':"CDS",'content':"Objetivo\r#\r\rLos de CDS que aparecen, si no recuerdo mal, en la versión 7.4 de ABAP pero es en la versión 7.5, donde creo, tiene ya una funcionalidad madura que permite usarse en multitud de sitios.\nLos CDS están pensados para y por HANA, aunque no es necesario tener HANA para usarlo pero según que funcionalidad de que uses pueden perder rendimiento, ya que disponen de funcionalidades que permite que el trabajo \u0026ldquo;sucio\u0026rdquo; lo haga la base de datos. Además, los CDS permiten un Open SQL extendido, que se asemeja cada vez más al standard SQL, que permiten realizar operaciones sin necesidad de tratar a posterior los datos en ABAP.\nY punto importante como los CDS se ejecutan directamente en base de datos son más óptimos que hacer un SELECT tradicional a la hora de buscar y/o procesar un volumen alto de datos.\nPublicaciones\r#\r\r\r\rAtajos\r\r\rCódigo para ser usado\r\r\r"});index.add({'id':4,'href':'/docs/python/enlaces_interes/','title':"Enlaces de interes",'content':"Introducción\r#\r\rRecopilación de enlaces que me parece interesante.\nAprendizaje\r#\r\r En Youtube tenemos el canal de AMP Tech que tiene video de como programar en Python hasta como hacer cosas con Machine Learning  "});index.add({'id':5,'href':'/docs/github/enlaces_interesantes/','title':"Enlaces interesantes",'content':"Enlaces\r#\r\r \rComandos en Git \u0026ndash;\u0026gt; https://www.hostinger.es/tutoriales/comandos-de-git  "});index.add({'id':6,'href':'/docs/python/entorno_desarrollo/','title':"Entorno de desarrollo",'content':"Introducción\r#\r\rAquí hasta que no tenga más conocimientos voy ir anotando cosas que me sirven para preparar el entorno para desarrollo\nPython\r#\r\rEl interprete del lenguaje hay que descargarlo de la página oficial.\nIDE de desarrollo\r#\r\rUso el VS Code que tiene una ventaja cuando creas un programa con extensión \u0026ldquo;.py\u0026rdquo; (extensión que indica que es un lenguaje Python) te descarga el plugin para poder ejecutar directamente desde el VSCode.\nAunque en la documentación de VS Code explica como instalar los plugins necesarios.\nJupyter Notebooks\r#\r\rHay muchos cursos donde explican en lenguaje con Jupyter Notebooks. Esto es un proyecto opensource que permite ejecutar código Python como si fuese un lenguaje estructurado. La ayuda oficial de como usarlo dentro del VS Code es esta\nPara utilizarlo hay que pulsar CTRL+SHIFT+P para activar la ventana de comandos y escribir lo Create Blank:\n\rAparece el editor y ya lo podremos usar:\n\rPara probar lo que vamos escribiendo hay que poner en marcha el servidor de Jupyter notebook. Los pasos que he hecho han sido ir de nuevo la ventana de comandos y escribir jupyter server:\n\rHa preguntado si el servidor sería local o remote, he escogido remoto:\n\rLuego ha preguntado que interprete de Python:\n\ry a continuación ha comenzado hacer una instalación en local.\nNOTA: Como tengo instalado de antemano Anaconda, y al tener dos entornos configurados que a la postre son como tener dos interpretes de Python independientes, me ha salido la ventana a escoger el interprete: el oficial de Python y los datos de Anaconda.\nEl interprete puede ser cambiando abriendo la ventana de comandos:\n\rUna vez instalado todo en la parte superior derecha del VS Code se verá el servidor activo:\n\rCuando volvamos abrir de nuevo el VSCode y abrir un editor del Jupyter Notebook el servidor arrancará automáticamente.\nAnaconda\r#\r\r\rAnaconda es un gestor de paquetes para poder utilizar los productos de Machine Learning como TensorFlow.\nYo me he instalado la versión 64-Bit Grapical Installer.\nUna vez instalado lo abriremos el menú de inicio de Windows y escribiremos Anaconda:\n\rUna vez arrancado sale la siguiente pantalla:\n\rEn la imagen se ve que estoy en un ambiente llamado test que he creado para hacer pruebas. Los ambientes, creo que se permiten hasta cinco, permites tener librerias distintas según el tipo de proyecto que se use.\nDesde este menu lanzo el VS Code. Cuando lo lance desde esta opción se me instalo, eso creo, la extensión Anaconda Extension Pack:\n\rEsta extensión usará la configuración de paquetes o librerias que tengas instalada en el ambiente que se tenga seleccionado.\nPero toda la parte de uso Anaconda lo iré poniendo en un artículo aparte.\n"});index.add({'id':7,'href':'/docs/python/sentencias/entrada_datos/','title':"Entrada de datos",'content':"Entrada de datos\r#\r\rPara pedir datos existe la sentencia *input\u0026rdquo;, esta sentencia en el VSCODE abre una ventana, como la de los comandos, donde te pide los datos.\nEjemplo:\nnombre = input(\u0026#34;¿dime tu nombre?\u0026#34;) print(nombre) Resultado:\nivan\r"});index.add({'id':8,'href':'/docs/github/generar_rsa_windows/','title':"Generar clave RSA",'content':"Motivo\r#\r\rEl motivo de crear una clave RSA es poder hacer deploy a Github mediante consola y evitar el siguiente error:\n\rDigo consola porque es el único momento que lo he necesitado, ya que usando VS Code o la propia aplicación de Github no lo he necesitado.\nPasos a seguir\r#\r\r Abrir el git Bash. Para eso hay que tener el instalado el Git para windos y al pulsar la tecla win y al escribir git aparecerá la opción:  \rEn el terminal que aparecerá escribir: ssh-key -t rsa -b 4096 -C \u0026ldquo;mail que nos hemos registrado en github\u0026rdquo; y al pulsar enter nos aparecerá esto:  \rPulsaremos Enter\nSe nos pedirá introducir una frase:\n\rLa frase se dejará en blanco para no tener que introducirla en todos los sitios que se haga push.\nAhora hay que añadir la clave generada al ssh-agent. Pero para eso primero hay que valir que este en marcha. Para ello hay que introducir: eval $(ssh-agent –s):  \rY con la siguiente instrucción se añade la clave al agente: ssh-add ~/.ssh/id_rsa nos pedirá la frase introducida en el paso 2 y si es correcta la añadirá.  \rAhora hay que obtener la key para poderla incluirla en nuestra cuenta github, para eso hay que escribir el siguiente comando:c cat ~/.ssh/id_rsa.pub  \rNota: Imagen cortada por seguridad. Todo lo que nos aparezca hay que copiarlo en un notepad para luego asociarlo a nuestra cuenta.\nAsociar clave a nuestra cuenta Github\r#\r\rAhora hay que ir al github y acceder a los Settings de nuestro usuario e ir a la opción SSH and GPG keys:\n\rY pulsar sobre el botón New SSH Key:\n\rEl en título se puede poner lo que sea, ejemplo el ordenador donde has generado la clave, y la clave generada es la rista que hemos obtenido del comando cat ~/.ssh/id_rsa.pub. Una vez introducida nos aparecerá lo siguiente:\n\rBibliografía\r#\r\rPara poder este artículo me he bsado en el siguiente artículo.\n"});index.add({'id':9,'href':'/docs/github/','title':"Github",'content':"Introducción\r#\r\rEn esta sección iré poniendo todo lo que vaya aprendido sobre Github.\nPublicaciones\r#\r\r\r\rEnlaces interesantes\r\r\rEnlaces interesantes sobre Github\r\r\rGenerar clave RSA\r\r\rGenerar clave RSA en Windows\r\r\r"});index.add({'id':10,'href':'/docs/hugo/','title':"Hugo",'content':"Introducción\r#\r\rEn esta sección iré poniendo todo lo que vaya aprendido sobre Hugo. Hugo para quien no lo sepa permite crear páginas web estáticas que se pueden subir a un repositorio de Github.\nPublicaciones\r#\r\r\r\rPublicar Web Github\r\r\rComo publicar una web en Github\r\r\r"});index.add({'id':11,'href':'/docs/python/machine_learning/librerias/','title':"Librerias",'content':"Introducción\r#\r\rLibrerias para poder usar el Machine Learning.\nLos pasos para instalar las librerías esta explicado en la página de Anaconda.\nNumpy\r#\r\r¿Qué és?\r#\r\rSegún la Wikipedia: NumPy es una extensión de Python, que le agrega mayor soporte para vectores y matrices, constituyendo una biblioteca de funciones matemáticas de alto nivel para operar con esos vectores o matrices.\nInstalación\r#\r\rNo se instalar porque viene incluido con Anaconda:\n\rScikit learn(Sklearn)\r#\r\r¿Qué és?\r#\r\rSegún la Wikipedia: Scikit-learn es una biblioteca para aprendizaje automático de software libre para el lenguaje de programación Python.​Incluye varios algoritmos de clasificación, regresión y análisis de grupos entre los cuales están máquinas de vectores de soporte, bosques aleatorios, Gradient boosting, K-means y DBSCAN.\nInstalación\r#\r\rPor defecto no se encuentra instalada. En la página que habla Anaconda en el apartado de instalación de paquetes mediante entorno gráfico explica como se hace la instalación.\nGraphviz\r#\r\r¿Qué és?\r#\r\rSegún la Wikipedia: Graphviz es un conjunto de herramientas de software para el diseño de diagramas definido en el lenguaje descriptivo DOT.​ Fue desarrollado por AT\u0026amp;T Labs​ y liberado como software libre con licencie tipo Eclipse.​\nInstalación\r#\r\rLa instalación más sencilla es hacerlo a través de la interface gráfica de Anaconda:\n\rY el paquete:\n\rPara que funcione correctamente la libreria.\nMatplotlib\r#\r\r¿Qué és?\r#\r\rSegún la Wikipedia: Matplotlib es una biblioteca para la generación de gráficos a partir de datos contenidos en listas o arrays en el lenguaje de programación Python y su extensión matemática NumPy. Proporciona una API, pylab, diseñada para recordar a la de MATLAB.\nInstalación\r#\r\rEsta libreria ya viene instalada por defecto con Anaconda y no es necesario realizar ningún instalación\nSVM (Support Vector Machine / Maquina de vectores de soporte)\r#\r\r¿Qué és?\r#\r\rSegún la Wikipedia: Las máquinas de vectores de soporte o máquinas de vector soporte (Support Vector Machines, SVMs) son un conjunto de algoritmos de aprendizaje supervisado desarrollados por Vladimir Vapnik y su equipo en los laboratorios AT\u0026amp;T. Estos métodos están propiamente relacionados con problemas de clasificación y regresión. Dado un conjunto de ejemplos de entrenamiento (de muestras) podemos etiquetar las clases y entrenar una SVM para construir un modelo que prediga la clase de una nueva muestra.\nInstalación\r#\r\rViene incluido en la librería Scikit learn(Sklearn)\n"});index.add({'id':12,'href':'/docs/hugo/publicar_web_github/','title':"Publicar Web Github",'content':"Motivo\r#\r\rPara aquellos que no quieren gastarse dinero en productos como Wordpress o no necesitan páginas dinámicas, la opción de crear una de manera gratuíta y usando Hugo es una buena elección.\nPersonalmente la clave es escoger un tema que se nos adapte a lo que necesitamos, porque cada tema tiene ciertos comportamientos que no tiene otros. Por ejemplo, inicialmente había escogido el tema npp-hugo, cuando empece a montar la estructura que quería vi que no era tan flexible en la organización por carpetas como me esperaba (al menos es lo que he visto probandolo). Por ello finalmente y después de revisar unos cuantos temas he optado por el tema book que se ajustaba más lo que buscaba.\nPor ello creo que para usar Hugo es básico escoger con calma el tema que se quiera ya que funcionalidad que tiene un tema no existen en otro. Por ejmeplo, hay páginas template, mardownsyntax.md del tema npp-hugo no son compatibles con el tema book que uso. En mi caso me he dado cuenta mientras hacía pruebas con este tema.\nAparte he visto que la documentación oficial parece echa para construir template porque realmente lo que me ha servido para construir la página han sido los ejemplos que vienen incluídos en la carpeta exampleSite que suele vernir en cada tema.\nPasos\r#\r\rPasos previo\r#\r\rAntes de iniciar el proceso se aconseja instalar la clave RSA en local de Github siguiendo los pasos de este artículo\nInstalar Hugo\r#\r\rHugo se puede descargar de la siguiente página web. Una vez instalado es aconsejable poner el directorio donde se ha instalado en el PATH de window para un mejor acceso:\n\rCrear los repositorios en el Github\r#\r\rEl sitio que se va a crear se tiene que sincronizar con dos repositorios que se han de crear previamente. Estos sitios son:\n  será el encargado de tener los ficheros del sitio que estamos construyendo. El que contendrá los ficheros .md .github.io será el encargado guardar las páginas renderizadas por Hugo en base al contenido en el sitio anterior. Es importante poner el nombre del usuario ya que si no, no funcionara. En mi caso el repositorio creado es: irodrigob.github.io  Crer el sitio en local\r#\r\rHay que abrir la consola de Windows e ir al directorio donde vamos crear el sitio web. Una vez en el directorio hay que escribir: hugo new site nombre_sitio:\n\rAñadir el tema\r#\r\rEn la página web de los temas se pueden encontrar multitud de temas para descargar. Para este sitio se ha utilizado el tema book\n NOTA: Tanto los pantallazos como en las explicación sale el tema npp-hugo, esto es debido a que use incialmente dicho tema para crear el sitio.*  Para instalarlo hay que hacerlo desde la consola hay que hacer los siguientes pasos:\n git init, Crea los archivos para poder sincronizar el sitio con Git git submodule add https://github.com/saadnpq/npq-hugo themes/npqq-hugo, Añade como submodulo el tema y lo descargará en el directorio themes/npqq-hugo Editar el fichero config.toml que esta en el directorio raíz del sitio y poner el contenido del mismo fichero, que hay en el directorio themes/npqq-hugo/example-config.toml. Una vez copiado se ajustarán los datos de configuración básicos.  En consola se irá viendo lo siguiente:\n\rCon esto ya se tiene un primer esbozo del sitio, para ver cómo queda en la consola hay que escribir: hugo server -D\nSi abrimos una navegador e introducimos la url: http://localhost:1313/ veremos como queda el sitio.\nSincronizar el sitio local con Gihub\r#\r\rEsta es la parte que mas me ha costado por no estar acostumbrado a trabajar con Git. Esta es la parte es la que he aprendido que hacer que hacerlo en consola, ya que aunque puedes hacer los push con la aplicación de escritorio de Github o con el VS Code(que es el que uso para crear las páginas) he descubierto, seguramente por desconocimiento, que no funciona igual y se jode de tal manera los archivos de Git que he tenido que borrar sitio y repositorios más de una vez. Ahora, todo lo hago con la consola y ya no tengo errores.\nPersonalmente creo que si los submodulos (solo hemos creado el primero de ellos, el del tema) se hubiesen sincronizado con el Github Desktop no hubiese habido problemas. Pero ahora mismo no tengo ganas de más experimentos.\nLos dos sitios del github los hemos creado en el paso anterior, aunque también es posible crearlo justo en este momento, pero así es como lo he hecho yo. Una vez creados hay que seguir los siguientes pasos para sincronizalos en local.\nDesde la consola de Windows y estando en el directorio del sitio hay que ejecutar los siguientes comandos git:\n git remote add origin git@github.com:irodrigob/navi-developer.git Añade el repositorio que guardará las páginas que vamos creando git add . Le decimos que queremos añdir todas las carpetas del sitio en el git git commit -m \u0026quot;Commit inicial del sitio\u0026quot; Guarda los ficheros añadidos en el paso anterior en el git local.  A nivel de consolo iremos viendo algo parecido a esto:\n\rAhora hay que añadir el repositorio donde se guardarán las páginas renderizadas por Hugo:\n git submodule add git@github.com:irodrigob/irodrigob.github.io.git En este sentencia aparecerá la pregunta de la frase de la clave RSA que hemos hecho previamente para poder subir a Github:  \rAunque en la imagen no se vé, hay una pregunta que pide poner: Yes/No/Phrase. Como no se ha puesto frase, para ser más comodo las subidas, hay que poner Yes para confirmar la clave y así no volverá a realizar la misma pregunta.\nUna vez añadido hay que hacer los siguientes pasos:\n git add . git commit -m \u0026quot;Commit inicial\u0026quot; git push –u origin master Este sube los archivos del repositorio local al remoto  A nivel de consola deberá aparecer algo parecido a esto:\n\rHasta ahora solo hemos subido datos del repositorio que hemos creado para el sitio. Ahora hay que cambiar la configuración para que Hugo publique las páginas en nuestro repositorio de github.io\nPublicando en github.io\r#\r\rEl archivo de configuración config.toml hay que realizar los siguientes cambios:\n Al parámetro baseURL se le tiene que poner nuestra dirección del repositorio creado con el nombre github.io Se añade el parámetro publisDir con el nombre de la carpeta que se ha creado al crear el submodulo del repositorio *github.io\u0026rdquo;. Este directorio es donde Hugo rendizara las páginas markdow a HTML  Así es como quedaría(Nota: Ejemplo del fichero que estoy usando con tema que estoy usando actualmente):\nbaseURL = \u0026quot;https://irodrigob.github.io/\u0026quot;\rlanguageCode = \u0026quot;es-es\u0026quot;\rtitle = \u0026quot;Navi-developer\u0026quot;\rtheme = \u0026quot;hugo-book\u0026quot;\rpublishDir = \u0026quot;irodrigob.github.io\u0026quot; Ahora de nuevo vía consola, y en el directorio del sitio, con el comando hugo se creará la página Web en el directorio del submodulo github.io\nAhora y antes de hacer el pull para subir los archivos al repositorio *github.io\u0026rdquo; vamos a comprobar que la configuración sea la correcta. Para ello de nuevo desde la consola se escribirá: git remote -v:\n\rSi el resultado es como el de la imagen es que todo es correcto.\nAhora para poder subir los archivos generados a nuestro repositorio github.io hay que ir al directorio de dicho repositorio y lanzar los siguientes comandos en la consola de windows:\ngit add .\rgit commit -m \u0026quot;Primera subida!!\u0026quot;\rgit push origin master\rEn consola aparecerá algo parecido a esto:\n\rY ahora si se accede la siguiente página: http://irodrigob.github.io/ se verá el contenido publicado.\nBibliografía\r#\r\rPara poder este artículo me he bsado en el siguiente artículo.\n"});index.add({'id':13,'href':'/docs/python/','title':"Python",'content':"Introducción\r#\r\rPython es un lenaguaje de programación muy usado para el machine learning. Aquí iré recogiendo todo lo que vaya aprendiendo.\nSecciones\r#\r\rLas sección de Python son las siguientes:\n\r\rEnlaces de interes\r\r\rEnlaces de interes\r\r\rEntorno de desarrollo\r\r\rEntorno de desarrollo\r\r\rSentencias\r\r\rSentencias\r\r\rMachine learning\r\r\rIntroducción\r#\rToda sobre machine learning en Python Secciones\r#\rLas sección son las siguientes: Librerias\rLibrerias\rAnaconda\rAnaconda\rArbol de decisiones\rArbol de decisiones\rEstimador incertidumbre\rEjemplo sobre los estimadores de incertidumbre\rRegresion lineal\rRegresion lineal\r\r\r"});index.add({'id':14,'href':'/docs/sap/','title':"SAP",'content':"Introducción\r#\r\rEn esta sección será posiblemente la principal de la página ya que es el sistema que llevo desarrollando durante más de 20 años.\nSecciones\r#\r\rLas sección de SAP son las siguientes:\n\r\rABAP\r\r\rLenguaje de desarrollo ABAP\r\r\rGateway\r\r\rGateway\r\r\rUI5\r\r\rSAP UI5\r\r\rVentas\r\r\rVentas (SD)\r\r\r"});index.add({'id':15,'href':'/docs/python/sentencias/','title':"Sentencias",'content':"Introducción\r#\r\rSentencias propias del lenguaje.\nComo nota estoy usando para hacer las pruebas el Jupyter Notebook porque directamente pones el código y pulsando CTRL+ENTER se ejecuta y lo ves justo debajo.\nComentarios\r#\r\rLos comentarios se ponen con el carácter #\nUso del \u0026ldquo;:\u0026rdquo; para sentencia con bloques de código\r#\r\rEn las sentencias que tienen dentro de ellas bloques de código: IF, WHILE, FOR,etc, hay que poner el carácter \u0026ldquo;:\u0026rdquo; al final de la sentencia. Ejemplo:\nif condicion 1 == condicion2: while n \u0026lt; 10: Código dentro de sentencias\r#\r\rA diferencia de otros lenguajes que usán, o bien, carácteres especiales (como el {} como en Javascript), o bien, sentencias de inicio y fin para identificar el código que hay dentro de una sentencia: IF, FOR, etc.. En Python eso se hace identado, ya sea con un espacio en blanco o tabulacion, para indicar que las líneas de código pertenecen a una sentencia. Por ejemplo:\nif a \u0026lt;\u0026gt; b: sentencia 1 del IF sentencia 2 del IF setencia fuera del IF Si no identamos entonces va a dar un mensaje de error porque se va pensar que la sentencia, en este caso el IF, no tiene código.\nVisualizar datos\r#\r\rCon el comando print podemos visualizar el contenido de variables\nprint(a) print(\u0026#34;El valor de a es:\u0026#34;,a) Resultado:\n12\rEl valor de a es: 12\rSecciones\r#\r\rEl detalle de sentencias más especificamente:\n\r\rEntrada de datos\r\r\rEntrada de datos\r\r\rVariables\r\r\rVariables\r\r\rCadenas\r\r\rCadenas\r\r\rCaptura de excepciones\r\r\rCaptura de excepciones\r\r\rCondiciones\r\r\rCondiciones\r\r\rConstantes internas\r\r\rConstantes internas\r\r\rFicheros\r\r\rFicheros\r\r\rFunciones internas\r\r\rFunciones internas\r\r\rIteracciones\r\r\rIteracciones\r\r\rListas y tuplas\r\r\rListas y tuplas\r\r\rOperadores\r\r\rOperadores\r\r\rUsar librerias\r\r\rUsar librerias\r\r\r"});index.add({'id':16,'href':'/docs/sap/abap/sentencias_74/','title':"Sentencias \u003e= 7.4",'content':"Objetivo\r#\r\rA partir de la versión 7.4 de ABAP aparecerán nuevas sentencia, que se demoninan in-line, que permiten una mayor flexibilidad a la hora de desarrollar. Se demoninan in-line porque se puede combinar varias sentencias en una sola línea, incluso, se puede poner dichas sentencias a la hora de pasar parámetros en clases. Lamentablemente, las funciones no permiten dicha funcionalidad.\nHay que destacar que estas sentencias van mejorando en cada versión, en la versión 7.5 apareciendo nuevas funcionalidades.\nAunque tengo que reconocer que usar estas sentencias son muy guays y parece que sabes, muchas veces su legibilidad queda en entredicho. Y hay veces que hay que usar un mix de sentencias de \u0026ldquo;siempre\u0026rdquo; son más legibles tanto para uno propio, como para la persona que lo va a mantener.\nIré creando páginas para ir clasificando los distintos tipo de sentencias.\nPublicaciones\r#\r\r\r\rBucles\r\r\rSentencias sobre proceso de tablas internas\r\r\rCondiciones\r\r\rSentencias sobre condiciones\r\r\rConversiones\r\r\rSentencias sobre conversión de datos\r\r\rFiltros\r\r\rSentencias sobre el filtrado de datos\r\r\rLectura tablas del diccionario\r\r\rFormas nuevas de leer en las tablas del diccionario\r\r\rMapeo de campos\r\r\rSentencias sobre mapeo de campos\r\r\rRelleno de valores\r\r\rSentencias para informar tablas internas\r\r\rString template\r\r\rSentencias sobre el tratamiento de string\r\r\r"});index.add({'id':17,'href':'/docs/python/sentencias/variables/','title':"Variables",'content':"Variables\r#\r\rExisten tres tipos de variables, al menos por lo que he visto que son: string, enteras y flotantes.\n# Esta es integer a=23 # Esta es float b=23.456 # Esta es string c=\u0026#34;hola mundo\u0026#34; Para saber el tipo de variable en cualquier momento se puede usar la siguiente sentencia:\ntype(c) Convertir variables\r#\r\rSi queremos convertir el formato de una variable a otra. Como hay tres tipos de \u0026ldquo;tipos\u0026rdquo;, hay tres funciones que lo hace: INT, FLOAT, STR\nTenemos este ejemplo:\nh=\u0026#34;12\u0026#34; print(\u0026#34;Suma: \u0026#34;,a+h) Al ejecutarlo nos dará esto:\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\rPero si hacemos cambiamos el código:\nh=\u0026#34;12\u0026#34; print(\u0026#34;Suma: \u0026#34;,a+int(h)) Al ejecutarlo nos dará esto:\nSuma: 24\rNo hay que decir que para poderlo el ejemplo anterior en la variable h tiene que haber un número. Si tuviese el valor 12r daría un error porque hay un carácter que no es númerico.\nBorrar contenido de variables\r#\r\rPara borrar el contenido de una variable se usa la sentencia DEL ejemplo:\ndel KNN "});index.add({'id':18,'href':'/docs/sap/abap/bopf/acciones/','title':"Acciones",'content':"Objetivo\r#\r\rLas acciones se usan para llamar a procesos externos del BOPF. Por ejemplo yo los uso para crear un pedido, lanzar otro programa, etc..\nYo suelo usar una clase general para agrupar acciones de un mismo nodo. En algunos artículos y el propio BOPF aconseja hacer una clase por acción. Pero lo veo una manera de generar clases que a lo mejor solo tiene cuatro líneas de código. En mi caso con una sola clase he tenido suficiente, ya que muchas veces según la complejidad tengo una clase que gestiona dicho proceso.\nCase para ir llamando a las determinaciones\r#\r\rPongo el case siguiente en el método principal que se llama en la acción. Y a partir de ese case voy llamando a métodos distintos.\nCASE is_ctx-act_key. WHEN zif_sat_orders_c=\u0026gt;sc_action-\u0026lt;nodo\u0026gt;-\u0026lt;nombre determinacion\u0026gt; ENCASE Parámetros de un método de la deteminación\r#\r\rEl método de la determinación siempre tiene los mismo parámetros que el método estándar, cuya firma es la siguiente:\nIMPORTING !is_ctx TYPE /bobf/s_frw_ctx_act !it_key TYPE /bobf/t_frw_key !io_read TYPE REF TO /bobf/if_frw_read !io_modify TYPE REF TO /bobf/if_frw_modify !is_parameters TYPE REF TO data EXPORTING !eo_message TYPE REF TO /bobf/if_frw_message !et_failed_key TYPE /bobf/t_frw_key !ev_static_action_failed TYPE abap_bool !et_data TYPE INDEX TABLE RAISING /bobf/cx_frw . "});index.add({'id':19,'href':'/docs/sap/abap/alv/','title':"ALV",'content':"Objetivo\r#\r\rCajón de desastre de cosas interesante de los ALV. No descarto que alguna cosa este duplicada en alguna otra sección como clases o funciones.\nProyectos personales\r#\r\rEn el siguiente enlace hay una clase que permite simplificar la creación de ALV. Esta clase encapsula las clases de los SALV.\nMostrar un ALV como si fuera una dynpro pero sin dynpro\r#\r\r CL_GUI_CONTAINER=\u0026gt;SCREEN0 \u0026ndash;\u0026gt; Permite sacar un ALV como si fuera dynpro si tener una o configurar container. En los nuevos SALV hay que poner después del display un WRITE: \u0026lsquo;X\u0026rsquo;.  Recuperar contenido mostrado por un ALV\r#\r\rcl_salv_bs_runtime_info=\u0026gt;set( EXPORTING display = abap_false metadata = abap_true data = abap_true ). Para evitar que un ALV se muestre y asi poder recoger su catalogo,filtros, etc.. . Eso si, el truco del SCREEN0 provoca que no funcione el DISPLAY con este truco\n"});index.add({'id':20,'href':'/docs/python/machine_learning/anaconda/','title':"Anaconda",'content':"Introducción\r#\r\rTal como se ha explicado en la página de entorno de desarrollo, Anaconda permite la instalación de paquetes para usar el machine learning en Python.\nEntonros\r#\r\rLos entornos, creo que hasta tres entornos se pueden usar, permiten tener instalaciones separadas de paquetes según lo que se quiera hacer.\nPara hacer pruebas me he creado un ambiente llamado test que lo he creado con el Anaconda navigator yendo a la pestaña de Enviroments:\n\rY luego pulsando el botón de Create que es la parte inferior de la lista de ambientes.\n\rTe pide los datos del entorno :\n\rY al pulsar el botón de Create comenzar a instalar los paquetes necesarios y algunas librerias.\nActivar entorno\r#\r\rPor defecto esta el entorno base activado. Para cambiar de entorno se puede hacer de dos maneras.\n Es mediante el Anaconda Navigator, ir a la pestaña de Environments y seleccionar el entorno:  \rTarda unos segundos en activarse.\nA través de la consola. Abrir el menu de inicio de Windows, escribir Anaconda y seleccionar el modo consola:  \rY escribir:\nconda activate \u0026lt;nombre entorno\u0026gt; Como en la imagen:\n\rA la derecha de la consola nos pone el entorno por defecto. Al escribir y pulsar Enter\n\rY veremos que a la derecha sale el entorno seleccionado.\nInstalar libreria\r#\r\rVía consola\r#\r\rLa libería de TensorFlow no viene instalado. Vamos a instalar en el entorno de test y vía consola.\nconda installa tensorflow Sale información sobre lo que se va a instalr_\n\rImportante en la imagen se ve que va instalar TensorFlow en el entorno test, el activo. Si tenemos otro entorno que lo queramos instalar hay que activar dicho entorno e instalarlo.\nSe le pulsa que y y comenzará a realizar la instalación. Nos irá diciendo del progreso de instalación pero no tarda mucho. Con eso ya se puede usar el TensorFlow.\nVía entorno gráfico\r#\r\rVamos a instalar la librería Scikit lear(sklearn) para ello primero hay activar el entorno donde la queremos, ir a la pestaña de Environments, seleccionar los paquetes no instaldos y filtrar por scikit:\n\rEn la imagen ya se ha marcado el paquete que nos interesa y pulsar el botón de Apply situado en la parte inferior derecha. NOTA: Al marca los tres paquetes de scifi no hay manera que se instalen por eso solo marco uno\n\rSi hay dependencias con otros paquetes nos pedirá que confirmemos los otros paquetes:\n\rSe pulsar el botón Apply para iniciar la instalación. Una vez instalado el paquete desaparecerá de la lista de paquetes no instalados.\nTambién he instalado el paquete scikit-image. El otro paquete asociado scikit-rf da error al instalarlo.\n"});index.add({'id':21,'href':'/docs/sap/abap/bopf/api_abap/','title':"API desde ABAP",'content':"Objetivo\r#\r\rLa API de acceso al ABAP es siempre la misma por eso voy a poner los ejemplos de cada tipo de operación que se quiera hacer.\nYo para estos casos me suelo crear un helper para simplificar las llamadas entre las clases del proceso y del BOPF.\nInstanciar variables para acceder al BOPF\r#\r\rLo primero que se suele hacer es instanciar las variables necesarias para operar con los BOPF.\nDATA mo_svc_mngr TYPE REF TO /bobf/if_tra_service_manager. DATA mo_txn_mngr TYPE REF TO /bobf/if_tra_transaction_mgr. DATA mo_conf_mngr TYPE REF TO /bobf/if_frw_configuration. TRY. \u0026#34; Inicialización del gestor transaccional actualizaciones, bloqueos, etc.. mo_txn_mngr = /bobf/cl_tra_trans_mgr_factory=\u0026gt;get_transaction_manager( ). \u0026#34; Creación del el gestor de servicios del BOPF. Permite realizar las llamadas al BOPF para ejecutar validaciones, acciones, añadir, etc.. \u0026#34; Es la clase más importante ya que toda la gestión CRUD se realiza en esta clase mo_svc_mngr = /bobf/cl_tra_serv_mgr_factory=\u0026gt;get_service_manager( iv_bo_key ). \u0026#34; Creación de la configuración del BOPF, permite obtener los metadas del BOPF mo_conf_mngr = /bobf/cl_frw_factory=\u0026gt;get_configuration( iv_bo_key ). CATCH /bobf/cx_frw. \u0026#34;TODO: Error handling... ENDTRY. Añadir registro\r#\r\rCuando se añaden hay que tener en cuenta si se insertados datos dependiente de un nodo superior, o no. En un BOPF todos los nodos dependen del ROOT, al menos es lo que he visto, por lo tanto añadir en el nodo ROOT es distinto que en un nodo \u0026ldquo;hijo\u0026rdquo;. Se muestra los ejemplos en ambos\nNodo root\r#\r\rA la tabla donde se guarda los datos que se van a enviar siempre se guarda la estructura de datos. Esa estructura es siempre la combinada, la que tiene los datos persistentes y transitorios. El motivo es que esa estructura tiene el campo donde le indicaremos la clave del registro.\nDATA lt_mod TYPE /bobf/t_frw_modification. DATA(lo_header) = NEW zcar_bo_sc_header( ). ASSIGN lo_header-\u0026gt;* TO FIELD-SYMBOL(\u0026lt;ls_header\u0026gt;). \u0026lt;ls_header\u0026gt; = CORRESPONDING #( is_header ). \u0026lt;ls_header\u0026gt;-vbeln = iv_vbeln. \u0026lt;ls_header\u0026gt;-key = /bobf/cl_frw_factory=\u0026gt;get_new_key( ). INSERT VALUE #( node = zif_car_bo_orders_c=\u0026gt;sc_node-root change_mode = /bobf/if_frw_c=\u0026gt;sc_modify_create key = lo_header-\u0026gt;key data = lo_header ) INTO TABLE lt_mod. Subnodo del ROOT\r#\r\rEste ejemplo es cuando se añaden datos que dependen del root, además es un buen ejemplo para ver como se añaden datos de una tabla interna. Aquí de nuevo se usa la estructura combinada, que se instancia por cada nuevo registro. Si no lo hicieramos insertaríamos siempre el último registro debido a los punteros de memoria.\nLOOP AT it_positions ASSIGNING FIELD-SYMBOL(\u0026lt;ls_positions\u0026gt;). DATA(lv_tabix) = sy-tabix. DATA(lo_positions) = NEW zcar_bo_sc_positions( ). ASSIGN lo_positions-\u0026gt;* TO FIELD-SYMBOL(\u0026lt;ls_bo_positions\u0026gt;). \u0026lt;ls_bo_positions\u0026gt; = CORRESPONDING #( \u0026lt;ls_positions\u0026gt; ). \u0026lt;ls_bo_positions\u0026gt;-posnr = lv_tabix. \u0026lt;ls_bo_positions\u0026gt;-key = /bobf/cl_frw_factory=\u0026gt;get_new_key( ). INSERT VALUE #( node = zif_car_bo_orders_c=\u0026gt;sc_node-positions change_mode = /bobf/if_frw_c=\u0026gt;sc_modify_create key = \u0026lt;ls_bo_positions\u0026gt;-key data = lo_positions source_node = zif_car_bo_orders_c=\u0026gt;sc_node-root association = zif_car_bo_orders_c=\u0026gt;sc_association-root-positions source_key = lo_header-\u0026gt;key ) INTO TABLE lt_mod. ENDLOOP. Modificar registro\r#\r\rEste ejemplo es como se haría en el nodo ROOT pero se puede extrapolar como se haría con el ejemplo de añadir en un nodo dependiente del ROOT.\nCuando se modificar siempre hay que leer los datos previamente a través de la querys del BOPF. Una vez leído los datos se puede modificar.\nINSERT VALUE #( node = zif_sat_orders_c=\u0026gt;sc_node-root change_mode = /bobf/if_frw_c=\u0026gt;sc_modify_update key = lo_header-\u0026gt;key data = lo_header ) INTO TABLE et_mod. Modificar datos en BOPF\r#\r\rPara que los datos del BOPF se graben primero se lanza el proceso de modificación, en este proceso es donde saltarían las validaciones propias.\nEn la clase de utilidades del BOPF que se esta indicada en el índice de la sección todo este proceso esta encapsulado para simplificar la operativa.\nmo_svc_mngr-\u0026gt;modify( EXPORTING it_modification = it_mod IMPORTING eo_change = DATA(lo_change) eo_message = eo_message ). Grabar datos en BOPF\r#\r\rUna vez la modificación no devuelve errores es cuando se pueden grabar.\nEn la clase de utilidades del BOPF que se esta indicada en el índice de la sección todo este proceso esta encapsulado para simplificar la operativa.\nmo_txn_mngr-\u0026gt;save( IMPORTING ev_rejected = ev_rejected eo_message = eo_message ). Consulta de datos\r#\r\rCuando se tiene la clave del registro del nodo se tiene que usar el método retrieve o retrieve_by_association.\nCuando se tiene el ID del registro\r#\r\rLT_HEADER es la tabla interna que se indica en Combinated table type\nmo_svc_mngr-\u0026gt;retrieve( EXPORTING iv_node_key = zif_atron_file_engine_c=\u0026gt;sc_node-root it_key = VALUE #( ( key = iv_id_file ) ) iv_fill_data = abap_false IMPORTING et_data = lt_header ). Los datos de un subnodo\r#\r\rEn node_key se informa el nodo donde pertenece la clave que se le pasará IT_KEY. En asociación se indica del nodo de la key a que nodo se quiere recuperar valores. En el ejemplo la key pertenece al nodo root y queremos que recuperar los datos asociados a dicha clave en el nodo content.\nmo_svc_mngr-\u0026gt;retrieve_by_association( EXPORTING iv_node_key = zif_atron_file_engine_c=\u0026gt;sc_node-root it_key = VALUE #( ( key = iv_id_file ) ) iv_association = zif_atron_file_engine_c=\u0026gt;sc_association-root-content iv_fill_data = abap_true IMPORTING et_data = lt_content ). Hacer consultas\r#\r\rAl BOPF se puede hacer búsqueda por cualquier campo de los nodos que tenga. Para eso el nodo tiene que tener un tipo de búsqueda de tipo *Select by elements\u0026rdquo; en la pestaña Query.\nLos parámetros de búsqueda se pasan en el tipo tabla /BOBF/T_FRW_QUERY_SELPARAM y el método ha usar es el QUERY. Ejemplo:\nDATA lt_header_selparams TYPE /bobf/t_frw_query_selparam. INSERT VALUE #( attribute_name = zif_car_bo_orders_c=\u0026gt;sc_node_attribute-root-vkorg sign = \u0026#39;I\u0026#39; option = \u0026#39;EQ\u0026#39; low = p_vkorg ) INTO TABLE lt_header_selparams. INSERT VALUE #( attribute_name = zif_car_bo_orders_c=\u0026gt;sc_node_attribute-root-vtweg sign = \u0026#39;I\u0026#39; option = \u0026#39;EQ\u0026#39; low = p_vtweg ) INTO TABLE lt_header_selparams. INSERT VALUE #( attribute_name = zif_car_bo_orders_c=\u0026gt;sc_node_attribute-root-spart sign = \u0026#39;I\u0026#39; option = \u0026#39;EQ\u0026#39; low = p_spart ) INTO TABLE lt_header_selparams. mo_svc_mngr-\u0026gt;query( EXPORTING iv_query_key = zif_car_bo_orders_c=\u0026gt;sc_query-root-select_by_elements it_selection_parameters = lt_header_selparams iv_fill_data = abap_true IMPORTING et_data = et_header ). El parámetro IV_FILL_DATA tiene que estar TRUE para que nos devuelva datos en el parámetro ET_DATA. La tabla interna donde se almacenan los datos debe ser del tipo Combinated table type que hay definida en el nodo. Si solo queremos los ID de los registros se haría de la siguiente manera:\nmo_svc_mngr-\u0026gt;query( EXPORTING iv_query_key = zif_car_bo_orders_c=\u0026gt;sc_query-positions-select_by_elements it_selection_parameters = it_positions_selparams iv_fill_data = abap_false IMPORTING et_key = DATA(lt_key_pos) ). El parámetro de entrada IS_QUERY_OPTIONS se le puede indicar los campos de ordenación, número de registros y opciones de páginación.\n"});index.add({'id':22,'href':'/docs/sap/abap/rtts/saber_campos_estructura/','title':"API desde ABAP",'content':"Ejemplo\r#\r\rDATA(lt_components) = CAST cl_abap_structdescr( cl_abap_typedescr=\u0026gt;describe_by_data( cs_row_data ) )-\u0026gt;get_components( ). "});index.add({'id':23,'href':'/docs/python/machine_learning/arbol_decisiones/','title':"Arbol de decisiones",'content':"Introducción\r#\r\rTodo sobre arboles de decisiones\nPara oider usar los algoritmos de regresion líneas en el ambiente de anaconda tiene que estar instalado la librería Scikit learn se puede obtener más información en la página que habla sobre las librerías\nSecciones\r#\r\rLas sección son las siguientes:\n\r\rEjemplo básico\r\r\rEjemplo básico de entrenamiento y visualización del arbol de decisiones\r\r\rExplicación sobreajuste\r\r\rEjemplo sobreajuste\r\r\r"});index.add({'id':24,'href':'/docs/sap/abap/archivelink/','title':"Archivelink",'content':"Objetivo\r#\r\rRecopilar información útil sobre los archivelink\nProyectos personales\r#\r\rEn el siguiente enlace hay una clase que permite la gestión de documentos en Archivelink, GOS y BDS. Permite leer, subir y borrar documentos.\nPublicaciones\r#\r\r\r\rInformación general\r\r\rInformación general\r\r\r"});index.add({'id':25,'href':'/docs/sap/abap/bopf/tablas/basic_component/','title':"Basic Component",'content':"Objetivo\r#\r\rGeneralmente las tablas que generales a todo SAP son las interesantes ya que permiten cosas que de otra manera no se podría saber: ya sea porque no se conoce la transacción o falta de permisos para acceder a determinadas transacciones.\nLista\r#\r\rGenerales\r#\r\r   Función Descripción     SXC_CLASS Contiene que clase esta utilizando una implementacion de BADI   DWINACTIV Objetos desactivados   SSM_CUST Variables del session manager (ejemplo imagen en pantalla de inicio)   SSM_USR Tabla para controlar a que menus tiene acceso el usuario en el session manager   USERS_SSM Lo mismo que la de antes pero valida en la ECC6.0 EHP4   SE16N_CD_KEY Change Documents – Header   SE16N_CD_DATA Change Documents – Data   DBTABLOG Log de modificacion de tablas   TLOCK Tabla de bloqueos de objetos en ordenes.   BALHDR Tabla de cabecera con logs que se generan con la SLG0 y SLG1    Desarrollo ABAP\r#\r\r   Función Descripción     DEVACCESS Tabla con la clave desarrollador de los usuarios   TFDIR Include y programa de una funcion.    Formularios\r#\r\r   Función Descripción     STXFTXT Tabla de textos de formularios    Archivelink / GOS / BDS / Etc.\r#\r\r   Función Descripción     SRGBTBREL Tabla con los adjuntos del GOS. Es como la TOA01 del archivelink   SGOSATTR Tabla que sirve para configurar acciones que salen en el boton del GOS de SAP   SDOKFEXT_C Tabla de cliente para poner los mimetype que faltan para que pueda funcionar el GOS    "});index.add({'id':26,'href':'/docs/sap/abap/funciones/basic_component/','title':"Basic Component",'content':"Objetivo\r#\r\rFunciones del módulo basic component, es decir, funciones que son generales a todo SAP.\nAl final hay una sección de ejemplos para algunas funciones. No todas las funciones tienen ejemplo.\nLista\r#\r\rGenerales\r#\r\r   Función Descripción     SXO_IMPL_DELETE Borra la implementación de una BADI   SCP_REPLACE_STRANGE_CHARS Quita acentos, ç, ¨, etc… de una char   SELECTION_TEXTS_MODIFY_DTEL Permite cambiar el texto de un campo de selección. Util para en enhacements en programas estándar.   SAPGUI_SET_FUNCTIONCODE Permite simular que se pulsa un código de función.   SEO_METHOD_SIGNATURE_GET De una clase y método te devuelve sus parametros y tipos de datos   C14Z_MESSAGES_SHOW_AS_POPUP Saca un popup con los mensajes (formato similar a bapiret2) con sus iconos y demas   F4IF_INT_TABLE_VALUE_REQUEST Permite hacer ayudas para búsqueda en base a una tabla interna   RS_REFRESH_FROM_SELECTOPTIONS Recupera los valores de los parametros de una pantalla de selección. Ideal para usarlo despues con el WITH SELECTION-TABLE   SYSTEM_CALLSTACK Funciones para ver la pilas de llamada de un progama   BP_JOB_READ Lee los datos de un job. El OPCODE para leerlo todo es el 36.    Diccionario de datos\r#\r\r   Función Descripción     DOMAIN_VALUE_GET Se le pone el dominio y valor, y devuelve su descripcion   DDUT_DOMVALUE_TEXT_GET Recupera el texto de un valor fijo de un dominio   OIUP_REFRESH_TABLE_BUFFER Sincroniza el buffer de una tabla    SPOOL\r#\r\r   Función Descripción     RSPO_RETURN_SPOOLJOB Devuelve el contenido binario de una orden de spool (para listados da dump). Si en el campo DESIRED_TYPE le pones \u0026ldquo;RAW\u0026rdquo; devuelve el contenido en formato legible. En este caso no da dump si es un ALF.   RSPO_DOWNLOAD_SPOOLJOB Funcion que descarga un spool a fichero plano    Conversión\r#\r\r   Función Descripción     UNIT_CONVERSION_SIMPLE Convierte valores de unidades medidas estándar (de horas a minutos, etc..)   HRHAP_CONVERT_STR_TO_TABLE Pasa de un string a un tline respetando saltos de lineas    Dirección\r#\r\r   Función Descripción     ADDR_GET Devuelve los datos de direccion de cualqueir tipo de ADRNR   ADDR_GET_COMPLETE Te devuelve todos los datos de direccion: direccion, mails, telefonos, etc..   ADDRESS_INTO_PRINTFORM De una direccion te lo pinta en formato direccion de smartform. En el campo ADDRESS_TYPE hay que poner el valor \u0026lsquo;1\u0026rsquo;.    Smartform\r#\r\r   Función Descripción     SSFRT_READ_TEXTMODULE Devuele el texto creado por la transaccion SMARTFORMS    ALV\r#\r\r   Función Descripción     LT_DBDATA_READ_FROM_LTDX Permite leer los datos de una variante de ALV: catalogo, ordenaciones, etc..    Ejemplos\r#\r\rSELECTION_TEXTS_MODIFY_DTEL\r#\r\rDATA: lt_zsel_dtel TYPE rsseldtel OCCURS 0, ls_zsel_dtel TYPE rsseldtel. ls_zsel_dtel-name = \u0026#39;S_PRODPH\u0026#39;. ls_zsel_dtel-kind = \u0026#39;S\u0026#39;. ls_zsel_dtel-datenelment = \u0026#39;ZZE_PRODPH\u0026#39;. APPEND ls_zsel_dtel TO lt_zsel_dtel. CALL FUNCTION \u0026#39;SELECTION_TEXTS_MODIFY_DTEL\u0026#39; EXPORTING PROGRAM = sy-repid TABLES sel_dtel = lt_zsel_dtel EXCEPTIONS program_not_found = 1 program_cannot_be_generated = 2 OTHERS = 3. LT_DBDATA_READ_FROM_LTDX\r#\r\rCALL FUNCTION \u0026#39;LT_DBDATA_READ_FROM_LTDX\u0026#39; EXPORTING I_TOOL = R_TOOL \u0026#34; LT IS_VARKEY = LS_VARKEY TABLES T_DBFIELDCAT = LT_DBFIELDCAT T_DBSORTINFO = LT_DBSORTINFO T_DBFILTER = LT_DBFILTER T_DBLAYOUT = LT_DBLAYOUT EXCEPTIONS NOT_FOUND = 1 WRONG_RELID = 2 OTHERS = 3. REPORT ZMML0088 HANDLE LOG_GROUP USERNAME JTORRE VARIANT TEST_ENZ TYPE F "});index.add({'id':27,'href':'/docs/sap/abap/clases/basic_component/','title':"Basic component",'content':"Lista\r#\r\r   Clase Descripción     CALL METHOD cl_gui_cfw=\u0026gt;set_new_ok_code( ‘YOUR_OK_CODE’ ). Permite simular que se pulsa un código de función.   CL_BCS_CONVERT Convierte de txt a raw, a solix, viceversa, etc…   CL_ABAP_EXCEPTIONAL_VALUES Con el método get_max_value devuelve el valor máximo de una variable. Si es numc03 da 999.   CL_SYSTEM_TRANSACTION_STATE Para saber si esta en un proceso commit, o saber el numero de LUW, etc..   CL_ABAP_DATFM Funcion que te devuelve el formato de fecha de un usuario o pais. Y de ese formato tiene otro método que te dice la mascara   CL_SALV_BS_RUNTIME_INFO Clase para desactivar la salida del ALV y poder recuperar los datos    "});index.add({'id':28,'href':'/docs/sap/abap/sentencias_74/bucles/','title':"Bucles",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten procesar tablas internas. Este artículo esta muy relacionado con el del relleno de valores ya que se usán las mismas sentencias para procesar tablas internas. Aún asi, lo separo en dos artículos según la finalidad en que se use.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rEl siguiente ejemplo se usa la cláusula GROUP BY de los LOOP que sustituye a los AT NEW. En el primer loop nos devuelve la clave de registros únicos que se va agrupando y que informa en el field-symbol . Y el loop at group  nos devuelve los registros que conforman dicha clave.\nLOOP AT mt_level_agr_type ASSIGNING FIELD-SYMBOL(\u0026lt;ls_level_agr_type\u0026gt;) WHERE id_nivel1 = \u0026#39;OFF\u0026#39; GROUP BY ( id_nivel1 = \u0026lt;ls_level_agr_type\u0026gt;-id_nivel1 id_nivel_inf = \u0026lt;ls_level_agr_type\u0026gt;-id_nivel_inf boart = \u0026lt;ls_level_agr_type\u0026gt;-boart size = GROUP SIZE index = GROUP INDEX ) ASSIGNING FIELD-SYMBOL(\u0026lt;group\u0026gt;). . write:/ \u0026lt;group\u0026gt;-id_nivel1, \u0026lt;group\u0026gt;-id_nivel_inf, \u0026lt;group\u0026gt;-boart. LOOP AT GROUP \u0026lt;group\u0026gt; ASSIGNING FIELD-SYMBOL(\u0026lt;ls_level_agr_type_row\u0026gt;). WRITE:/ \u0026lt;ls_level_agr_type_row\u0026gt;-boart_agr. ENDLOOP. ENDLOOP. Ejemplo 2\r#\r\rEn este ejemplo es similar al anterior la diferencia es que dentro del loop ya tendremos los registros únicos según lo que se indique en el GROUP BY.\nLOOP AT mt_key_field_text_cond ASSIGNING FIELD-SYMBOL(\u0026lt;ls_key_field_text_cond_group\u0026gt;) WHERE kschl = \u0026lt;ls_kschl\u0026gt;-kschl AND field_cust_is_hier = zcl_rtn_customer_data=\u0026gt;is_customer_hierarchy( iv_customer ) AND field_cust IS NOT INITIAL GROUP BY \u0026lt;ls_key_field_text_cond_group\u0026gt;-kotab. En la clausula GROUP BY se indica los campos que se quiere hacer la agrupación\nEjemplo 3\r#\r\rEjemplo encontrado de como hacer un collect:\nactual_collect = VALUE #( FOR GROUPS group OF \u0026lt;flight\u0026gt; IN original_table GROUP BY ( carrid = \u0026lt;flight\u0026gt;-carrid connid = \u0026lt;flight\u0026gt;-connid ) ( REDUCE #( INIT sum_aux TYPE sflight FOR line IN GROUP group NEXT sum_aux = VALUE #( BASE sum_aux carrid = line-carrid connid = line-connid price = sum_aux-price + line-price seatsmax = sum_aux-seatsmax + line-seatsmax seatsocc = sum_aux-seatsocc + line-seatsocc paymentsum = sum_aux-paymentsum + line-paymentsum seatsmax_b = sum_aux-seatsmax_b + line-seatsmax_b seatsocc_b = sum_aux-seatsocc_b + line-seatsocc_b seatsmax_f = sum_aux-seatsmax_f + line-seatsmax_f seatsocc_f = sum_aux-seatsocc_f + line-seatsocc_f ) ) ) ). Ejemplo collect\r#\r\rEn este ejemplo es propio y permite saber cuantas repeticiones que hay de las price list(PLTYP)\nTYPES: BEGIN OF ts_pltyp_count, pltyp TYPE knvv-pltyp, count TYPE i, END OF ts_pltyp_count. TYPES: tt_pltyp_count TYPE STANDARD TABLE OF ts_pltyp_count WITH EMPTY KEY. \u0026#34; Se cuenta cuantas price list hay repetidas DATA(lt_count) = VALUE tt_pltyp_count( FOR GROUPS lt_group OF \u0026lt;wa1\u0026gt; IN lt_customer_sales GROUP BY ( pltyp = \u0026lt;wa1\u0026gt;-pltyp ) ( REDUCE #( INIT ls_count TYPE ts_pltyp_count FOR ls_group IN GROUP lt_group NEXT ls_count = VALUE #( BASE ls_count pltyp = ls_group-pltyp count = ls_count-count + 1 ) ) ) ). Este es un caso, cuya legibilidad no queda clara y tengas que leer la sentencias varias veces para entenderla. Sobretodo porque son cosas que, al menos a mi, no se usan muy a menudo.\nEjemplo de un DELETE ADJACENT DUPLICATES con la sentencia REDUCE\r#\r\rTYPES: BEGIN OF ts_dates_intervals, datab TYPE datab, datbi TYPE datab, END OF ts_dates_intervals. TYPES: tt_dates_intervals TYPE STANDARD TABLE OF ts_dates_intervals WITH EMPTY KEY. DATA(lt_dates_intervals) = VALUE tt_dates_intervals( ( datab = \u0026#39;20200101\u0026#39; datbi = \u0026#39;20201231\u0026#39; ) ( datab = \u0026#39;20200101\u0026#39; datbi = \u0026#39;20201231\u0026#39; ) ( datab = \u0026#39;20200101\u0026#39; datbi = \u0026#39;20211231\u0026#39; ) ( datab = \u0026#39;2190301\u0026#39; datbi = \u0026#39;20211231\u0026#39; ) ( datab = \u0026#39;2190301\u0026#39; datbi = \u0026#39;20200830\u0026#39; ) ). DATA(lt_dates) = VALUE tt_dates_intervals( FOR GROUPS lt_group OF \u0026lt;wa\u0026gt; IN lt_dates_intervals GROUP BY ( datab = \u0026lt;wa\u0026gt;-datab datbi = \u0026lt;wa\u0026gt;-datbi ) ( REDUCE #( INIT ls_dates TYPE ts_dates_intervals FOR ls_group IN GROUP lt_group NEXT ls_dates = VALUE #( BASE ls_dates datab = ls_group-datab datbi = ls_group-datbi ) ) ) ). Otra sentencia que usando las sentences de siempre quedan más claras para cualquiera que las lea.\nContar el valor de un campo en una tabla interna\r#\r\rEjemplo que cuenta los registros que cumplen unas determinas condiciones:\ncs_layout_options-number_columns_fixed = REDUCE #( INIT x = 0 FOR \u0026lt;fcat_ui5\u0026gt; IN it_fieldcatalog_ui5 WHERE ( fixed_column = abap_true ) NEXT x = x + 1 ). Concatenar todos los valores de un campo de una tabla separandolos por un cáracter separador\r#\r\rSe puede hacer de tres formas:\n Ejemplo 1  DATA(lv_sql) = REDUCE string( INIT sql TYPE string FOR \u0026lt;ls_fields\u0026gt; IN lt_fields NEXT sql = sql \u0026amp;\u0026amp; COND #( LET sep = \u0026#39;,\u0026#39; IN WHEN sql IS NOT INITIAL THEN |{ sep } { \u0026lt;ls_fields\u0026gt; }| ELSE |{ \u0026lt;ls_fields\u0026gt; }| ) ). Ejemplo 2  DATA(lv_sql) = REDUCE string( INIT sql TYPE string FOR \u0026lt;ls_fields\u0026gt; IN lt_fields NEXT sql = sql \u0026amp;\u0026amp; COND #( WHEN sql IS NOT INITIAL THEN |, { \u0026lt;ls_fields\u0026gt; }| ELSE |{ \u0026lt;ls_fields\u0026gt; }| ) ). Ejemplo 3  DATA(lv_sql) = REDUCE string( INIT sql TYPE string FOR \u0026lt;ls_fields\u0026gt; IN lt_fields NEXT sql = sql \u0026amp;\u0026amp; CONV string( LET sep = COND #( WHEN sql IS NOT INITIAL THEN \u0026#39;,\u0026#39; ELSE \u0026#39;\u0026#39; ) IN |{ sep } { \u0026lt;ls_fields\u0026gt; }| ) ). Todas ellas casi funcionan de la misma manera, la diferencia es como se concatena los campos. Casi, porque el ejemplo 3 pone un espacio en blanco antes del primer campo.\nComo nota personal el código que finalmente use para el desarrollo que estaba haciendo es el número 2.\n"});index.add({'id':29,'href':'/docs/python/sentencias/cadenas/','title':"Cadenas",'content':"Cadenas\r#\r\rLas cadenas son secuencias de carácteres. Es decir, una variable de tipo de string puedes acceder a una posición concreta. Es como acceder a una posición de un array o lista. Ejemplo:\ntexto = \u0026#34;hola\u0026#34; print(\u0026#34;Segunda letra del texto es:\u0026#34;, texto[1]) Resultado:\nSegunda letra del texto es: o\rOJO: Que aquí los arrays también empiezan por 0.\nCon la sentencia LEN se puede saber el tamaño de la cadena. Ejemplo:\ntexto = \u0026#34;hola\u0026#34; print(\u0026#34;Primera letra del texto es: \u0026#34;, texto[0]) longitud = len(texto) print(\u0026#34;Última letra del texto es: \u0026#34;,texto[longitud-1]) Resultado:\nPrimera letra del texto es: h\rÚltima letra del texto es: a\rComo en Javascript la longitud hay que restarle uno para poder acceder al último elemento, o para hacer bucles.\nHay que tener en cuenta que las cadenas no se puede modificar como si se puede hacer en otros lenguajes, solo podemos consultarla. Es decir, esto:\ntexto=\u0026#34;hola\u0026#34; texto[2]=\u0026#34;C\u0026#34; Da el siguiente error:\nTypeError Traceback (most recent call last)\rin 1 texto=\u0026quot;hola\u0026quot;\r----\u0026gt; 2 texto[2]=\u0026quot;C\u0026quot;\rTypeError: 'str' object does not support item assignment\rBucles\r#\r\rA las cadenas también se puede acceder haciendo iteracciones. Ejemplo:\nEjemplo:\ntexto=\u0026#34;hola\u0026#34; n=0 while n \u0026lt; len(texto): print(\u0026#34;Letra: \u0026#34;,texto[n]) n = n + 1 Resultado:\nLetra: h\rLetra: o\rLetra: l\rLetra: a\rEl ejemplo anterior pero usando FOR\ntexto=\u0026#34;hola\u0026#34; for letra in texto: print(\u0026#34;Letra: \u0026#34;, letra) Dando el mismo resultado.\nAccediendo a las partes de la cadena\r#\r\rTambién se puede acceder a trozos de una cadena:\ntexto=\u0026#34;hola mundo\u0026#34; print(\u0026#34;Primera parte: \u0026#34;, texto[0:4]) print(\u0026#34;Segunda parte: \u0026#34;, texto[5:10]) Resultado:\nPrimera parte: hola\rSegunda parte: mundo\rOperadores en condiciones\r#\r\rEl operador IN se menciona en la página de condiciones pero pongo el ejemplo aquí que es su sitio:\ntexto=\u0026#34;hola\u0026#34; if \u0026#34;o\u0026#34; in texto: print(\u0026#34;Existe la O\u0026#34;) if \u0026#34;j\u0026#34; in texto: pass else: print(\u0026#34;No existe la J\u0026#34;) Resultado:\nExiste la O\rNo existe la J\rTambién se puede usar los \u0026lt; o \u0026gt; para hacer comparaciones por orden alfabético.\nMétodos de cadenas\r#\r\rLas cadenas son también objetos que por defecto tienen su propios métodos. Para saber que métodos tiene un cadena hay que hacer lo siguiente:\ntexto=\u0026#34;hola\u0026#34; dir(texto) El resultado no lo pongo porque es muy largo y supongo que los métodos variarán segun la versión de Python usada. Un ejemplo de como se usaría:\ntexto=\u0026#34;hola\u0026#34; print(\u0026#34;texto en minúsculas\u0026#34;, texto) print(\u0026#34;texto en mayñusculas\u0026#34;, texto.upper()) Resultado:\ntexto en minúsculas hola\rtexto en mayñusculas HOLA\rPara saber como funciona mejor es irse a la docu oficial de Python.\nFormatos\r#\r\rComo cadenas se les puede aplicar formatos. El carácters para aplicar formatos es % y a continuación el tipo de valor que se va formtear:\n d \u0026ndash;\u0026gt; Decimal g \u0026ndash;\u0026gt; Flotante s \u0026ndash;\u0026gt; String  Ejemplo:\ntexto=\u0026#34;ivan\u0026#34; print(\u0026#34;hola %s\u0026#34; % texto) Resultado:\nhola ivan\rSe puede sustituir varios valores pero hay que definir una tupla. Ejemplo:\nprint(\u0026#34;hola %s, hoy es dia %d y son las %g\u0026#34; % (\u0026#34;ivan\u0026#34;, 5, 16.32)) Resultado:\nhola ivan, hoy es dia 5 y son las 16.32\rEl numero de formatos en la cadena debe coincidir con el número de valores en una tupla para que no de error.\n"});index.add({'id':30,'href':'/docs/python/sentencias/captura_excepciones/','title':"Captura de excepciones",'content':"Captura excepciones\r#\r\rPara captura excepciones y que no salgan error raros al hacer operaciones tenemos la sentencia TRY..EXCEPT\nEn el siguiente ejemplo extráido de un manual hay una formula para pasar de grados Farenheit a Celsius:\nent = input(\u0026#39;Introduzca la Temperatura Fahrenheit:\u0026#39;) try: fahr = float(ent) cel = (fahr - 32.0) * 5.0 / 9.0 print(\u0026#34;Grados celsius\u0026#34;:cel) except: print(\u0026#39;Por favor, introduzca un número\u0026#39;) NOTA: Aquí también tiene que haber una identación en el código dentro del TRY y del EXCEPT\nResultado:\nGrados celsius: 7.222222222222222\rSi se pone un valor no válido, como un string: Resultado:\nPor favor, introduzca un número\r"});index.add({'id':31,'href':'/docs/sap/abap/clases/','title':"Clases",'content':"Objetivo\r#\r\rRecopilación de clases que son interesantes\nPublicaciones\r#\r\r\r\rBasic component\r\r\rBasic component\r\r\r"});index.add({'id':32,'href':'/docs/sap/abap/clases_desarrollo/','title':"Clases de desarrollo",'content':"Objetivo\r#\r\rRecopilar clases de desarrollo que son interesante para tener ejemplos\nLista\r#\r\r   Clase desarrollo Descripción     SST_DEMO Ejemplos de hojas de transformación simple    "});index.add({'id':33,'href':'/docs/python/sentencias/condiciones/','title':"Condiciones",'content':"Condiciones\r#\r\rLas condiciones son como en la mayoria de lenguajes\n x == y \u0026ndash;\u0026gt; x es igual a y x != y \u0026ndash;\u0026gt; x es distinto de y x \u0026gt; y \u0026ndash;\u0026gt; x es mayor que y x \u0026lt; y \u0026ndash;\u0026gt; x es menor que y x \u0026gt;= y \u0026ndash;\u0026gt; x es mayor o igual que y x \u0026lt;= y \u0026ndash;\u0026gt; x es menor o igual que y x is y \u0026ndash;\u0026gt; x es lo mismo que y x is not y \u0026ndash;\u0026gt; x no es lo mismo que y Operadores lógicos son: and(y), or(o) y not(no) IN Devuelve si un cadena esta dentro de otra. El ejemplo de este operador se encuentra en la página de cadenas  Para hacer bucles condiciones esta la sentencia IF. Ejemplo\nEjemplo sencillo:\nif 34 == 45: print(\u0026#34;Son iguales\u0026#34;) else: print(\u0026#34;No son iguales\u0026#34;) Resultado:\nNo son iguales\rHay una sentencia que es PASS que se pondría después del IF o del ELSE para que no de error. Ejemplo:\nif 34 \u0026lt;= 45: pass No hace nada. Útil cuando todavía no saber que poner. En otros lenguaje se pondría un comentario pero aquí esto da error:\nif 34 \u0026lt;= 45: #no hago nada Da este error::\nFile \u0026quot;\u0026quot;, line 2\r#no hago nada\r^\rSyntaxError: unexpected EOF while parsing\rTambién están los *ELSE IF\u0026rdquo; que se escriben con ELIF:\nif 34 == 45: print(\u0026#34;Son iguales\u0026#34;) elif 34 \u0026gt; 45: print(\u0026#34;Es mayor\u0026#34;) else: print (\u0026#34;Es menor\u0026#34;) Resultado:\nEs menor\r"});index.add({'id':34,'href':'/docs/sap/abap/sentencias_74/condiciones/','title':"Condiciones",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten hacer condiciones.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rPermite que una variable se inicialice segun una condicion determinada:\nDATA(lv_updkz) = COND #( WHEN is_header-negotiation_code IS INITIAL THEN zif_rtn_data=\u0026gt;cv_updkz_insert WHEN is_header-has_changed = abap_true THEN zif_rtn_data=\u0026gt;cv_updkz_edit ). Ejemplo 2\r#\r\rUso de SWITCH haciendo una conversion de variable;\n\u0026lt;ls_cond_crud\u0026gt;-value = SWITCH #( \u0026lt;ls_conditions_values_field\u0026gt;-field_type WHEN zif_rtn_negotiation_data=\u0026gt;cs_field_types-flex_group THEN \u0026lt;field\u0026gt; LSE CONV string( \u0026lt;field\u0026gt; ) ). Ejemplo 3\r#\r\rDATA lv_valor TYPE string. DO 10 TIMES. lv_valor = COND #( LET x = sy-index MOD 2 IN WHEN x = 0 THEN |par| ELSE |impar| ). WRITE:/ lv_valor. ENDDO. "});index.add({'id':35,'href':'/docs/python/sentencias/constantes_internas/','title':"Constantes internas",'content':"Iteracciones\r#\r\rLas constantes internas, son eso, constantes propias de Python que tienen un valor fijo y que pueden servir para inicializar valores.\n None \u0026ndash;\u0026gt; Sirve para indicar que una variable esta vacia.  "});index.add({'id':36,'href':'/docs/sap/abap/sentencias_74/conversiones/','title':"Conversiones",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten convertir valores de un campos a otro.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rLo que antes se hacia:\nDATA lo_elemdesc type ref to cl_abap_elemdescr. Lo_elemdesc ?= cl_abap_typedescr=\u0026gt;describe_by_data( iv_abap_value. Ahora se puede hacer en una sola línea: DATA(lo_elemdesc) = CAST cl_abap_elemdescr( cl_abap_typedescr=\u0026gt;describe_by_data( iv_abap_value ) ). Ejemplo 2\r#\r\rConvertir los valores de un select para adaptarlos a la variable donde se van a guardar:\nSELECT SINGLE CAST( months_past AS INT2 ), CAST( months_future AS INT2 ) INTO (@ev_months_past, @ev_months_future) FROM zrtn_t_0037 WHERE vkorg = @iv_vkorg AND vtweg = @iv_vtweg AND spart = @iv_spart. "});index.add({'id':37,'href':'/docs/sap/abap/bopf/plantillas_codigo_interno/','title':"Código ejemplo dentro del BOPF",'content':"Objetivo\r#\r\rAquí están las plantillas de ejemplo ABAP que se usarán dentro de las clases que se usarán en validaciones, determinaciones, etc..\nInstanciar clase de mensajes\r#\r\rLos mensajes de los BOPF se recogen en una clase generica que pueda ser usada en las determinaciones, validaciones, etc..\nIF eo_message IS NOT BOUND. \u0026#34; Se instancia la clase de mensajes en caso de no estarlo eo_message = /bobf/cl_frw_factory=\u0026gt;get_message( ). ENDIF. Template código usado en acciones, validaciones y determinaciones\r#\r\rEn cada método de una determinación, validación o acciones siempre hay los siguientes pasos, más o menos:\n Leer los datos según la clave que se recibe por párametro. Este paso siempre hay que hacerlo da igual lo que se haga Procesar los datos Actualizar los datos en el nodo. Este paso es opcional según lo que estemos haciendo  Lectura de datos\r#\r\rDATA lt_data TYPE zatron_bo_i_file_eng_header. \u0026#34; Lectura de datos io_read-\u0026gt;retrieve( EXPORTING iv_node = is_ctx-node_key it_key = it_key IMPORTING et_data = lt_data ). Actualización\r#\r\rLOOP AT lt_data REFERENCE INTO DATA(lo_data). \u0026#34; Actualización io_modify-\u0026gt;update( iv_node = is_ctx-node_key iv_key = lo_data-\u0026gt;key is_data = lo_data ). ENDLOOP. "});index.add({'id':38,'href':'/docs/sap/ui5/desarrollar_vscode/','title':"Desarrollo con VS Code",'content':"Objetivo\r#\r\rPara desarrollar en UI5 he probado tres editores: WebStorm, Sublime y Visual Studio Code.\nWebStorm lo use hace años y me fue tan bien que pague por la licencia. El tema de reconocer configurar, eso hace años, las librerias era con una extensión pero no esta la última versión.\nSublime lo empece a usar hace poco para mi último proyecto y fue el único que era capaz de navegar entre las distintas funcionaes de javascript que iba creando. Pero su entorno no me terminaba de encajar. Y la extensión de librerias de UI5 esta más desfasada.\nVisual Studio Code. Es el que uso ahora, el único pero gordo es que no puedes navegar entre funcionens que esten entre distintos archivos. Esto hace que uses mucho los buscadores o tener buena memoria. Además, tiene extensiones para generar las vistas XML. El entorno lo veo más amigable y es el que me siento a gusto. Además, creo que es el que tiene más recorrido por todo su ecosistema de extensiones.\nEn este artículo explicaría sin mucho detalle, a menos de momento, como he configurado mi entorno para desarrollar en UI5 con VS Code.\nPreparar entorno en VS Code\r#\r\rPrerequisitos\r#\r\rHay que tener instalado el Visual Studio Code y Node.js.\nPaquetes del node.js\r#\r\r Mediante la consola de windows instalar el paquete \u0026ldquo;generator-easy-ui5\u0026rdquo; para simplificar la creación de proyectos nuevos, como vistas, etc.. Se instala con la sentencia:  npm install -g yo generator-easy-ui5 Configuración del VS Code\r#\r\r Instalar la extensión SAPUI5 Extension de VS Code. Esta extensión te permite autocompletar código en vistas XML y controladores. Yo ahora mismo no lo tengo ni instalado porque he ido haciendo las cosas a base de ejemplos de las propias página de UI5 y su API. Si lo instalamos hay que modificar la configuración de las extensión para:   Cambiar el nombre de la carpeta donde esta el codigo fuente. Como se va usar el \u0026ldquo;easy-ui5\u0026rdquo; se cambia el valor \u0026ldquo;src\u0026rdquo; por \u0026ldquo;webapp\u0026rdquo;. Hay que indicarla versión de SAPUI5 que se va a usar, con la versión 1.73.1 funciona sin problemas  Instalar la extensión XML Tools para que te haga pretty pinter el as vistas XML. Si queremos los atributos en cada línea, y no todo en una línea que es la opción por defecto, hay que hay ir a la configuración de las extensión, es la que se llama XML Tools Configuration, y marcar el flag que se llama Split attributes on Format  Preparar el proyecto\r#\r\r  Abrir la consola de Windows e ir a la carpeta donde se alojara el proyecto. IMPORTANTE: No es necesario crear la carpeta del proyecto*\n  Ahora ejecutar el comando:\n  yo easy-ui5 Para hacer la configuración inicial del proyecto. Seguir las preguntas del asistente. Este paso sobrescribe aspectos de la configuración del paso 2. A día de hoy no tengo claro si se puede obviar el paso 2 ya que a lo mejor este paso crea el package.json. Las opciones para mis proyectos personales han sido:\n\rEn las preguntas tenemos la posibilidad de crear la carpeta donde estará el proyecto. Además instalará las dependencias necesarias.\nCosas a tener en cuenta:\n El nombre del namespace se concatena al nombre de la carpeta. Creo que en su momento yo puse un namespace pero le indique que no creará la carpeta.  Como en mi caso voy a llamar a servicios que están en un sistema SAP hay que instalar un proxy para evitar el cross domain. Para eso hay que hacer lo siguiente:   Desde la consola de Windows ejecutar el siguiente comando:  npm install ui5-middleware-simpleproxy --save-dev  Dentro de la carpeta del proyecto hay que modificar el archivo ui5.yaml y poner algo parecido(digo parecido porque cada uno tendrá un servidor distinto):  Srver: server: customMiddleware: - name: ui5-middleware-simpleproxy afterMiddleware: compression mountPath: /sap/opu/odata/sap configuration: baseUri: \u0026#34;http://vhcalnplci.dummy.nodomain:8000/sap/opu/odata/sap\u0026#34; Esto lo que hace que cualquier petición local a /sap/opu/odata/sap se redirigia a la url indicada en baseUri. El nombre del servidor es el SAP pone a sus ABAP Trial Version.\n En el fichero *package.json\u0026rdquo; hacer lo siguiente: Sección devDependencies modificar:  \u0026#34;ui5-middleware-simpleproxy\u0026#34;: \u0026#34;*\u0026#34; Se pone el asterisco en la versión para que sea válido para cualquier versión del paquete.\n Añadir la siguiente sección, yo la he puesto justo después de devDependencies:  \u0026#34;ui5\u0026#34;: { \u0026#34;dependencies\u0026#34;: [ \u0026#34;ui5-middleware-simpleproxy\u0026#34; ] } Ahora abrimos el VS Code y se abre la carpeta del proyecto. Ahora en la parte inferior hay varias pestañas, ir a la de Terminal y pondremos:  npm start Esto arrancará el servidor web con la aplicación si todo esta bien arranca la aplicación template que se ha creado con el yo easy-ui5.\n"});index.add({'id':39,'href':'/docs/sap/abap/bopf/determinaciones/','title':"Determinaciones",'content':"Objetivo\r#\r\rLas determinaciones se usan para rellenar atributos transitorios, son aquellos campos que se definen en la estructura transitoria. Yo los uso para completar descripciones y hacer cálculos.\nYo suelo usar una clase general para agrupar determinaciones de un mismo nodo. En algunos artículos y el propio BOPF aconseja hacer una clase por determinación. Pero lo veo una manera de generar clases que a lo mejor solo tiene cuatro líneas de código. En mi caso con una sola clase he tenido suficiente, ya que muchas veces según la complejidad tengo una clase que gestiona dicho proceso.\nCase para ir llamando a las determinaciones\r#\r\rPongo el case siguiente en el método principal que se llama en la determinación. Y a partir de ese case voy llamando a métodos distintos.\nCASE is_ctx-det_key. WHEN zif_sat_orders_c=\u0026gt;sc_determination-\u0026lt;nodo\u0026gt;-\u0026lt;nombre determinacion\u0026gt; ENCASE Parámetros de un método de la deteminación\r#\r\rEl método de la determinación siempre tiene los mismo parámetros que el método estándar, cuya firma es la siguiente:\nIMPORTING is_ctx TYPE /bobf/s_frw_ctx_det it_key TYPE /bobf/t_frw_key io_read TYPE REF TO /bobf/if_frw_read io_modify TYPE REF TO /bobf/if_frw_modify EXPORTING eo_message TYPE REF TO /bobf/if_frw_message et_failed_key TYPE /bobf/t_frw_key RAISING /bobf/cx_frw. "});index.add({'id':40,'href':'/docs/','title':"Docs",'content':""});index.add({'id':41,'href':'/docs/python/machine_learning/arbol_decisiones/ejemplo_basico/','title':"Ejemplo básico",'content':"Introducción\r#\r\rEjemplo extraído del video Machine Learning episodio 3. Árboles de Decisiones\nEl ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas\nCódigo\r#\r\rCarga de librerías\n# Clasificador de arbol de decisiones from sklearn.tree import DecisionTreeClassifier # Dos set de datos uno de cancer y otro de iris from sklearn.datasets import load_breast_cancer, load_iris # Librería para separar datos de entrenamiento y testing from sklearn.model_selection import train_test_split # Estos últimos son para poder mostrar gráficamente el arbol de decisiones from sklearn.tree import export_graphviz import graphviz import matplotlib.pyplot as plt import numpy as np Datos para el ejemplo\n# Carga de los datos IRIS a una variable iris = load_iris() Split de datos de entrenamiento y test\n# Las variables _ent son las que se usarán para entrenamiento y testing # Target son las etiquetas y data y son las características X_ent, X_test, y_ent, y_test = train_test_split(iris.data, iris.target) # Variable con el arbol de decisiones arbol = DecisionTreeClassifier() Se entrena a algoritmo\n# Se le pasan los datos de entrenamiento y los valores guia arbol.fit(X_ent, y_ent) Resultado del entrenamiento con los datos de test\n# Con esto se averigua el % de aprendizaje. # Devuelve un 97% que no esta nada mal arbol.score(X_test, y_test) Resultado del entrenamiento con los datos del entrenamiento. Se produce sobreajuste que no es bueno ya que puede provocar falsos positivos a futuro.\n# Se hace lo mismo sobre los datos de entrenamiento. En este caso devuelve el 100%. # Parece ser que devuelva un 100% en los datos de entrenamiento no es muy bueno arbol.score(X_ent, y_ent) Se genera un fichero para visualizar el arbol de deciciones\n# Genera un archivo .dot con los datos del arbol. # Al ejecutarlo aparece el archivo en el mismo directorio donde esta este script export_graphviz(arbol, out_file=\u0026#39;arbol.dot\u0026#39;, class_names=iris.target_names, feature_names=iris.feature_names,impurity=False,filled=True) Visualización del fichero\n# Abre el fichero generado en el paso anterior, se lee en una variable with open(\u0026#39;arbol.dot\u0026#39;) as f: dot_graph=f.read() # Se muestra el arbol de decisiones graphviz.Source(dot_graph) Muestra un gráfico de barra para ver cual es la carácterística más importante en la clasificación\n# Esto lo que nos dice que tan de importante es una característica especifica # para ayudarnos a definir a la clase a la que pertenece. # En el gráfico se mostrará la característica más importante es la longitud del petalo # Caract obtenemos el número de características que tiene la tupla caract = iris.data.shape[1] # \u0026#34;feature_importances_\u0026#34; es la importancia de nuestras características # Indica que va crear un gráfico de barras donde: # El primer parámetro \u0026#34;y\u0026#34; tendrá cuatro registros, el número de características # El segundo parámetro son los valores que se hará las características plt.barh(range(caract),arbol.feature_importances_) # Se le informan las etiquetas. El primer parámetro es un array en # blanco(np.arange crea un array en base al número pasado). El segundo # parámetro son los textos de la etiqueta plt.yticks(np.arange(caract),iris.feature_names) # Se le pasa el texto para el eje X e Y plt.xlabel(\u0026#39;Importancia de las características\u0026#39;) plt.ylabel(\u0026#39;Característica\u0026#39;) plt.show() Se cambia los parámetros del árbol para mejorarlo.\n# Se van ajustar los parámetros del clasificador para mejorar la precisión. # max_depth le indica cuantos niveles en la clasificación le permitimos. # Si inicialmente erán 6 niveles encontrados, según la gráfica ahora serán 3. arbol = DecisionTreeClassifier(max_depth=3) De nuevo al entrenamiento\n# Se vuevle a entrenar arbol.fit(X_ent, y_ent) Resultados del entrenamiento\n# El resultado con los datos de test son del 94% arbol.score(X_test,y_test) # El resultado con los datos de entrenamiento es del 97%, antes era del 100% arbol.score(X_ent, y_ent) Ejemplo de como hace el proceso de clasificación el arbol\n# Ejemplo de como se muestra gráficamente como # realiza la clasificación el algoritmo. Se usa la # librería Matplotlib para visualizarlo n_classes = 3 plot_color = \u0026#34;bry\u0026#34; plot_step = 0.2 for pairidx, pair in enumerate([[0,1], [0, 2],[0, 3], [1, 2], [1, 3], [2, 3]]): X = iris.data[:, pair] y = iris.target # Entrenar algoritmo # Sin usar la opción max_depth=3 en la gráfica se ven unas rayas, como las rojas, # que son debidas a los sobreajustes. Esta raya le sirve al modelo para clasificar # a futuro uno de los elementos. Entonces en un futuro cuando un elemento caigan # en esas rayas lo va a clasificar de manera incorrecta. # Si se pone ela opción max_depth=3 esas rayas ya no se ven. Ya no hay sobreajuste # en el entrenamiento clf = DecisionTreeClassifier(max_depth=3).fit(X,y) plt.subplot(2, 3, pairidx + 1) x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1 y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step)) Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) cs = plt.contour(xx, yy, Z, cmap=plt.cm.Paired) plt.xlabel(iris.feature_names[pair[0]]) plt.ylabel(iris.feature_names[pair[1]]) plt.axis(\u0026#34;tight\u0026#34;) # Plot the training point for i, color in zip(range(n_classes), plot_color): idx = np.where(y == i) plt.scatter(X[idx, 0], X[idx, 1], c = color, label = iris.target_names[i], cmap=plt.cm.Paired) plt.axis(\u0026#34;tight\u0026#34;) plt.suptitle(\u0026#34;Ejemplo de clasificador de arboles\u0026#34;) plt.legend() plt.show() En esta imagen se ve como se ha realizado la clasificación:\n\rLos recuadros azules son los sobreajustes que produce el algoritmo al intentar clasificar alguno de los elementos, pero que esto a futuro dará falsos positivos.\nAjustando el parámetro max_depth=3 vemos que algunas de las líneas desparecen:\n\rEn el siguiente artículo se intenta explica un poco mejor que es el sobreajuste.\n"});index.add({'id':42,'href':'/docs/python/machine_learning/regresion_lineal/entrenar_algoritmo/','title':"Entrenar algoritmo de regresion lineal",'content':"Introducción\r#\r\rEjemplo extraído del video Machine Learning episodio 2 Algoritmos de regresión\nEl ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas\nCódigo\r#\r\rSe cargan las librerias\n# Regresor de KNN o vecinos cercanos from sklearn.neighbors import KNeighborsRegressor # Set de datos de boston from sklearn.datasets import load_boston # Divide los datos entre entrenamiento y testing from sklearn.model_selection import train_test_split # Algoritmos de regresión linea y ridge from sklearn.linear_model import LinearRegression, Ridge Carga del modelo de datos que se van a usar\n# A la variable boston se le asigna el set de datos. Que son los precios de las # casas en boston que depende de varías características boston = load_boston() # Visualiza las claves que tiene los datos boston.keys() Son sentencias que permite los datos del modo cargado en el paso anterior.\nSi se descomenta las sentencia y se ejecuta se van viendo los datos\r#\r\r# La data son las características #boston.data # Respuestas a nuestras características #boston.target # Ver los ejemplos que hay en data. Que devuelve 506, 13. Que son 506 casa # con 13 características #boston.data.shape # Si se hace lo mismo pero con el target devuelve 506 respuestas #boston.target.shape Variables que se usarán para el entrenamiento y test\n# Las que terminan en \u0026#34;_ent\u0026#34; son para entrenar y las que terminan # en \u0026#34;_test\u0026#34; son para testing. # Estas variables se inicializan con la data o características y las etiquetas X_ent, X_test, y_ent, y_test = train_test_split(boston.data, boston.target) Permite ver que se datos se usan para entrenamiento y para test\n# Si hacemos esto se que son los datos que ha usado para entrenar. Que serán 379, 13 print(\u0026#34;Datos para entrenar:\u0026#34;,X_ent.shape) # Y para testing devuelve el resto 127, 13 print(\u0026#34;Datos para testing:\u0026#34;,X_test.shape) # resto de variables que son los vector pero sin las características. # Solo devuelve 379 para _ent y 127 para _test print(\u0026#34;Datos y para entrenar:\u0026#34;, y_ent.shape) print(\u0026#34;Datos y para testing:\u0026#34;, y_test.shape) Primer algoritmo de regresion líneal.\n# Variable que se le asocia con el algoritmo de vecinos cercanos. Pasándole # que considere 3 vecinos. knn = KNeighborsRegressor(n_neighbors=3) Datos de entrenamiento\n# Se le pasa al algoritmo los datos de entrenamiento y los valores # objetivos o guia. Al ejecutar se visualizará los parámetros # del algoritmo que han sido modificados, como es el número de vecinos. knn.fit(X_ent,y_ent) Resultado del entrenamiento\n# Para saber como aprendio nuestro algoritmo se le pasan los # datos de test. # Si se le pasa 3 vecinos el % de aprendizaje es un 48%. Pero si se le # sube el valor del parámetro n_neighbors a 5 el % de aprendizaje # disminuye al 47%. # Y si ponemos 4 es un poco inferior al 3. Por ello, el más optimo # es dejarlo en 3 para este set de datos. knn.score(X_test,y_test) Borrao de datos para probar otros algoritmos.\n# Se borra el contenido de la variable para poder usar la libreria # \u0026#34;LinearRegressionLinearRegression\u0026#34; # El objetivo de borrar es evitar que la maquia se sature al procesos varios modelos del knn Se repiten los mismos pasos para usar otro algoritmo.\nrl = LinearRegression() # Se alimenta con los mismos datos que para el algoritmo de vecinos cercanos rl.fit(X_ent,y_ent) # Vamos a ver cual ha sido su nivel de aprendizaje. Pasandole # los mismos datos que para el KNN. En este caso ha aprendido un 72% # mucho mejor que el 48% del KNN rl.score(X_test,y_test) # Ahora se va borra el algoritmo usado para utilizar el algoritmo de ridger del rl Lo mismo pero para el algoritmo ridge\nridge = Ridge(alpha=1) # Se vuelve alimentar con los mismo datos de los algoritmos anteriores ridge.fit(X_ent, y_ent) # Y ahora a ver cuanto ha aprendido # Devuelve un 72%(redonde hacia arriba) que es un poco mejor al # algoritmo de regression lineal. Cambiando el parámetro alpha a 0.5 # devuelve un valor sensible inferior al valor por defecto que es alpha = 1 ridge.score(X_test,y_test) del ridge "});index.add({'id':43,'href':'/docs/python/machine_learning/estimador_incertidumbre/','title':"Estimador incertidumbre",'content':"Introducción\r#\r\rEjemplo extraído del video Machine Learning episodio 5. Estimador de incertidumbre. Aquí hay imagenes obtenidos del video para clarificar tal como lo hace en el video.\nEl ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas\nEl estimador de incertidumbre es una función que viene incluida en algunos algoritmos de Scikit learn(Sklearn), y nos ayuda a ver como de seguro esta nuestro algoritmo al clasificar un nuevo valor o punto, como lo llama en el video. El estimador es el paquete SVM dentro de la librería de Sklearn.\nEjemplo si tenemos un algoritmo que tiene que clasificar entre 0 y 1, el estimador nos va a decir que tan seguro se siente nuestro algoritmo para predicir que el nuevo valor lo va a clasificar al grupo 0 o al grupo 1. Por ejemplo nos puede servir para detectar que si un nuevo punto el algorito nos dice que esta al 50% seguro que lo va a clasificar al grupo 0, podríamos llegar a la conclusión que preferimos que no haga la predicción. Porque podría ser igual de valido que se clasificará al grupo 1. Ya que el nuevo valor tiene las misma posibilidades de ir a un grupo como al otro.\nEl uso del SVM es útil para poder escoger el algoritmo que nos va mejor a la hora de clasificar. Lo que hay que tener en cuenta el sobreajuste, si un algoritmo esta muy seguro a la hora de clasificar puede ser que este sobreajustando por lo tanto habrá que tratar dicho ajuste.\nCodigo\r#\r\rEl primer paso es siempre cargar las librerías.\n# Set de datos from sklearn.datasets import load_iris # Separador de datos de entrenamiento y test from sklearn.model_selection import train_test_split # Libreria de los estados de incertidumbre from sklearn import svm Datos para las pruebas\n# Carga del modelo de datos iris=load_iris() Generación de las variables con los datos\nX_ent, X_test, y_ent, y_test = train_test_split(iris.data, iris.target) Variable para poder poner en marcha el SVM\n# Se crea la variable con el algoritmo SVM algoritmo = svm.SVC(probability=True) Paso habitual para entrenar el algoritmo\n# Entrenamiento del algoritmo algoritmo.fit(X_ent, y_ent) Se informo como se quiere que se comporte el SVM.\nalgoritmo.decision_function_shape = \u0026#34;ovr\u0026#34; # decision_function nos va a devolver un numero que nos va a decir que # tan lejos esta el punto del hiperplano que clasifica. # Al algoritmo se le pasa los valores de testing y que solo nos traiga 10 ejemplos. algoritmo.decision_function(X_test)[:10] En este trozo de código vamos a explicar como funciona el SVM tal como lo hace el video. Veamos el siguiente modelo de datos:\n\rLa línea verde o hiperplano nos separa los puntos azules de los rojos. Lo que queremos que devuelva el algoritmo sea el número más alto, ya que indicará que esta lo más alejado posible de la línea/hiperplano. Si el algoritmo un número que esta sobre la línea no va a estar muy seguro de como clasificarlo, pero si el punto esta lo más lejano de la línea el algoritmo va a estar más seguro a la hora de clasificarlo.\nEl resultado que devuelve al ejecutar es el siguiente:\narray([[-0.20269857, 2.23688486, 0.84169686],\r[-0.21313057, 2.23268086, 0.88330921],\r[ 2.22580348, 1.15214418, -0.24872264],\r[ 2.23455235, 1.13095515, -0.25044655],\r[ 2.23313006, 1.13211798, -0.24964792],\r[ 2.2269661 , 1.1259788 , -0.24423893],\r[-0.23439994, 1.08865842, 2.22247787],\r[-0.23387148, 1.18608119, 2.17366629],\r[ 2.22684708, 1.14267576, -0.24739233],\r[-0.21427536, 2.21884877, 0.96646885]])\rQue significa, que el primer registro o dato lo va a clasificar en el segundo grupo porque es el número más alto, es decir, el más alejado al hiperplano. En el segundo datos también iría al segundo grupo, pero en el tercer dato lo clasificaría en el primer grupo.\nNOTA: Nos devuelve tres grupos la función porque en el set de datos de Iris soy hay tres tipos de flores para clasificar\nSe lanza otra función contra los datos de test para devuelve unos valores similares al código anterior pero a nivel de probalidad.\n# Esta función nos va decir algo parecido al \u0026#34;decision_function\u0026#34; pero en el # ámbito de la probabilidad. # Se le pasa los datos de testing y se le indica que solo procese los 10 primeros algoritmo.predict_proba(X_test)[:10] El resultado que devuelve al ejecutar es el siguiente:\narray([[0.01701662, 0.97626968, 0.0067137 ],\r[0.01130569, 0.97524721, 0.0134471 ],\r[0.95145127, 0.03609592, 0.01245281],\r[0.97121252, 0.01879533, 0.00999214],\r[0.96865943, 0.02079702, 0.01054356],\r[0.95443207, 0.03348436, 0.01208357],\r[0.00997134, 0.04291861, 0.94711005],\r[0.01111241, 0.46790436, 0.52098323],\r[0.95385933, 0.03421938, 0.0119213 ],\r[0.01653293, 0.95084668, 0.03262039]])\rAquí vemos que el primer dato lo va clasificar al segundo grupo con un 97% de probabilidades, lo mismo para el segundo datos. Pero para el tercer registro iría al primer grupo con un 95% de probabilidades.\nComo se ve la clasificación es coherente con la función anterior.\nNOTA: La suma de los porcentajes de cada fila va ser del 100%\nFinalmente se lanza la función de predicción para ver como va a predecir el algoritmo.\n# Con al función o algoritmo predict nos va a decir como va a predecir el algoritmo de clasificación algoritmo.predict(X_test)[:10] El resultado que devuelve al ejecutar es el siguiente:\narray([1, 1, 0, 0, 0, 0, 2, 2, 0, 1])\rEl resultado que devuelve coincide con los valores que nos han devuelto las funciones anteriores. Hay que recordar que los arrays empiezan por el índice 0, por lo tanto en el primer registro que vale \u0026ldquo;1\u0026rdquo; equivale al 97% que devuelve el PREDICT_PROBA y el \u0026ldquo;2.23\u0026rdquo; que devuelve la función DECISION_FUNCTION\n"});index.add({'id':44,'href':'/docs/python/machine_learning/arbol_decisiones/explicacion_sobreajuste/','title':"Explicación sobreajuste",'content':"Introducción\r#\r\rEjemplo extraído del video Machine Learning episodio 4. Sobreajuste. Este artículo es un añadido a lo que se comenta brevemente en el artículo de ejemplo sobre arbol de decisiones\nEn el video indicado se explica perfectamente lo que és, aún así, intento explicarlo a mi manera que es un sobreajuste o overfilling, en ingles. Se usarán pantallazos del video para explicar algunos puntos.\nEl sobreajuste se produce cuando se entrena el algoritmo ya que intenta generar una formula o ecuación que permite clasificar los datos. El problema viene que al hacer esto sacrifica fiabilidad en las predicciones futuras.\nEn el ejemplo básico sobre arbol de decisiones se ponía la siguiente imagen de lo que producía el algoritmo sin sobreajuste:\n\rLos recuadros azules marcan el sobreajuste que se produce y una vez ajustado los parámetros del algoritmo ese sobreajuste desaparece:\n\rExplicación\r#\r\rImaginemos que tenemos el siguiente set de datos que se tienen que clasificar:\n\rY queremos que clasifica lo que son rojos y verdes. En un caso normal el algoritmo lo clasificaría de esta manera:\n\rPero en la imagen hay ciertos puntos verdes y rojos que están mezclados y que con una clasificación normal no se haría correctamente. Lo que ocurre con el algoritmo de clasificación es que intenta hacer esta curva rara:\n\rComo se ve intenta clasificarlo todo siguiente la línea. El problema es que si en un futuro viene un valor rojo justo al lado de un verde que este en esas curvas extrañas lo va a clasificar mal.\nCon la regresión ocurre lo mismo, en un caso normal intentaría ajuste de la siguiente manera:\n\rPero con sobreajuste intentaría hacer todo esto:\n\rEl sobreajuste se detecta con la opción score de nuestro algoritmo:\n# El resultado con los datos de test son del 94% arbol.score(X_test,y_test) Que según el % que devuelva veremos que si el % es 97 para arriba es que esta haciendo sobreajuste. Si el % es más alto más sobreajuste habrá. La solución es ir ajustando los parámetros del modelo o del algoritmo para ir ajustandolos.\n"});index.add({'id':45,'href':'/docs/sap/abap/funciones/fecha/','title':"Fecha / Hora",'content':"Objetivo\r#\r\rDebido a que hay multitud de funciones para fechas y horas que uso, las pongo en un apartado aparte en vez de ponerlas en la de Basic Component.\nLista\r#\r\r   Función Descripción     GET_WEEK_INFO_BASED_ON_DATE Te devuelve la semana y el día que es lunes y domingo.   DATE_GET_WEEK Solo devuelve la semana. Ojo que la semana viene al principio con el año.   HR_AUPBS_MONTH_DAY Le pones dos fechas y te devuelve la diferencia en días, meses, años y días de calendario   HR_MONTHS_BETWEEN_TWO_DATES Dos fechas y te devuelve la diferencia en meses   MONTH_NAMES_GET Devuelve los textos de los meses para un idioma.   RP_CALC_DATE_IN_INTERVAL Permite obtener una fecha a partir de meses, dias o años. Se puede indicar que se sumen o resten   SD_DATETIME_DIFFERENCE Le pasas dos fechas y horas y te devuelve la diferencia en dias y horas   SWI_DURATION_DETERMINE\tFuncion que devuelve en segundos la diferencia entre dos fechas y dos horas    WEEK_GET_FIRST_DAY Devuelve el primer día de la semana pasada   TZ_SYSTEM_TO_LOCAL Convierto la hora y fecha del huso horario del servidor a un huso horario   L_MC_TIME_DIFFERENCE Es como la SD_DATETIME_DIFFERENCE pero devuelve la diferencia en minutos   LAST_WEEK De una semana te devuelve la fecha del lunes y domingo. Y además la semana anterior.   CONVERT_DATE_TO_INTERNAL Convierte una fecha en char a formato interno.   FIMA_DAYS_AND_MONTHS_AND_YEARS Devuelve la diferencia en meses y años entre dos fechas   RSARCH_DATE_CONVERT De una fecha te devuelve mes, periodo, dia, semana, mes, etc..   EWU_ADD_TIME Le pasas fecha y hora. Le pones un campo fecha para que sume hora/minuto/segundo   BKK_ADD_WORKINGDAY Suma/resta dias a una fecha teniendo en cuenta dias laborables    "});index.add({'id':46,'href':'/docs/python/sentencias/ficheros/','title':"Ficheros",'content':"Ficheros\r#\r\rLeer un fichero\r#\r\rSe puede hacer de dos manera con la sentencia WITH y sin ella.\nEjemplo modo sin WITH\nfile = open(\u0026#34;welcome.txt\u0026#34;) data = file.read() print data file.close() # Importante hay que cerrar el fichero para evitar bloqueos Con la opción WITH\nwith open(\u0026#34;hola.txt\u0026#34;) as file: data = file.read() Con WITH parece ser que el control de excepciones es mejor y tareas simples como la preparación del fichero y su cierre se hace de manera automática. Con lo cual evita errores tontos en el tratamiento de ficheros.\nSi queremos abrir el fichero para escritura con WITH sería:\nwith open(\u0026#39;salida.txt\u0026#39;, \u0026#39;w\u0026#39;) as file: file.write(\u0026#39;hola!\u0026#39;) "});index.add({'id':47,'href':'/docs/sap/abap/sentencias_74/filtros/','title':"Filtros",'content':"Introducción\r#\r\rEn este grupo se irán poniendo distintos ejemplos de la sentencia FILTER que es un sentencia que no he usado mucho.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\r\u0026lt;ls_values_search_sap\u0026gt;-kotab_data = FILTER #( lt_values IN FILTER #( lt_konp USING KEY loevm WHERE loevm_ko = \u0026#39;\u0026#39; ) WHERE knumh = knumh ). Lo bueno del filter es que te crea una tabla o te mueve directamente el contenido de la tabla con el filtro aplicado. En el caso de usar búsqueda directa (segundo FILTER) te obliga, eso creo, ha tener una clave para la búsqueda.\nEjemplo 2\r#\r\rdata(et_cust_hier) = FILTER #( lt_cust_hier IN lt_cust_sales USING KEY kunnr WHERE kunnr = kunnr ). Se filtra el contenido de la tabla LT_CUST_HIER con los valores en LT_CUST_SALES filtrando por el cliente. Importante la tabla LT_CUST_SALES debe ser de tipo SORT. ET_CUST_HIER se creará del mismo tipo que LT_CUST_HIER.\n"});index.add({'id':48,'href':'/docs/sap/abap/bopf/tablas/finanzas/','title':"Finanzas",'content':"Objetivo\r#\r\rTablas que permiten descubrir determinadas configuraciones de dicho módulo.\nLista\r#\r\rGenerales\r#\r\r   Función Descripción     GB01 Tabla que contiene los campos que se pueden sustituir en la OBBH   T045DTA Partidas que se graban en la FBWE. Si se borran permite reprocesarlas.    "});index.add({'id':49,'href':'/docs/sap/abap/funciones/finanzas/','title':"Finanzas",'content':"Objetivo\r#\r\rFunciones del módulo de finanzas\nLista\r#\r\r   Función Descripción     FI_FIND_PAYMENT_CONDITIONS Obtiene la fecha de vencimiento en base a la fecha base y condicion de pago   GET_CURRENT_YEAR Se le pasa sociedad y fecha de documento y devuelve el ejercicio fiscal   BAPI_COMPANYCODE_GET_PERIOD Devuelve el periodo y ejercicio contable a partir de una fecha y sociedad. Esta funcion puede ser llamada en remota.   SD_PRINT_TERMS_OF_PAYMENT Calcula la fecha de vto   FI_TERMS_OF_PAYMENT_PROPOSE Calcula la fecha de vto. La diferencia con el anterior es que se le pasa el proveedor.   FI_F4_ZTERM sTe muestra las condiciones de pago o devuelve una tabla con la información en base a un tipo de cuenta    "});index.add({'id':50,'href':'/docs/sap/abap/funciones/','title':"Funciones",'content':"Objetivo\r#\r\rRecopilación de funciones que son interesantes\nPublicaciones\r#\r\r\r\rBasic Component\r\r\rBasic Component\r\r\rFecha / Hora\r\r\rFecha y Hora\r\r\rFinanzas\r\r\rFinanzas\r\r\rLogística\r\r\rLogística\r\r\rVentas\r\r\rVentas\r\r\r"});index.add({'id':51,'href':'/docs/python/sentencias/funciones_internas/','title':"Funciones internas",'content':"Funciones internas\r#\r\rAquí una lista de funciones internas\n MAX y MIN \u0026ndash;\u0026gt; Devuelve el valor máximo y mínimo de una lista. Si es un string nos devolvería la letra más alta y la mínima. Ejemplo:  print(\u0026#34;Letra máxima: \u0026#34;,max(\u0026#34;hola mundo\u0026#34;)) print(\u0026#34;Letra mínima: \u0026#34;,min(\u0026#34;hola mundo\u0026#34;)) Resultado:\nLetra máxima: u\rLetra mínima:  LEN \u0026ndash;\u0026gt; Devuelve el numéro de elementos de una lista. Si es un string devuelve el número de caracteres. Ejemplo:  print(\u0026#34;Número de caracteres: \u0026#34;,len(\u0026#34;hola mundo\u0026#34;)) Resultado:\nNúmero de caracteres: 10\r"});index.add({'id':52,'href':'/docs/sap/gateway/','title':"Gateway",'content':"Objetivo\r#\r\rGateway es el módulo que tiene para la publicación de servicios REST en SAP.\nProyectos personales\r#\r\rEn el siguiente enlace se aglutian utilidades para simplificar determinar procesos en Gateway.\nPublicaciones\r#\r\r\r\rInformación general\r\r\rInformación general\r\r\r"});index.add({'id':53,'href':'/docs/sap/abap/idoc/','title':"IDOC",'content':"Objetivo\r#\r\rRecopilar información útil sobre los IDOC\u0026rsquo;s\nProyectos personales\r#\r\rEn el siguiente enlace hay utilidades para simplificar procesos.\nPublicaciones\r#\r\r\r\rInformación general\r\r\rInformación general\r\r\r"});index.add({'id':54,'href':'/docs/sap/abap/archivelink/informacion_general/','title':"Información general",'content':"Objetivo\r#\r\rEsta página tendrá información general sobre el archivelink, GOS o BDS que son maneras de distintas de archivar documentos en SAP.\nMenú ámbito\r#\r\rEl menú SOA_COPY contiene todas las transacciones para crear, gestionar y monitorizar el archivelink\nProgramas\r#\r\r   Programa Descripción     RSAOT1 Ejemplo de cómo subir y leer documento en archivelink    Tablas\r#\r\r   Tabla Descripción     SGOSATTR Tabla para parametrizar las opciones del menu de archivelink en transacciones    Funciones\r#\r\r   Función Descripción     BDS_GOS_CONNECTIONS_GET Obtiene los adjuntos de un objeto del GOS. El parámetro es la clase de objeto definida en la SWO1    "});index.add({'id':55,'href':'/docs/sap/abap/idoc/informacion_general/','title':"Información general",'content':"Objetivo\r#\r\rEsta página tendrá un listado de información general sobre los IDOC\u0026rsquo;s: transacciones, programas, etc..\nMenú ámbito\r#\r\rEl menú WEDI contiene todas las transacciones para crear, gestionar y monitorizar IDOCs\nTransacciones\r#\r\r   Transacción Descripción     WE19 Clonar IDOC para poderlo procesar   BD87 Analizar IDOC\u0026rsquo;s    Programas\r#\r\r   Programa Descripción     RC1_IDOC_SET_STATUS Permite cambiar el status de un idoc a otro    Tablas\r#\r\r   Tabla Descripción     TBDBE Tabla donde esta la configuración de la función que se lanzará a través de la función BAPI_IDOC_INPUT1    "});index.add({'id':56,'href':'/docs/sap/abap/recursos_humanos/informacion_general/','title':"Información general",'content':"Objetivo\r#\r\rEsta página tendrá un listado de información general sobre el módulo de recursos humanos\nFunciones\r#\r\r   Función Descripción     HR_READ_INFOTYPE_AUTHC_DISABLE Hace que en la funcion HR_READ_INFOTYPE no haga control de autorizacion. Se ha de poner por cada función de lectura de infotipo   HR_CHECK_AUTHORITY_INFTY Permite saber si se tiene autorizacion para leer/escribir un infotipo    Ejemplos\r#\r\rHR_CHECK_AUTHORITY_INFTY\r#\r\rCALL FUNCTION \u0026#39;HR_CHECK_AUTHORITY_INFTY\u0026#39; EXPORTING pernr = pernr-pernr infty = \u0026#39;0008\u0026#39; subty = \u0026#39;0 \u0026#39; begda = p0001-begda endda = p0001-endda level = \u0026#39;R\u0026#39; uname = sy-uname EXCEPTIONS no_authorization = 1 internal_error = 2 OTHERS = 3. Transacciones\r#\r\r   Transacción Descripción     PC_PAYRESULT Programa para ver resultados de nomina    "});index.add({'id':57,'href':'/docs/sap/gateway/informacion_general/','title':"Información general",'content':"Objetivo\r#\r\rEsta página tendrá un listado de información general de Gateway\nTransacciones\r#\r\r   Transacción Descripción     SMGW Transaccion para ver el monitor   SEGW Transacción para los servicios de Gateway   /IWFND/CACHE_CLEANUP Transaccion para borrar el cache del modelo   /IWFND/ERROR_LOG Transaccion para ver los logs   /IWFND/MAINT_SERVICE Activar y mantener servicios    Como debugear error XML Parse\r#\r\rLos errores de gateway muchas nos hay por donde cogerlos. Sobreto cuando se hace deep entity que no hay manera de saber que produce el error. He aquí una manera de saberlo a través del debugging:\nIr a la clase /IWCOR/CL_DS_EP_READER_JSON método READ_ENTITY_INTERNAL. Este método procesa el JSON que recibe y se puede ver el fallo de mapeos\n"});index.add({'id':58,'href':'/docs/sap/ventas/informacion_general/','title':"Información general",'content':"Objetivo\r#\r\rEsta página tendrá información a nivel general\nFlujo\r#\r\rUna imagen que sintetiza muy bien el flujo de ventas:\n\r"});index.add({'id':59,'href':'/docs/python/sentencias/iteracciones/','title':"Iteracciones",'content':"Iteracciones\r#\r\rIteracciones condicionales\r#\r\rLlamo iteracciones condicionales aquellas sentencias que no recorren listas sino simplemente repetin un bloque de sentencias hasta que se cumple una condición. La sentencia WHILE sería un ejemplo de ello:\nn = 5 print(\u0026#34;Contador\u0026#34;) while n \u0026gt;= 0: print(n) n = n - 1 Resultado:\nContador\r5\r4\r3\r2\r1\r0\rCon la sentencia BREAK se puede salir de un bucle. Ejemplo:\nn = 5 print(\u0026#34;Contador\u0026#34;) while True: print(n) n = n - 1 if n == 0: break Resultado:\nContador\r5\r4\r3\r2\r1\rTambién se tiene la sentencia CONTINUE. Esta sentencia salta a la siguiente interacción. Ejemplo:\nn = 6 print(\u0026#34;Contador\u0026#34;) while n \u0026gt;= 0: n = n - 1 if ( n % 2 ) != 0: # Solo se pintan los pares continue print(n) Resultado:\n4\r2\r0\rNOTA PERSONAL: Esta sentencia no la uso en otros lenguajes menos en Python. Pero la pongo para saber que existe.\nIteracciones listas\r#\r\rAquí encontramos la sentencia FOR que permite recuperar una lista de valores y procesarlas. Ejemplo:\nnumeros = [5,4,3,2] for numero in numeros: print(\u0026#34;Número: \u0026#34;, numero) Resultado:\nNúmero: 5\rNúmero: 4\rNúmero: 3\rNúmero: 2\r"});index.add({'id':60,'href':'/docs/sap/abap/sentencias_74/lectura_tablas_diccionario/','title':"Lectura tablas del diccionario",'content':"Introducción\r#\r\rRealmente no tenemos sentencias específica sino que es ampliación del Open SQL para dotarle de más flexibilidad a la hora de leer información\nEjemplo 1\r#\r\rCon este select extendido se busca una parte de los campos de una tabla, pero el resto de campo se completan segun variables rellenadas previamente.\nSELECT kschl, kotab, @is_header-customer_code AS keyvalue, @is_header-validity_to AS datab, @is_header-validity_from AS datbi, @zif_rtn_data=\u0026gt;cv_updkz_insert AS updkz INTO CORRESPONDING FIELDS OF TABLE @et_cond_crud FROM ztippqps WHERE pqtyp = @is_header-negotiation_type_code AND keyfield = @lv_keyfield. Tenemos que pondemos rellenar campos de una tabla/estructura a partir de una constantes. Antes se tendría que haber hecho un loop para hacerlo. Cuando usamos estas capacidades extendidas hay que usar el símbolo @ en las variables que no pertencen al selecy: parámetros, variables, etc..\nEjemplo 2\r#\r\rMismo select que el del ejemplo 1 pero crea la tabla interna donde se guardarán los datos de manera automática, sin declarar previamente.\nSELECT kschl, kotab, @is_header-customer_code AS keyvalue, @is_header-validity_to AS datab, @is_header-validity_from AS datbi, @zif_rtn_data=\u0026gt;cv_updkz_insert AS updkz INTO TABLE @data(et_cond_crud) FROM ztippqps WHERE pqtyp = @is_header-negotiation_type_code AND keyfield = @lv_keyfield. "});index.add({'id':61,'href':'/docs/sap/abap/programas/programas/','title':"Lista de programas",'content':"Lista\r#\r\rGenerales\r#\r\r   Programa Descripción     RSSPO* Tiene ejemplos de las funcion POPUP_*   BCS_EXAMPLE_7 BCS: Enviar correu-e amb adjunt Excel autocreat (exemple)   RSCPSETEDITOR Este es el programa que a partir del EHP4 permite activar desactivar el word como editor para smartforms y sapscript   BALVBUFDEL Resetea memoria intermedia de ALV. Ideal cuando se cambian textos de elementos de datos.   RSBTONEJOB Este programa se pone en un job, se le indica el nombre de otro job y si está activo saca un error message y cancela   PRGN_CORRMEN2 Sincroniza los textos de un idioma del menu de ámbito en un rol   RSDRI_INFOPROV_READ_DEMO Saber como recuperar datos de un ODS mediante funciones.   RADMASG0 Permite hacer activaciones en masa de objetos normales o estándar. Útil en ampliaciones al estándar    Ventas\r#\r\r   Programa Descripción     RV80HGEN Activar rutinas VOFM. Ver nota: 327220 - VOFM function and its objects to learn how to works VOFM    Finanzas\r#\r\r   Programa Descripción     RGUGBR00 Genera la sustituciones y validaciones de FI   RFBIBL00 Programa para generar contabilizacion en FI    Recursos humanos\r#\r\r   Programa Descripción     RGUGBR00 Genera la sustituciones y validaciones de FI   RHMOVE30 Programa para pasar a una orden de transporte las estructura organizativa de HR   RPUDELPN  Borrado masivo de empleados de HR (transaccion PU00 para individual)    Workflow\r#\r\r   Programa Descripción     RSWUWFML2 Programa notificación Workitems Workflow WKF aviso email envío   RMPS_SET_SUBSTITUTE Programa para ponerte de sustituto de cualquier usuario SAP para el SAPOffice    "});index.add({'id':62,'href':'/docs/python/sentencias/listas_tuplas/','title':"Listas y tuplas",'content':"Listas y tuplas\r#\r\rLas listas son las que usan [] y las tuplas(). Ambas sirven para guardar datos. Y ambas están indexadas por 0, es decir, al primer registro se accede por el valor 0.\nLos string en si mismos son listas como se explica en pagína de cadenas. Pero mientras que en la cadenas los valores son carácteres en una lista/tupla puede contener cualquier valor.\nEjemplo de inicialización:\ntupla=(1,2,3,4,5,6,7) lista=[8,9,10,11,12] La diferencia en que la lista no puede ser modificada durante el programa pero una lista si que se puede. Salvo en las cadenas, que no pueden ser modificadas.\nUn truco para obtener el último valor sin usar el LEN es usar el -1. Ejemplo:\ntupla=(1,2,3,4,5,6,7) lista=[8,9,10,11,12] print(\u0026#34;Último valor: \u0026#34;, lista[-1]) print(\u0026#34;Penúltimo valor: \u0026#34;, lista[-2]) Resultado:\nÚltimo valor: 12\rPenúltimo valor: 11\rLista\r#\r\rModificar valores\r#\r\rPara cambiar una lista es tan sencillo al índice y poner un nuevo valor. Ejemplo:\nlista=[8,9,10,11,12] print(\u0026#34;Valores antes del cambio:\u0026#34;, lista) # Cambiamos el segundo registro lista[1]=15 print(\u0026#34;Valores después del cambio:\u0026#34;, lista) Resultado:\nValores antes del cambio: [8, 9, 10, 11, 12]\rValores después del cambio: [8, 15, 10, 11, 12]\rBorrar valores\r#\r\rPara modificar valores se usa el método interno de la lista llamado POP. Ejemplo como borrar el último valor:\nlista=[8,9,10,11,12] print(\u0026#34;Valores antes:\u0026#34;, lista) lista.pop() print(\u0026#34;Valores después:\u0026#34;, lista) Resultado:\nValores antes: [8, 9, 10, 11, 12]\rValores después: [8, 9, 10, 11]\rPara borrar una posición concreta se puede hacer de dos maneras con el método POP o con la sentencia DEL. Ejemplo con POP:\nlista=[8,9,10,11,12] print(\u0026#34;Valores antes:\u0026#34;, lista) lista.pop(1) print(\u0026#34;Valores después:\u0026#34;, lista) Resultado:\nValores antes: [8, 9, 10, 11, 12]\rValores después: [8, 10, 11, 12]\rEjemplo con DEL\nlista=[8,9,10,11,12] print(\u0026#34;Valores antes:\u0026#34;, lista) del lista[1] print(\u0026#34;Valores después:\u0026#34;, lista) Resultado:\nValores antes: [8, 9, 10, 11, 12]\rValores después: [8, 10, 11, 12]\rEn ambos casos hay que tener en cuenta que el índice empieza por 0.\nAñadir valores\r#\r\rPara añadir se usa el método APPEND de la lista. Ejemplo:\nlista=[8,9,10,11,12] print(\u0026#34;Valores antes:\u0026#34;, lista) lista.append(13) print(\u0026#34;Valores después:\u0026#34;, lista) Resultado:\nValores antes: [8, 9, 10, 11, 12]\rValores después: [8, 9, 10, 11, 12, 13]\rSublistas\r#\r\rEs posible tener una sublista dentro de una lista ejemplo:\nlista=[\u0026#34;valor 1\u0026#34;,2, 3.4,[\u0026#34;subvalor\u0026#34;, 10]] print(\u0026#34;Contenido \u0026#34;, lista) Resultado:\nContenido ['valor 1', 2, 3.4, ['subvalor', 10]]\rSegmentos\r#\r\rIgual que en las cadenas también se puede acceder a segmentos. Ejemplo:\nlista=[1,2,3,4,5,6] print(\u0026#34;Contenido \u0026#34;, lista[3:5]) Resultado:\nContenido [4, 5]\rSi no se pone el primer valor del segmento se comienza a leer desde el primer valor. Ejemplo:\nlista=[1,2,3,4,5,6] print(\u0026#34;Contenido \u0026#34;, lista[:5]) Resultado:\nContenido [1, 2, 3, 4, 5]\rTuplas\r#\r\rEl acceso a los valores de las tuplas se hace igual que con las listas.\n"});index.add({'id':63,'href':'/docs/sap/abap/funciones/logistica/','title':"Logística",'content':"Objetivo\r#\r\rFunciones del módulo de logística. Logística entraría la parte de compras, almacenes, etc.\nLista\r#\r\r   Función Descripción     RM_KOKRS_TO_PLANT_FIND De una centro te devuelve su sociedad FI y CO   CO_RM_COMPANYCODE_FIND De una centro te devuelve su sociedad FI   RK_KOKRS_FIND De una centro te devuelve su sociedad CO   CS_WHERE_USED_MAT De un material devuelve en que lista de material se usa.   ME_READ_HISTORY Historial de documento de compras   BAPISDORDER_GETDETAILEDLIST Se le pasa los pedidos y que se desea recuperar y devuelve informacion completa del pedido   NAST_GET_MESSAGE_OBJECT_RECV Función que devuelve el nombre de la lista de distribucion que esta en el campo NAST-TDNAME. Nota: Se podría haber puesto también en ventas   SO_DLI_READ_API1 Devuelve los componentes de una lista de distribucion   CARO_ROUTING_READ De una hoja de ruta te devuelve sus componentes.   AC_DOCUMENT_RECORD Te devuelve los documentos subsiguientes de un documento. I_AWREF es el numero de documento. I_AWORG es ejercicio. I_AWTYP es el tipo de objeto. RMRP es para la MIRO.    "});index.add({'id':64,'href':'/docs/python/machine_learning/','title':"Machine learning",'content':"Introducción\r#\r\rToda sobre machine learning en Python\nSecciones\r#\r\rLas sección son las siguientes:\n\r\rLibrerias\r\r\rLibrerias\r\r\rAnaconda\r\r\rAnaconda\r\r\rArbol de decisiones\r\r\rArbol de decisiones\r\r\rEstimador incertidumbre\r\r\rEjemplo sobre los estimadores de incertidumbre\r\r\rRegresion lineal\r\r\rRegresion lineal\r\r\r"});index.add({'id':65,'href':'/docs/sap/abap/sentencias_74/mapeo_campos/','title':"Mapeo de campos",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten hacer mapeo de campos, digamos que son las que sustituyen al MOVE-CORRESPODING.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rLa clase CL_ABAP_CORRESPONDING permite crear mapeos entre tablas y estructuras. En este ejemplo se construye la tabla de mapeos en base a una tabla interna. Nota: Los campos que se informan en el mapeo deben de existir ya que sino se provoca una excepción.\ncl_abap_corresponding=\u0026gt;create( source = is_header destination = es_header_crud mapping = VALUE cl_abap_corresponding=\u0026gt;mapping_table( FOR ls_mapping IN mt_mapping_crud WHERE ( area = \u0026#39;HEADER_NEGOTIATION\u0026#39; AND id_nivel1 = cv_level1 ) ( level = 0 kind = cl_abap_corresponding=\u0026gt;mapping_component srcname = ls_mapping-field_from dstname = ls_mapping-field_to ) ) )-\u0026gt;execute( EXPORTING source = is_header CHANGING destination = es_header_crud ). Ejemplo 2\r#\r\r\u0026lt;ls_summary_all\u0026gt; = CORRESPONDING #( BASE ( \u0026lt;ls_summary_all\u0026gt; ) \u0026lt;ls_datos\u0026gt; ). Se mueven los campos de \u0026lt;ls_datos\u0026gt; a \u0026lt;ls_summary_all\u0026gt;. Esto por defecto hace que los campos que están en \u0026lt;ls_summary_all\u0026gt; pero no en \u0026lt;ls_datos\u0026gt; se dejan en blanco aunque tengan valores. Para eso hay que usar la cláusula BASE y entre paréntesis la estructura destino para que no limpie los campos que no tiene.\n"});index.add({'id':66,'href':'/docs/sap/abap/bopf/nomenclaturas/','title':"Nomenclaturas",'content':"Objetivo\r#\r\rEs tener las indicaciones de las nomenclaturas que uso cuando creo un BOPF. Ya que de esta manera es fácil identificar los objetos a simple vista.\nYo normalmente cuando hago proyecto suele dar un nombre de tres carácteres que usará como prefijo para cualquier objeto que creo, ya sea, BOPF, ya sea, cualquier otro objeto: clases, transacciones, etc.\nEstructuras y tablas de diccionario\r#\r\rEn la siguiente imagen:\n\rEs un ejemplo de la nomencltura utilizada en un proyecto real. NOTA: A día de hoy hay una ligera variación, cambia el nombre de la estructura persistente\nEl esquema sería el siguiente:\n La estructura para los persistentes sería \u0026ndash;\u0026gt; Z\u0026lt;nombre proyecto\u0026gt;_BO_SP_\u0026lt;libre\u0026gt; La estructura de los datos transitorios \u0026ndash;\u0026gt; Z\u0026lt;nombre proyecto\u0026gt;_BO_ST_\u0026lt;libre\u0026gt; La estructura que combina las dos estructura anteriores \u0026ndash;\u0026gt; Z\u0026lt;nombre proyecto\u0026gt;_BO_SC_\u0026lt;libre\u0026gt; El tipo de tabla para la estructura combinada \u0026ndash;\u0026gt; Z\u0026lt;nombre proyecto\u0026gt;_BO_I_\u0026lt;libre\u0026gt; Tabla de base de datos \u0026ndash;\u0026gt; Z\u0026lt;nombre proyecto\u0026gt;_T_\u0026lt;libre\u0026gt;  Determinaciones\r#\r\rSería: ZCL_\u0026lt;nombre proyecto\u0026gt;_D_\u0026lt;nombre bo\u0026gt;_\u0026lt;nodo\u0026gt;\nEjemplo: ZCL_ATRON_D_FILE_ENG_HEADER\nValidaciones\r#\r\rSería: ZCL_\u0026lt;nombre proyecto\u0026gt;_V_\u0026lt;nombre bo\u0026gt;_\u0026lt;nodo\u0026gt;\nEjemplo: ZCL_ATRON_V_FILE_ENG_HEADER\nAcciones\r#\r\rClase\r#\r\rSería: ZCL_\u0026lt;nombre proyecto\u0026gt;_A_\u0026lt;nombre bo\u0026gt;_\u0026lt;nodo\u0026gt;\nEjemplo: ZCL_ATRON_A_FILE_ENG_HEADER\nEstructura para los parámetros y tipo de datos para la salida de datos\r#\r\rEstructura de parámetros\r#\r\rSería: Z\u0026lt;nombre proyecto\u0026gt;_BO_SA_PARAMS_\u0026lt;nombre accion\u0026gt;\u0026gt;\nEl SA sería \u0026ldquo;Structure Action\u0026rdquo;\nEjemplo: ZATRON_BO_SA_PARAMS_LAUNCH_ETL\nEstructura para la salida de datos\r#\r\rSería: Z\u0026lt;nombre proyecto\u0026gt;_BO_SA_EXPORT_\u0026lt;nombre accion\u0026gt;\u0026gt;\nEjemplo: ZATRON_BO_SA_EXPORT_LAUNCH_ETL\nTipo tabla para la salida de datos\r#\r\rSería: Z\u0026lt;nombre proyecto\u0026gt;_BO_IA_EXPORT_\u0026lt;nombre accion\u0026gt;\u0026gt;\nEjemplo: ZATRON_BO_IA_EXPORT_LAUNCH_ETL\nQuerys\r#\r\rSería: ZCL_\u0026lt;nombre proyecto\u0026gt;_Q_\u0026lt;nombre bo\u0026gt;_\u0026lt;nodo\u0026gt;\nEjemplo: ZCL_ATRON_Q_FILE_ENG_HEADER\n"});index.add({'id':67,'href':'/docs/sap/abap/notas/','title':"Notas de SAP",'content':"Objetivo\r#\r\rRecopilar notas que son interesante para entender el funcionamiento de determinados procesos\nLista\r#\r\r   Nota Descripción     1420281 Note 1420281 - CO-OM tools: SE16N: Deactivating \u0026amp;SAP_EDIT   1083986 Explica las BAPIS para el sistema de clasificacion. Y tiene subnotas que explican como funcionan muchas de ellas.    "});index.add({'id':68,'href':'/docs/python/sentencias/operadores/','title':"Operadores",'content':"Operadores\r#\r\rAritméticos\r#\r\rLos operadores son los habituales:\n Sumar: + Resta: - División: / Multiplicación: * Elevar a la potencia: ** Obtener el resto: %  Ejemplos:\nd = a * b print(\u0026#34;Resultado\u0026#34;, d) d = ( a + b ) / a print(\u0026#34;Resultado:\u0026#34;, d) Resultado:\nResultado 416.15999999999997\rResultado: 3.89\rString\r#\r\rCon los string podemos contaner y incluso hacer que un caracter aparezca n veces.\ne=\u0026#34;,que haces?\u0026#34; print(\u0026#34;Concatenación:\u0026#34;,c+e) print(\u0026#34;El string se va a mostrar 3 veces repetido:\u0026#34;,c*3) Resultado:\nConcatenación: hola mundo,que haces?\rEl string se va a mostrar 3 veces repetido: hola mundohola mundohola mundo\r"});index.add({'id':69,'href':'/docs/sap/abap/programas/','title':"Programas",'content':"Objetivo\r#\r\rRecopilar programas que hagan determinados procesos o contengan ejemplos. Vamos cualquier programa que me parezca interesante.\nPublicaciones\r#\r\r\r\rLista de programas\r\r\rLista de programas\r\r\r"});index.add({'id':70,'href':'/docs/sap/abap/recursos_humanos/','title':"Recursos humanos",'content':"Objetivo\r#\r\rRecopilar información útil sobre la programación en recursos humanos\nPublicaciones\r#\r\r\r\rInformación general\r\r\rInformación general\r\r\r"});index.add({'id':71,'href':'/docs/python/machine_learning/regresion_lineal/','title':"Regresion lineal",'content':"Introducción\r#\r\rTodo sobre regresion lineal\nPara oider usar los algoritmos de regresion líneas en el ambiente de anaconda tiene que estar instalado la librería Scikit learn se puede obtener más información en la página que habla sobre las librerías\nSecciones\r#\r\rLas sección son las siguientes:\n\r\rEntrenar algoritmo de regresion lineal\r\r\rEjemplo de entrenamiento de algoritmo de regresion lineal\r\r\r"});index.add({'id':72,'href':'/docs/sap/abap/sentencias_74/relleno_valores/','title':"Relleno de valores",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias, que son las que más uso, para poder informar tablas internas en base a otras tablas internas.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nLa sentencia estrella de esta página es la FOR. Pero ojo: que si usamos field-symbols/variable no tiene que estar declarada previamente.\nEjemplo 1\r#\r\rSe recorren los datos de MT_TIPPQPS filtrando por dos campos y se rellenando los valores de ET_COND_CRUD con los datos de la estructura leída y de otras variables:\net_cond_crud = VALUE #( FOR ls_tippqps IN mt_tippqps WHERE ( pqtyp = is_header-negotiation_type_code AND keyfield = lv_keyfield ) ( kschl = ls_tippqps-kschl kotab = ls_tippqps-kotab keyvalue = is_header-customer_code datab = is_header-validity_to datbi = is_header-validity_from updkz = zif_rtn_data=\u0026gt;cv_updkz_insert ) ). Nota: Si et_cond_crud tuviera datos se perderían, si se quieren añadir los datos a los existentes hay que añadir la opción BASE:\nUtilización de la opción BASE\r#\r\rBASE es una opción del VALUE que permite que los datos tiene la tabla donde se van a volcar los datos no se pierdan. Pero tiene un funcionamiento distinto si es una estructura o tabla interna.\nSi es una tabla interna funciona de esta manera:\nlt_header_selparams = VALUE #( BASE lt_header_selparams FOR \u0026lt;wa\u0026gt; IN s_soldto ( attribute_name = zif_car_bo_orders_c=\u0026gt;sc_node_attribute-root-soldto sign = \u0026#39;I\u0026#39; option = \u0026#39;EQ\u0026#39; low = \u0026lt;wa\u0026gt;-low ) ). Si es una estructura va de la siguiente manera:\n\u0026lt;ls_datos\u0026gt; = CORRESPONDING #( BASE ( \u0026lt;ls_datos\u0026gt; ) \u0026lt;ls_positions\u0026gt; ). La diferencia radica en que la tabla interna no lleva paréntesis y la estructura si.\nEjemplo 2\r#\r\rAmpliación de la sentencia INSERT de siempre pero con en este caso no es necesario crear estructuras intermediante o usar el insert/append a un field-symbols y luego informar los valores\nINSERT VALUE #( sign = \u0026#39;I\u0026#39; option = \u0026#39;EQ\u0026#39; low = abap_false ) INTO TABLE lt_params_sl. Ejemplo usando CORRESPONDING\r#\r\rHacer un insert + corresponding en una tabla interna.\nINSERT CORRESPONDING #( \u0026lt;ls_orders\u0026gt; ) INTO TABLE lt_positions. "});index.add({'id':73,'href':'/docs/sap/abap/rtts/','title':"RTTS",'content':"ABAP\r#\r\rEl RTTS, Runtime Type Services, es un conjunto de clases que permite la creación de variables, tablas internas de manera dinámica.\nEl RTTS es una herramienta tremendamente útil para crear objetos de manera dinámica de una manera bastante sencilla. La jerarquía de clases es la siguiente:\nCL_ABAP_TYPEDESCR | |--CL_ABAP_DATADESCR | | | |--CL_ABAP_ELEMDESCR | |--CL_ABAP_REFDESCR | |--CL_ABAP_COMPLEXDESCR | | | |--CL_ABAP_STRUCTDESCR | |--CL_ABAP_TABLEDESCR | |--CL_ABAP_OBJECTDESCR | |--CL_ABAP_CLASSDESCR |--CL_ABAP_INTFDESCR Aquí se irán poniendo ejemplos diversos sobre el RTTS.\nPublicaciones\r#\r\r\r\rAPI desde ABAP\r\r\rComo usar la API de los BOPF desde ABAP\r\r\r"});index.add({'id':74,'href':'/docs/sap/abap/sentencias_74/string_templates/','title':"String template",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten procesar los string.\nLos string template son útiles porque simplifican el tratamiento de string o conversiones de campo.\nDe momento voy a poner en enlace a la ayuda de SAP porque tiene muy buenos ejemplo. Los iré poniendo aquí porque a veces cuesta encontrarlos.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\n"});index.add({'id':75,'href':'/docs/sap/abap/bopf/tablas/','title':"Tablas",'content':"Objetivo\r#\r\rRecopilación de tablas interesantes. Aquí solo habrán tablas \u0026ldquo;raras\u0026rdquo; e interesantes que pueden ser útiles en el día a día.\nPublicaciones\r#\r\r\r\rBasic Component\r\r\rBasic Component\r\r\rFinanzas\r\r\rFinanzas\r\r\rVentas\r\r\rVentas\r\r\r"});index.add({'id':76,'href':'/docs/sap/abap/transacciones/','title':"Transacciones",'content':"Objetivo\r#\r\rRecopilación de las transacciones que me parecen interesantes.\nTransacciones\r#\r\rSAP R/3 o ECC\rGenerales    Transacción Descripción     I18N Internacionalizacion. Permite configurar el smartforms para usar word (a partir del EHP4 lo hace este report: RSCPSETEDITOR)   CG3Y Descarga de ficheros del servidor a local   CG3Z Subido de fichero al servidor desde local   SM01 Bloquea transacciones estándar   SLXT Guarda las traducciones hechas en la transacción SE63.    Financieras    Transacción Descripción     GGB0 Transación global para validaciones   GGB1 Transación global para sustituciones   OV51 Documentos modificacion deudores    Monitarización SAP PO    Transacción Descripción     SXMB_MONI Monitor de mensajes XML. Lo que viene de PI con ABAP Proxy    Comunicaciones    Transacción Descripción     SMQ2 Colas qRFC   SCOT Configuración de los canales de comunicación: mail, fax, etc.   SOST Transacción que gestiona la salida de los canales de comunicación configurado: mail, fax, etc.   SOSG Como la SOST pero solo de tu usuario    IDOC    Transacción Descripción     WEDI Menu ambito de IDOCS    Recursos humanos    Transacción Descripción     PU00 Borrar empleado de manera individual (programa RPUDELPN para masivos)   PC_PAYRESULT Ve los resultados de nomina de un empleado    Trace    Transacción Descripción     ST12 Hibrido entre la SAT y ST05 para temas de rendimiento ya sea web, programa, etc..    Para SAP BW    Transacción Descripción     RSO2 Creacion extractores para BW    SAP BW\rGenerales    Transacción Descripción     RSINPUT Permite rellenar registros en un ODS de BW    \r"});index.add({'id':77,'href':'/docs/sap/ui5/','title':"UI5",'content':"Objetivo\r#\r\rUI5 es un framework de desarrolo de aplicaciones web hecho por SAP y que combina las técnologías de HTML5+JavaScript.\nUI5 tiene dos sabores, una manera de llamarlo: SAP UI5 que son el conjunto de librerias propietarias y Open UI5 que es lo mismo pero en versión open source. La diferencia entre ambas son las librerías gráficas que solo están en SAP UI5 y que las principales novedades llegan primero a SAP UI5.\nYo suelo usar Open UI5 porque para mis aprendizajes y por el tipo de librerías que uso me es más que suficiente. En UI5 no trabajo solo he realizado pequeñas cosas para aprender como funciona.\nPublicaciones\r#\r\r\r\rDesarrollo con VS Code\r\r\rDesarrollar aplicaciones con Visual Studio Code\r\r\r"});index.add({'id':78,'href':'/docs/python/sentencias/usar_librerias/','title':"Usar librerias",'content':"Usar librerias\r#\r\rImportar libreria se hace con la sentencia Import pero tiene variantes según sean librerias propias de Python o sencillas, eso creo, o librerias que están dentro de un paquete.\nLibrerías propias o sencillas\r#\r\rEjemplo de como usar la libreria matemática para calcular una raíz cuadrada:\nimport math print(math.sqrt(20)) Resultado\n4.47213595499958\rLibrerías dentro de paquetes\r#\r\rEl siguiente ejemplo se recupera la libreria de regresión de KNN:\n# Regresor de KNN o vecinos cercanos from sklearn.neighbors import KNeighborsRegressor Múltiple librerias de un paquete\r#\r\rEs posible recuperar varías librerías de un solo paquete:\nfrom sklearn.datasets import load_breast_cancer, load_iris Importar libreria asignándole un alias\r#\r\rEs posible importar una librería asignándole un alias, por ejemplo, para darle un nombre más sencillo:\nimport numpy as np "});index.add({'id':79,'href':'/docs/sap/abap/utilidades_generales/','title':"Utilidades generales",'content':"Objetivo\r#\r\rCajón de desastre de cosas que no se muy como clasificar.\nHacks\r#\r\rSaltarse seguridad como desarrollador\r#\r\rPara saltarse la seguridad del usuario desarrollador\n\rURL\r#\r\r http://wiki.sdn.sap.com/wiki/display/Basis/Timezone+changes+best+practices \u0026ndash;\u0026gt; Best practices sobre los husos horarios  Rellenar campos con 0\r#\r\rdata: l_char(50). TRANSLATE l_char USING \u0026#39; 0\u0026#39;. WRITE l_char. Truco para saber que BADIS se utilizan en un proceso\r#\r\rHay que ir a la transacción SE24 informar la clase CL_EXITHANDLER metodo e ir al contenido del método GET_INSTANCE. Hay que poner un break-point en la sentencia CALL METHOD CL_EXITHANDLER=\u0026gt;GET_CLASS_NAME_BY_INTERFACE. Con esto vas viendo cada una de las BADIs que se llaman mientras estas en la transacción, programa, etc.\nPoner sentencia SQL directamente en Produccion\r#\r\rIr al programa RSHOWTIM. Ir al form AUTHORITY_CHECK. Despues que se lance la funcion TR_SYS_PARAMS poner en la variable SYS_CLIINDDEP_LOCK espacio. Si hay cualquier otro problema saltarselo con debugging.\nSaltarse seguridad SE16N\r#\r\rDebido a nota Note 1420281 - CO-OM tools: SE16N: Deactivating \u0026amp;SAP_EDIT. La opción \u0026amp;SAP_EDIT de la SE16N está deshabilitada por SAP a partir de un Support Package determinado. Para poder hacerlo basta con poner un breakpoint en el include LSE16NI01 linea 36: CASE SAVE_OK_CODE. Justo despues del ENDCASE (linea 203) actualizamos las variables gd-edit y gd-sapedit a \u0026lsquo;X\u0026rsquo;.\nEjecutar un programa automáticamente en una orden de transporte\r#\r\rPoner entrada: R3TR XPRA RV80HGEN para que se ejecute un programa, RV80HGEN despues de transporte. El programa en cuestión es el que regenera las rutinas de SD. Este truco es útil para la regeneracion de rutinas de SD.\nUsar comandos de SAPScript en cualquier sitio\r#\r\rDATA ls_header TYPE thead. DATA ls_line TYPE tline. DATA lt_line TYPE TABLE OF tline. ls_header-tdspras = sy-langu. ls_header-tdlinesize = 72. ls_line-tdformat = \u0026#39;/:\u0026#39;. ls_line-tdline = \u0026#39;SET DATE MASK = \u0026#39;\u0026#39;DD/MM/YY\u0026#39;\u0026#39;\u0026#39;. append ls_line to lt_line. ls_line-tdformat = \u0026#39;*\u0026#39;. ls_line-tdline = \u0026#39;\u0026amp;SY-DATUM\u0026amp;\u0026#39;. append ls_line to lt_line. CALL FUNCTION \u0026#39;TEXT_SYMBOL_REPLACE\u0026#39; EXPORTING HEADER = ls_header TABLES LINES = lt_line. READ TABLE lt_line INTO ls_line INDEX 2. WRITE : / ls_line-tdline. Ver un formulario en formato PDF en su previsualización\r#\r\rCuando se esta previsualizando un spool se pone en la barra de comandos PDF! y se ve como si saliese en PDF.\nBúsqueda de fechas\r#\r\rResalto en negrita el título porque esta chuleta me ha ido muy bien para hacer búsqueda en tablas con campos de fecha inicio y fin.\n Registro válido para una fecha v_date: begda \u0026lt;= v_date and endda \u0026gt;= v_date Registro comprendido íntegramente en un periodo f_ini - f_fin: begda \u0026lt;= f_ini and endda \u0026gt;= f_fin Registro válido en algún momento del periodo f_ini - f_fin: begda \u0026lt;= f_fin and endda \u0026gt;= f_ini  Usar simbolos sapscript para reemplazar valores\r#\r\r Con esto se establece el valor (se puede llamar tantas veces como se quiera):  CALL FUNCTION \u0026#39;SET_TEXTSYMBOL\u0026#39; EXPORTING name = \u0026#39;\u0026amp;GV_VIA_PAGO\u0026amp;\u0026#39; value = ld_via_pago. Con esta funcion se hace el reemplazo:  CALL FUNCTION \u0026#39;REPLACE_TEXTSYMBOL\u0026#39; EXPORTING endline = 1 startline = 1 TABLES lines = lt_text. Capturar mensajes de error en funcion\r#\r\rHay que añadir la excepcion ERROR_MESSAGE con un numero inferior a la excepción OTHERS.\n"});index.add({'id':80,'href':'/docs/sap/abap/bopf/tablas/ventas/','title':"Ventas",'content':"Objetivo\r#\r\rTablas de ventas\nLista\r#\r\rGenerales\r#\r\r   Función Descripción     VAPMA Tabla que contiene los datos de VBAK y VBAP pero con muchos menos campos. Y lo más importantes son claves.    "});index.add({'id':81,'href':'/docs/sap/abap/funciones/ventas/','title':"Ventas",'content':"Objetivo\r#\r\rFunciones del módulo de ventas(SD).\nAl final hay una sección de ejemplos para algunas funciones. No todas las funciones tienen ejemplo.\nLista\r#\r\r   Función Descripción     RV_DOCUMENT_FLOW Sacar el flujo de documentos en ventas   SD_OBJECT_TYPE_DETERMINE Se le pasa el tipo de documento de SD y devuelve el objeto workflow asociado.    Ejemplos\r#\r\rRV_DOCUMENT_FLOW\r#\r\rFORM ir_flujo USING pe_datos TYPE LINE OF zzc_sd49501=\u0026gt;ty_t_alv. DATA ls_vbco6 TYPE vbco6. MOVE-CORRESPONDING pe_datos TO ls_vbco6. CALL DIALOG \u0026#39;RV_DOCUMENT_FLOW\u0026#39; EXPORTING vbco6 FROM ls_vbco6 makt-maktx FROM space kna1-kunnr FROM pe_datos-kunnr kna1-name1 FROM pe_datos-txt_kunnr makt-matnr FROM space ivkorg FROM pe_datos-vkorg ivtweg FROM pe_datos-vtweg. ENDFORM. \u0026#34; IR_FLUJO "});index.add({'id':82,'href':'/docs/sap/ventas/','title':"Ventas",'content':"Objetivo\r#\r\rPoner información más funcional sobre el módulo de ventas\nPublicaciones\r#\r\r\r\rInformación general\r\r\rInformación general\r\r\r"});})();