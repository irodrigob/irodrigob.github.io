'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/sap/abap/','title':"ABAP",'content':"ABAP\r#\r\rfila 1\nfila 2\n"});index.add({'id':1,'href':'/docs/github/enlaces_interesantes/','title':"Enlaces interesantes",'content':"Enlaces\r#\r\r \rComandos en Git \u0026ndash;\u0026gt; https://www.hostinger.es/tutoriales/comandos-de-git  "});index.add({'id':2,'href':'/docs/github/generar_rsa_windows/','title':"Generar clave RSA",'content':"Motivo\r#\r\rEl motivo de crear una clave RSA es poder hacer deploy a Github mediante consola y evitar el siguiente error:\n\rDigo consola porque es el único momento que lo he necesitado, ya que usando VS Code o la propia aplicación de Github no lo he necesitado.\nPasos a seguir\r#\r\r Abrir el git Bash. Para eso hay que tener el instalado el Git para windos y al pulsar la tecla win y al escribir git aparecerá la opción:  \rEn el terminal que aparecerá escribir: ssh-key -t rsa -b 4096 -C \u0026ldquo;mail que nos hemos registrado en github\u0026rdquo; y al pulsar enter nos aparecerá esto:  \rPulsaremos Enter\nSe nos pedirá introducir una frase:\n\rLa frase se dejará en blanco para no tener que introducirla en todos los sitios que se haga push.\nAhora hay que añadir la clave generada al ssh-agent. Pero para eso primero hay que valir que este en marcha. Para ello hay que introducir: eval $(ssh-agent –s):  \rY con la siguiente instrucción se añade la clave al agente: ssh-add ~/.ssh/id_rsa nos pedirá la frase introducida en el paso 2 y si es correcta la añadirá.  \rAhora hay que obtener la key para poderla incluirla en nuestra cuenta github, para eso hay que escribir el siguiente comando:c cat ~/.ssh/id_rsa.pub  \rNota: Imagen cortada por seguridad. Todo lo que nos aparezca hay que copiarlo en un notepad para luego asociarlo a nuestra cuenta.\nAsociar clave a nuestra cuenta Github\r#\r\rAhora hay que ir al github y acceder a los Settings de nuestro usuario e ir a la opción SSH and GPG keys:\n\rY pulsar sobre el botón New SSH Key:\n\rEl en título se puede poner lo que sea, ejemplo el ordenador donde has generado la clave, y la clave generada es la rista que hemos obtenido del comando cat ~/.ssh/id_rsa.pub. Una vez introducida nos aparecerá lo siguiente:\n\rBibliografía\r#\r\rPara poder este artículo me he bsado en el siguiente artículo.\n"});index.add({'id':3,'href':'/docs/github/','title':"Github",'content':"Introducción\r#\r\rEn esta sección iré poniendo todo lo que vaya aprendido sobre Github.\nPublicaciones\r#\r\r\r\rEnlaces interesantes\r\r\rEnlaces interesantes sobre Github\r\r\rGenerar clave RSA\r\r\rGenerar clave RSA en Windows\r\r\r"});index.add({'id':4,'href':'/docs/hugo/','title':"Hugo",'content':"Introducción\r#\r\rEn esta sección iré poniendo todo lo que vaya aprendido sobre Hugo. Hugo para quien no lo sepa permite crear páginas web estáticas que se pueden subir a un repositorio de Github.\nPublicaciones\r#\r\r\r\rPublicar Web Github\r\r\rComo publicar una web en Github\r\r\r"});index.add({'id':5,'href':'/docs/hugo/publicar_web_github/','title':"Publicar Web Github",'content':"Motivo\r#\r\rPara aquellos que no quieren gastarse dinero en productos como Wordpress o no necesitan páginas dinámicas, la opción de crear una de manera gratuíta y usando Hugo es una buena elección.\nPersonalmente la clave es escoger un tema que se nos adapte a lo que necesitamos, porque cada tema tiene ciertos comportamientos que no tiene otros. Por ejemplo, inicialmente había escogido el tema npp-hugo, cuando empece a montar la estructura que quería vi que no era tan flexible en la organización por carpetas como me esperaba (al menos es lo que he visto probandolo). Por ello finalmente y después de revisar unos cuantos temas he optado por el tema book que se ajustaba más lo que buscaba.\nPor ello creo que para usar Hugo es básico escoger con calma el tema que se quiera ya que funcionalidad que tiene un tema no existen en otro. Por ejmeplo, hay páginas template, mardownsyntax.md del tema npp-hugo no son compatibles con el tema book que uso. En mi caso me he dado cuenta mientras hacía pruebas con este tema.\nAparte he visto que la documentación oficial parece echa para construir template porque realmente lo que me ha servido para construir la página han sido los ejemplos que vienen incluídos en la carpeta exampleSite que suele vernir en cada tema.\nPasos\r#\r\rPasos previo\r#\r\rAntes de iniciar el proceso se aconseja instalar la clave RSA en local de Github siguiendo los pasos de este artículo\nInstalar Hugo\r#\r\rHugo se puede descargar de la siguiente página web. Una vez instalado es aconsejable poner el directorio donde se ha instalado en el PATH de window para un mejor acceso:\n\rCrear los repositorios en el Github\r#\r\rEl sitio que se va a crear se tiene que sincronizar con dos repositorios que se han de crear previamente. Estos sitios son:\n  será el encargado de tener los ficheros del sitio que estamos construyendo. El que contendrá los ficheros .md .github.io será el encargado guardar las páginas renderizadas por Hugo en base al contenido en el sitio anterior. Es importante poner el nombre del usuario ya que si no, no funcionara. En mi caso el repositorio creado es: irodrigob.github.io  Crer el sitio en local\r#\r\rHay que abrir la consola de Windows e ir al directorio donde vamos crear el sitio web. Una vez en el directorio hay que escribir: hugo new site nombre_sitio:\n\rAñadir el tema\r#\r\rEn la página web de los temas se pueden encontrar multitud de temas para descargar. Para este sitio se ha utilizado el tema book\n NOTA: Tanto los pantallazos como en las explicación sale el tema npp-hugo, esto es debido a que use incialmente dicho tema para crear el sitio.*  Para instalarlo hay que hacerlo desde la consola hay que hacer los siguientes pasos:\n git init, Crea los archivos para poder sincronizar el sitio con Git git submodule add https://github.com/saadnpq/npq-hugo themes/npqq-hugo, Añade como submodulo el tema y lo descargará en el directorio themes/npqq-hugo Editar el fichero config.toml que esta en el directorio raíz del sitio y poner el contenido del mismo fichero, que hay en el directorio themes/npqq-hugo/example-config.toml. Una vez copiado se ajustarán los datos de configuración básicos.  En consola se irá viendo lo siguiente:\n\rCon esto ya se tiene un primer esbozo del sitio, para ver cómo queda en la consola hay que escribir: hugo server -D\nSi abrimos una navegador e introducimos la url: http://localhost:1313/ veremos como queda el sitio.\nSincronizar el sitio local con Gihub\r#\r\rEsta es la parte que mas me ha costado por no estar acostumbrado a trabajar con Git. Esta es la parte es la que he aprendido que hacer que hacerlo en consola, ya que aunque puedes hacer los push con la aplicación de escritorio de Github o con el VS Code(que es el que uso para crear las páginas) he descubierto, seguramente por desconocimiento, que no funciona igual y se jode de tal manera los archivos de Git que he tenido que borrar sitio y repositorios más de una vez. Ahora, todo lo hago con la consola y ya no tengo errores.\nPersonalmente creo que si los submodulos (solo hemos creado el primero de ellos, el del tema) se hubiesen sincronizado con el Github Desktop no hubiese habido problemas. Pero ahora mismo no tengo ganas de más experimentos.\nLos dos sitios del github los hemos creado en el paso anterior, aunque también es posible crearlo justo en este momento, pero así es como lo he hecho yo. Una vez creados hay que seguir los siguientes pasos para sincronizalos en local.\nDesde la consola de Windows y estando en el directorio del sitio hay que ejecutar los siguientes comandos git:\n git remote add origin git@github.com:irodrigob/navi-developer.git Añade el repositorio que guardará las páginas que vamos creando git add . Le decimos que queremos añdir todas las carpetas del sitio en el git git commit -m \u0026quot;Commit inicial del sitio\u0026quot; Guarda los ficheros añadidos en el paso anterior en el git local.  A nivel de consolo iremos viendo algo parecido a esto:\n\rAhora hay que añadir el repositorio donde se guardarán las páginas renderizadas por Hugo:\n git submodule add git@github.com:irodrigob/irodrigob.github.io.git En este sentencia aparecerá la pregunta de la frase de la clave RSA que hemos hecho previamente para poder subir a Github:  \rAunque en la imagen no se vé, hay una pregunta que pide poner: Yes/No/Phrase. Como no se ha puesto frase, para ser más comodo las subidas, hay que poner Yes para confirmar la clave y así no volverá a realizar la misma pregunta.\nUna vez añadido hay que hacer los siguientes pasos:\n git add . git commit -m \u0026quot;Commit inicial\u0026quot; git push –u origin master Este sube los archivos del repositorio local al remoto  A nivel de consola deberá aparecer algo parecido a esto:\n\rHasta ahora solo hemos subido datos del repositorio que hemos creado para el sitio. Ahora hay que cambiar la configuración para que Hugo publique las páginas en nuestro repositorio de github.io\nPublicando en github.io\r#\r\rEl archivo de configuración config.toml hay que realizar los siguientes cambios:\n Al parámetro baseURL se le tiene que poner nuestra dirección del repositorio creado con el nombre github.io Se añade el parámetro publisDir con el nombre de la carpeta que se ha creado al crear el submodulo del repositorio *github.io\u0026rdquo;. Este directorio es donde Hugo rendizara las páginas markdow a HTML  Así es como quedaría(Nota: Ejemplo del fichero que estoy usando con tema que estoy usando actualmente):\nbaseURL = \u0026quot;https://irodrigob.github.io/\u0026quot; languageCode = \u0026quot;es-es\u0026quot; title = \u0026quot;Navi-developer\u0026quot; theme = \u0026quot;hugo-book\u0026quot; publishDir = \u0026quot;irodrigob.github.io\u0026quot; \nAhora de nuevo vía consola, y en el directorio del sitio, con el comando hugo se creará la página Web en el directorio del submodulo github.io\nAhora y antes de hacer el pull para subir los archivos al repositorio *github.io\u0026rdquo; vamos a comprobar que la configuración sea la correcta. Para ello de nuevo desde la consola se escribirá: git remote -v:\n\rSi el resultado es como el de la imagen es que todo es correcto.\nAhora para poder subir los archivos generados a nuestro repositorio github.io hay que ir al directorio de dicho repositorio y lanzar los siguientes comandos en la consola de windows:\ngit add . git commit -m \u0026quot;Primera subida!!\u0026quot; git push origin master\nEn consola aparecerá algo parecido a esto:\n\rY ahora si se accede la siguiente página: http://irodrigob.github.io/ se verá el contenido publicado.\nBibliografía\r#\r\rPara poder este artículo me he bsado en el siguiente artículo.\n"});index.add({'id':6,'href':'/docs/sap/','title':"SAP",'content':"Introducción\r#\r\rEn esta sección será posiblemente la principal de la página ya que es el sistema que llevo desarrollando durante más de 20 años.\nSecciones\r#\r\rLas sección de SAP son las siguientes:\n\r\rABAP\r\r\rLenguaje de desarrollo ABAP\r\r\r"});index.add({'id':7,'href':'/docs/','title':"Docs",'content':""});})();