<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bienvenidos on Navi-developer</title>
    <link>https://irodrigob.github.io/</link>
    <description>Recent content in Bienvenidos on Navi-developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    
	<atom:link href="https://irodrigob.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Atajos</title>
      <link>https://irodrigob.github.io/docs/sap/abap/cds/atajos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/cds/atajos/</guid>
      <description>Objetivo#Disponer de pequeños trozos de código que al no usarse mucho me cuestan saber como utilizarlo y siempre tengo que estar buscandolos.
Parámetros#define view ZATRON_CDS_DOMAIN_TEXTS with parameters p_domain :DOMNAME, Valores por defecto#En este ejemplo se usa para pasar por defecto en un parámetro de entrada. Pero la misma variable variable de entorno se puede usar en un WHERE
@Environment.systemField: #SYSTEM_DATE p_langu :abap.</description>
    </item>
    
    <item>
      <title>Enlaces de interes</title>
      <link>https://irodrigob.github.io/docs/python/enlaces_interes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/enlaces_interes/</guid>
      <description>Introducción#Recopilación de enlaces que me parece interesante.
Aprendizaje# En Youtube tenemos el canal de AMP Tech que tiene video de como programar en Python hasta como hacer cosas con Machine Learning  </description>
    </item>
    
    <item>
      <title>Enlaces interesantes</title>
      <link>https://irodrigob.github.io/docs/github/enlaces_interesantes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/github/enlaces_interesantes/</guid>
      <description>Enlaces# Comandos en Git &amp;ndash;&amp;gt; https://www.hostinger.es/tutoriales/comandos-de-git  </description>
    </item>
    
    <item>
      <title>Entorno de desarrollo</title>
      <link>https://irodrigob.github.io/docs/python/entorno_desarrollo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/entorno_desarrollo/</guid>
      <description>Introducción#Aquí hasta que no tenga más conocimientos voy ir anotando cosas que me sirven para preparar el entorno para desarrollo
Python#El interprete del lenguaje hay que descargarlo de la página oficial.
IDE de desarrollo#Uso el VS Code que tiene una ventaja cuando creas un programa con extensión &amp;ldquo;.py&amp;rdquo; (extensión que indica que es un lenguaje Python) te descarga el plugin para poder ejecutar directamente desde el VSCode.</description>
    </item>
    
    <item>
      <title>Entrada de datos</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/entrada_datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/entrada_datos/</guid>
      <description>Entrada de datos#Para pedir datos existe la sentencia *input&amp;rdquo;, esta sentencia en el VSCODE abre una ventana, como la de los comandos, donde te pide los datos.
Ejemplo:
nombre = input(&amp;#34;¿dime tu nombre?&amp;#34;) print(nombre) Resultado:
ivan</description>
    </item>
    
    <item>
      <title>Extensiones</title>
      <link>https://irodrigob.github.io/docs/python/extensiones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/extensiones/</guid>
      <description>Introducción#Extensiones, sobretodo para VS Code, que son útiles para desarrollar
Python-autopep8#¿Qué és?#Extensión que formatea en bonito y siguiendo best-practices el código que se desarrolla.
Instalación#Se instala directamente desde las extensiones del visual code
Pylint#¿Qué és?#Librería que verifica sintacticamente que el código sea correcto.
Instalación#Se hace con Anaconda Power Shell en el entorno adecuado con lo siguiente:</description>
    </item>
    
    <item>
      <title>Generar clave RSA</title>
      <link>https://irodrigob.github.io/docs/github/generar_rsa_windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/github/generar_rsa_windows/</guid>
      <description>Motivo#El motivo de crear una clave RSA es poder hacer deploy a Github mediante consola y evitar el siguiente error:
Digo consola porque es el único momento que lo he necesitado, ya que usando VS Code o la propia aplicación de Github no lo he necesitado.
Pasos a seguir# Abrir el git Bash. Para eso hay que tener el instalado el Git para windos y al pulsar la tecla win y al escribir git aparecerá la opción:  En el terminal que aparecerá escribir: ssh-key -t rsa -b 4096 -C &amp;ldquo;mail que nos hemos registrado en github&amp;rdquo; y al pulsar enter nos aparecerá esto:  Pulsaremos Enter</description>
    </item>
    
    <item>
      <title>Librerias y paquetes</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/librerias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/librerias/</guid>
      <description>Introducción#Librerias y pawuetes para poder usar el Machine Learning.
Los pasos para instalar las librerías esta explicado en la página de Anaconda.
Tensor Flow#¿Qué és?#Según la Wikipedia: TensorFlow es una biblioteca de código abierto para aprendizaje automático a través de un rango de tareas, y desarrollado por Google para satisfacer sus necesidades de sistemas capaces de construir y entrenar redes neuronales para detectar y descifrar patrones y correlaciones, análogos al aprendizaje y razonamiento usados por los humanos.</description>
    </item>
    
    <item>
      <title>Publicar Web Github</title>
      <link>https://irodrigob.github.io/docs/hugo/publicar_web_github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/hugo/publicar_web_github/</guid>
      <description>Motivo#Para aquellos que no quieren gastarse dinero en productos como Wordpress o no necesitan páginas dinámicas, la opción de crear una de manera gratuíta y usando Hugo es una buena elección.
Personalmente la clave es escoger un tema que se nos adapte a lo que necesitamos, porque cada tema tiene ciertos comportamientos que no tiene otros. Por ejemplo, inicialmente había escogido el tema npp-hugo, cuando empece a montar la estructura que quería vi que no era tan flexible en la organización por carpetas como me esperaba (al menos es lo que he visto probandolo).</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/variables/</guid>
      <description>Variables#Existen tres tipos de variables, al menos por lo que he visto que son: string, enteras y flotantes.
# Esta es integer a=23 # Esta es float b=23.456 # Esta es string c=&amp;#34;hola mundo&amp;#34; Para saber el tipo de variable en cualquier momento se puede usar la siguiente sentencia:
type(c) Convertir variables#Si queremos convertir el formato de una variable a otra. Como hay tres tipos de &amp;ldquo;tipos&amp;rdquo;, hay tres funciones que lo hace: INT, FLOAT, STR</description>
    </item>
    
    <item>
      <title>Acciones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/acciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/acciones/</guid>
      <description>Objetivo#Las acciones se usan para llamar a procesos externos del BOPF. Por ejemplo yo los uso para crear un pedido, lanzar otro programa, etc..
Yo suelo usar una clase general para agrupar acciones de un mismo nodo. En algunos artículos y el propio BOPF aconseja hacer una clase por acción. Pero lo veo una manera de generar clases que a lo mejor solo tiene cuatro líneas de código.</description>
    </item>
    
    <item>
      <title>ALV</title>
      <link>https://irodrigob.github.io/docs/sap/abap/alv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/alv/</guid>
      <description>Objetivo#Cajón de desastre de cosas interesante de los ALV. No descarto que alguna cosa este duplicada en alguna otra sección como clases o funciones.
Proyectos personales#En el siguiente enlace hay una clase que permite simplificar la creación de ALV. Esta clase encapsula las clases de los SALV.
Mostrar un ALV como si fuera una dynpro pero sin dynpro# CL_GUI_CONTAINER=&amp;gt;SCREEN0 &amp;ndash;&amp;gt; Permite sacar un ALV como si fuera dynpro si tener una o configurar container.</description>
    </item>
    
    <item>
      <title>Anaconda</title>
      <link>https://irodrigob.github.io/docs/python/anaconda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/anaconda/</guid>
      <description>Introducción#Tal como se ha explicado en la página de entorno de desarrollo, Anaconda permite la instalación de paquetes para usar el machine learning en Python o cualquier otro paquete para proyectos en Pytjon..
Entornos#Los entornos, creo que hasta tres entornos se pueden usar, permiten tener instalaciones separadas de paquetes según lo que se quiera hacer.
Para hacer pruebas me he creado un ambiente llamado test que lo he creado con el Anaconda navigator yendo a la pestaña de Enviroments:</description>
    </item>
    
    <item>
      <title>API desde ABAP</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/api_abap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/api_abap/</guid>
      <description>Objetivo#La API de acceso al ABAP es siempre la misma por eso voy a poner los ejemplos de cada tipo de operación que se quiera hacer.
Yo para estos casos me suelo crear un helper para simplificar las llamadas entre las clases del proceso y del BOPF.
Instanciar variables para acceder al BOPF#Lo primero que se suele hacer es instanciar las variables necesarias para operar con los BOPF.</description>
    </item>
    
    <item>
      <title>Autentificación por sesión</title>
      <link>https://irodrigob.github.io/docs/python/framework/django/autentificacion_session/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/framework/django/autentificacion_session/</guid>
      <description>Introducción#A través de Django se puede autentificar a los servicios de varias maneras. No es el objetivo de explicarlos aquí, pero el que he configurado es el de Session. E
Este tipo de autentificación hay un primer servicio que se le pasa el usuario y password y si es valido te genera una cookie de sesión que en los servicios siguientes no sea necesario pasar las credencilas. Se puede indicar el tiempo de expiración de la sessión para que de manera automática haga el logout.</description>
    </item>
    
    <item>
      <title>Basic Component</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/tablas/basic_component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/tablas/basic_component/</guid>
      <description>Objetivo#Generalmente las tablas que generales a todo SAP son las interesantes ya que permiten cosas que de otra manera no se podría saber: ya sea porque no se conoce la transacción o falta de permisos para acceder a determinadas transacciones.
Lista#Generales#   Función Descripción     SXC_CLASS Contiene que clase esta utilizando una implementacion de BADI   DWINACTIV Objetos desactivados   SSM_CUST Variables del session manager (ejemplo imagen en pantalla de inicio)   SSM_USR Tabla para controlar a que menus tiene acceso el usuario en el session manager   USERS_SSM Lo mismo que la de antes pero valida en la ECC6.</description>
    </item>
    
    <item>
      <title>Basic Component</title>
      <link>https://irodrigob.github.io/docs/sap/abap/funciones/basic_component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/funciones/basic_component/</guid>
      <description>Objetivo#Funciones del módulo basic component, es decir, funciones que son generales a todo SAP.
Al final hay una sección de ejemplos para algunas funciones. No todas las funciones tienen ejemplo.
Lista#Generales#   Función Descripción     SXO_IMPL_DELETE Borra la implementación de una BADI   SCP_REPLACE_STRANGE_CHARS Quita acentos, ç, ¨, etc… de una char   SELECTION_TEXTS_MODIFY_DTEL Permite cambiar el texto de un campo de selección.</description>
    </item>
    
    <item>
      <title>Basic component</title>
      <link>https://irodrigob.github.io/docs/sap/abap/clases/basic_component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/clases/basic_component/</guid>
      <description>Lista#   Clase Descripción     CALL METHOD cl_gui_cfw=&amp;gt;set_new_ok_code( ‘YOUR_OK_CODE’ ). Permite simular que se pulsa un código de función.   CL_BCS_CONVERT Convierte de txt a raw, a solix, viceversa, etc…   CL_ABAP_EXCEPTIONAL_VALUES Con el método get_max_value devuelve el valor máximo de una variable. Si es numc03 da 999.   CL_SYSTEM_TRANSACTION_STATE Para saber si esta en un proceso commit, o saber el numero de LUW, etc.</description>
    </item>
    
    <item>
      <title>Bucles</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/bucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/bucles/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten procesar tablas internas. Este artículo esta muy relacionado con el del relleno de valores ya que se usán las mismas sentencias para procesar tablas internas. Aún asi, lo separo en dos artículos según la finalidad en que se use.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.</description>
    </item>
    
    <item>
      <title>Cadenas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/cadenas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/cadenas/</guid>
      <description>Cadenas#Las cadenas son secuencias de carácteres. Es decir, una variable de tipo de string puedes acceder a una posición concreta. Es como acceder a una posición de un array o lista. Ejemplo:
texto = &amp;#34;hola&amp;#34; print(&amp;#34;Segunda letra del texto es:&amp;#34;, texto[1]) Resultado:
Segunda letra del texto es: oOJO: Que aquí los arrays también empiezan por 0.
Con la sentencia LEN se puede saber el tamaño de la cadena.</description>
    </item>
    
    <item>
      <title>Captura de excepciones</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/captura_excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/captura_excepciones/</guid>
      <description>Captura excepciones#Para captura excepciones y que no salgan error raros al hacer operaciones tenemos la sentencia TRY..EXCEPT
En el siguiente ejemplo extráido de un manual hay una formula para pasar de grados Farenheit a Celsius:
ent = input(&amp;#39;Introduzca la Temperatura Fahrenheit:&amp;#39;) try: fahr = float(ent) cel = (fahr - 32.0) * 5.0 / 9.0 print(&amp;#34;Grados celsius&amp;#34;:cel) except: print(&amp;#39;Por favor, introduzca un número&amp;#39;) NOTA: Aquí también tiene que haber una identación en el código dentro del TRY y del EXCEPT</description>
    </item>
    
    <item>
      <title>Clases de desarrollo</title>
      <link>https://irodrigob.github.io/docs/sap/abap/clases_desarrollo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/clases_desarrollo/</guid>
      <description>Objetivo#Recopilar clases de desarrollo que son interesante para tener ejemplos
Lista#   Clase desarrollo Descripción     SST_DEMO Ejemplos de hojas de transformación simple   SABAPDEMOS Ejemplos de todo tipo sobre ABAP. Desde rendimiento, CDS, push, etc..    </description>
    </item>
    
    <item>
      <title>Como funcionan las redes neuronales</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/como_funcionan_redes_neuronales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/como_funcionan_redes_neuronales/</guid>
      <description>Introducción#Ejemplo extraído de ¿Como funcionan las redes neuronales?. Se pondrán imagens obtenidas del video para explicar mejor el funcionamiento tal como lo hace en el video.
Explicación#Como se explica en el índice de la página las redes neuronales se basan en la neuronas del cerebro humano. Una neurona esta interconectada con otras neuronas y responde cuando recibe un estimulo eléctrico. Cuando lo recibe decide si tiene que activarse o no.</description>
    </item>
    
    <item>
      <title>Como utilizar React como frontend</title>
      <link>https://irodrigob.github.io/docs/python/framework/django/usar_react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/framework/django/usar_react/</guid>
      <description>Introducción#Lo primero es tener nwb instalado en la maquina.
Según he léido en articulos hay como tres posiblidad de hacerlo:
 Tener la aplicación React y django por separado pero habría que usar JWT para poderse comunicar. Aunque yo no tengo tan claro si uno tiene el montaje de sesión como hice en este artículo. Ya que el primer servicio que lanzas en React es para generar el token de sesión y luego lo vas usando para las distintas llamadas.</description>
    </item>
    
    <item>
      <title>Condiciones</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/condiciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/condiciones/</guid>
      <description>Condiciones#Las condiciones son como en la mayoria de lenguajes
 x == y &amp;ndash;&amp;gt; x es igual a y x != y &amp;ndash;&amp;gt; x es distinto de y x &amp;gt; y &amp;ndash;&amp;gt; x es mayor que y x &amp;lt; y &amp;ndash;&amp;gt; x es menor que y x &amp;gt;= y &amp;ndash;&amp;gt; x es mayor o igual que y x &amp;lt;= y &amp;ndash;&amp;gt; x es menor o igual que y x is y &amp;ndash;&amp;gt; x es lo mismo que y x is not y &amp;ndash;&amp;gt; x no es lo mismo que y Operadores lógicos son: and(y), or(o) y not(no) IN Devuelve si un cadena esta dentro de otra.</description>
    </item>
    
    <item>
      <title>Condiciones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/condiciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/condiciones/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten hacer condiciones.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#Permite que una variable se inicialice segun una condicion determinada:
DATA(lv_updkz) = COND #( WHEN is_header-negotiation_code IS INITIAL THEN zif_rtn_data=&amp;gt;cv_updkz_insert WHEN is_header-has_changed = abap_true THEN zif_rtn_data=&amp;gt;cv_updkz_edit ). Ejemplo 2#Uso de SWITCH haciendo una conversion de variable;</description>
    </item>
    
    <item>
      <title>Configuración Pylint</title>
      <link>https://irodrigob.github.io/docs/python/configuracion_pylint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/configuracion_pylint/</guid>
      <description>Introducción#Pylint es una librería que se usa para verificiar que el código de Python que estamos escribiendo, para el entorno que tengamos activado, sea correcto.
Pero hay veces que hay que tocar la configuración de Pylint para afinarlo.
Evitar errores de librerías que no existen#Hay casos que Pylint dice que una librería no existe pero realmente si que existe. En mi caso me ha ocurrido al usar librerías creadas en el raíz del proyecto de VS Code, dentro de un proyecto de Django.</description>
    </item>
    
    <item>
      <title>Configuración URLs aplicación</title>
      <link>https://irodrigob.github.io/docs/python/framework/django/configuracion_url_aplicacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/framework/django/configuracion_url_aplicacion/</guid>
      <description>Introducción#Cada aplicación dentro de un proyecto en Django tiene su propio archivo de URLs, urls.py donde se van incluyendo las vistas que se van añadiendo. Aquí explicaremos como configurar dicho archivo tanto a nivel de proyecto como de aplicación.
Hay que saber que el punto de acceso de los servicios será el archivo urls.py a nivel de proyecto. Por ello yo lo que hago es:
 Uso el fichero urls.</description>
    </item>
    
    <item>
      <title>Constantes internas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/constantes_internas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/constantes_internas/</guid>
      <description>Iteracciones#Las constantes internas, son eso, constantes propias de Python que tienen un valor fijo y que pueden servir para inicializar valores.
 None &amp;ndash;&amp;gt; Sirve para indicar que una variable esta vacia.  </description>
    </item>
    
    <item>
      <title>Conversiones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/conversiones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/conversiones/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten convertir valores de un campos a otro.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#Lo que antes se hacia:
DATA lo_elemdesc type ref to cl_abap_elemdescr. Lo_elemdesc ?= cl_abap_typedescr=&amp;gt;describe_by_data( iv_abap_value. Ahora se puede hacer en una sola línea: DATA(lo_elemdesc) = CAST cl_abap_elemdescr( cl_abap_typedescr=&amp;gt;describe_by_data( iv_abap_value ) ).</description>
    </item>
    
    <item>
      <title>Creación pedido de ventas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bapis/ventas/crear_pedido_ventas_basico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bapis/ventas/crear_pedido_ventas_basico/</guid>
      <description>Ejemplo#Este es un ejemplo muy básico de creación de un pedidos ventas.
&amp;#34; Tipos de datos TYPES: tt_bapi_item TYPE STANDARD TABLE OF bapisditm WITH EMPTY KEY. TYPES: tt_bapi_itemx TYPE STANDARD TABLE OF bapisditmx WITH EMPTY KEY. TYPES: tt_bapi_partners TYPE STANDARD TABLE OF bapiparnr WITH EMPTY KEY. TYPES: tt_bapi_schedules TYPE STANDARD TABLE OF bapischdl WITH EMPTY KEY. TYPES: tt_bapi_schedulesx TYPE STANDARD TABLE OF bapischdlx WITH EMPTY KEY. DATA lv_ebeln TYPE vbak-vbeln.</description>
    </item>
    
    <item>
      <title>Crear paquetes y librerías</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/crear_paquetes_librerias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/crear_paquetes_librerias/</guid>
      <description>Introducción#En la siguiente pagina se explica como usar librerías o paquetes. Aquí se explica como crearnos nuestras propías librerías y/o paquetes para utilizarlos.
Para ello voy a usar un ejemplo de una aplicación que estoy montando. No se si será el mejor ejemplo pero leyendo de varios sitios creo que es una buena estructura.
Ejemplo#La aplicación, que esta en una fase embrionaria, he creado una paquete cuya carpeta principal es lib donde estarán todas las librerias que se usarán en la aplicación.</description>
    </item>
    
    <item>
      <title>Código ejemplo dentro del BOPF</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/plantillas_codigo_interno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/plantillas_codigo_interno/</guid>
      <description>Objetivo#Aquí están las plantillas de ejemplo ABAP que se usarán dentro de las clases que se usarán en validaciones, determinaciones, etc..
Instanciar clase de mensajes#Los mensajes de los BOPF se recogen en una clase generica que pueda ser usada en las determinaciones, validaciones, etc..
IF eo_message IS NOT BOUND. &amp;#34; Se instancia la clase de mensajes en caso de no estarlo eo_message = /bobf/cl_frw_factory=&amp;gt;get_message( ).</description>
    </item>
    
    <item>
      <title>Desarrollo con VS Code</title>
      <link>https://irodrigob.github.io/docs/sap/ui5/desarrollar_vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/ui5/desarrollar_vscode/</guid>
      <description>Objetivo#Para desarrollar en UI5 he probado tres editores: WebStorm, Sublime y Visual Studio Code.
WebStorm lo use hace años y me fue tan bien que pague por la licencia. El tema de reconocer configurar, eso hace años, las librerias era con una extensión pero no esta la última versión.
Sublime lo empece a usar hace poco para mi último proyecto y fue el único que era capaz de navegar entre las distintas funcionaes de javascript que iba creando.</description>
    </item>
    
    <item>
      <title>Determinaciones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/determinaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/determinaciones/</guid>
      <description>Objetivo#Las determinaciones se usan para rellenar atributos transitorios, son aquellos campos que se definen en la estructura transitoria. Yo los uso para completar descripciones y hacer cálculos.
Yo suelo usar una clase general para agrupar determinaciones de un mismo nodo. En algunos artículos y el propio BOPF aconseja hacer una clase por determinación. Pero lo veo una manera de generar clases que a lo mejor solo tiene cuatro líneas de código.</description>
    </item>
    
    <item>
      <title>Diccionario</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/diccionario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/diccionario/</guid>
      <description>Introducción#Son como las listas o tuplas pero al acceso a sus valores no se accede por un índice, sino que se accede por la clave asociada al valor.
Por lo que he visto hay diccionarios simples que es una relación clave&amp;lt;-&amp;gt;valor y otros más complejos. De momento explicaré los simples para tener una base
Simples#Crear un diccionario es muy simple tan sólo hay que usar la siguiente sentencia:</description>
    </item>
    
    <item>
      <title>Ejemplo básico</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/arbol_decisiones/ejemplo_basico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/arbol_decisiones/ejemplo_basico/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 3. Árboles de Decisiones
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas
Código#Código fuente descargable
Carga de librerías
# Clasificador de arbol de decisiones from sklearn.tree import DecisionTreeClassifier # Dos set de datos uno de cancer y otro de iris from sklearn.datasets import load_breast_cancer, load_iris # Librería para separar datos de entrenamiento y testing from sklearn.</description>
    </item>
    
    <item>
      <title>Ejemplo clasificador de imagenes</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/clasificador_imagenes_ejemplo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/clasificador_imagenes_ejemplo/</guid>
      <description>Introducción#Ejemplo extraído de los videos (pt. 1/2) Cómo hacer un clasificador de imagenes desde cero con Tensorflow y (pt. 2/2) Cómo hacer un clasificador de imagenes desde cero con Tensorflow
Y el modelo de datos de entrenamiento se puede en el repositorio del ejemplo de Alex Puig
El ejemplo consta de dos archivos: el primero sirve para entrenar el algoritmo y el segundo para la predicción. Ambos ejemplos son ejemplo en código fuente de Python</description>
    </item>
    
    <item>
      <title>Ejemplo de conversión de palabras a números</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/vectorizacion/conversion_palabra_a_numeros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/vectorizacion/conversion_palabra_a_numeros/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 7. Vectorización.
Partimos de las siguiente dos frases:
 Vectorizar el texto es necesario en machine learning Machine learning es una gran herramienta  El primer pasar es tokenizar. Tokenizar es dividir el texto en tokens o palabras.
Los token los obtendremos de las palabras no repetidas que son:
 Vectorizar el texto es necesario en machine learning una gran herramienta  Nota: Se cuenta como misma palabra &amp;ldquo;Machine&amp;rdquo; que &amp;ldquo;machine&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Ejemplo de redes neuronales</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/ejemplo_sklearn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/ejemplo_sklearn/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 6. Redes neuronales.
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas.
En este ejemplo se usa la librería Scikit learn(Sklearn) que según el video no es lo mejor para ello. Hay que mejores como TenserFlow pero requiere de más conocimientos de algebra lineal.
Código#Código fuente descargable
Librerias del proceso</description>
    </item>
    
    <item>
      <title>Ejemplo KMeans</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/algoritmo_aprendizaje_no_supervisado/ejemplo_kmeans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/algoritmo_aprendizaje_no_supervisado/ejemplo_kmeans/</guid>
      <description>Introducción#Ejemplo extraído de Machine Learning episodio 8. KMeans.
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas.
Como ejemplo para ver el funcionamiento de Kmeans se va utilizar el set de datos de iris. Pero en este caso solo se le va a pasar las características pero no las etiquetas para que clasifique en tres grupos los datos. Luego se le pasarán las etiquetas para ver como ha aprendido el algoritmo, pero no se pasarán las etiquetas para su aprendizaje.</description>
    </item>
    
    <item>
      <title>Ejemplo transfer learning</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/ejemplo_transfer_learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/ejemplo_transfer_learning/</guid>
      <description>Introducción#Ejemplo extraído del video Importar modelo para clasificar imágenes.
Y el modelo de datos de entrenamiento se puede descargar en el repositorio del ejemplo de Alex Puig.
El transfer learning o transferencia de aprendizaje es una técnica en la cual incorporamos un modelo ya pre-entrenado para utilizarlo para que clasifique lo que nosotros queramos.
Estos modelos son más complejos a nivel de configuración de redes convolucionales como el número de datos usados para entrenarlos.</description>
    </item>
    
    <item>
      <title>Entrenar algoritmo de regresion lineal</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/regresion_lineal/entrenar_algoritmo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/regresion_lineal/entrenar_algoritmo/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 2. Algoritmos de regresión
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas
Código#Código fuente descargable
Se cargan las librerias
# Regresor de KNN o vecinos cercanos from sklearn.neighbors import KNeighborsRegressor # Set de datos de boston from sklearn.datasets import load_boston # Divide los datos entre entrenamiento y testing from sklearn.</description>
    </item>
    
    <item>
      <title>Equivalencia métodos HTTP y DRF</title>
      <link>https://irodrigob.github.io/docs/python/framework/django/equivalencia_metodos_http_drf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/framework/django/equivalencia_metodos_http_drf/</guid>
      <description>Equivalencia en vistas de tipo ViewSet#En las vistas de tipo ViewSet si queremos sobrecargar algun tipo de llamada HTTP hay que saber que método sobrecargar. La equivalencia es la siguiente:
   HTTP Método ViewSet     GET Si queremos una lista de datos el método es list. Si es un valor concreto el método es retrieve   POST create   PUT update   PATCH partial_update   DELETE destroy    </description>
    </item>
    
    <item>
      <title>Estructuras</title>
      <link>https://irodrigob.github.io/docs/sap/abap/rtts/estructuras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/rtts/estructuras/</guid>
      <description>Introducción#Que se puede hacer con estructuras ya sean del diccionario como tipos de datos estructurados creados dentro del código.
Ejemplo#Manera simple de saber los campos de una estructura. Dentro de los campos de la tabla devuelta esta el campo con el tipo de datos del campo. De él se puede obtener la info técnica de dicho campos.
DATA(lt_components) = CAST cl_abap_structdescr( cl_abap_typedescr=&amp;gt;describe_by_data( cs_row_data ) )-&amp;gt;get_components( ).</description>
    </item>
    
    <item>
      <title>Explicación sobreajuste</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/arbol_decisiones/explicacion_sobreajuste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/arbol_decisiones/explicacion_sobreajuste/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 4. Sobreajuste. Este artículo es un añadido a lo que se comenta brevemente en el artículo de ejemplo sobre arbol de decisiones
En el video indicado se explica perfectamente lo que és, aún así, intento explicarlo a mi manera que es un sobreajuste o overfilling, en ingles. Se usarán pantallazos del video para explicar algunos puntos.
El sobreajuste se produce cuando se entrena el algoritmo ya que intenta generar una formula o ecuación que permite clasificar los datos.</description>
    </item>
    
    <item>
      <title>Fecha / Hora</title>
      <link>https://irodrigob.github.io/docs/sap/abap/funciones/fecha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/funciones/fecha/</guid>
      <description>Objetivo#Debido a que hay multitud de funciones para fechas y horas que uso, las pongo en un apartado aparte en vez de ponerlas en la de Basic Component.
Lista#   Función Descripción     GET_WEEK_INFO_BASED_ON_DATE Te devuelve la semana y el día que es lunes y domingo.   DATE_GET_WEEK Solo devuelve la semana. Ojo que la semana viene al principio con el año.</description>
    </item>
    
    <item>
      <title>Ficheros</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/ficheros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/ficheros/</guid>
      <description>Ficheros#Leer un fichero#Se puede hacer de dos manera con la sentencia WITH y sin ella.
Ejemplo modo sin WITH
file = open(&amp;#34;welcome.txt&amp;#34;) data = file.read() print data file.close() # Importante hay que cerrar el fichero para evitar bloqueos Con la opción WITH
with open(&amp;#34;hola.txt&amp;#34;) as file: data = file.read() Con WITH parece ser que el control de excepciones es mejor y tareas simples como la preparación del fichero y su cierre se hace de manera automática.</description>
    </item>
    
    <item>
      <title>Filtros</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/filtros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/filtros/</guid>
      <description>Introducción#En este grupo se irán poniendo distintos ejemplos de la sentencia FILTER que es un sentencia que no he usado mucho.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#&amp;lt;ls_values_search_sap&amp;gt;-kotab_data = FILTER #( lt_values IN FILTER #( lt_konp USING KEY loevm WHERE loevm_ko = &amp;#39;&amp;#39; ) WHERE knumh = knumh ). Lo bueno del filter es que te crea una tabla o te mueve directamente el contenido de la tabla con el filtro aplicado.</description>
    </item>
    
    <item>
      <title>Finanzas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/tablas/finanzas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/tablas/finanzas/</guid>
      <description>Objetivo#Tablas que permiten descubrir determinadas configuraciones de dicho módulo.
Lista#Generales#   Función Descripción     GB01 Tabla que contiene los campos que se pueden sustituir en la OBBH   T045DTA Partidas que se graban en la FBWE. Si se borran permite reprocesarlas.    </description>
    </item>
    
    <item>
      <title>Finanzas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/funciones/finanzas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/funciones/finanzas/</guid>
      <description>Objetivo#Funciones del módulo de finanzas
Lista#   Función Descripción     FI_FIND_PAYMENT_CONDITIONS Obtiene la fecha de vencimiento en base a la fecha base y condicion de pago   GET_CURRENT_YEAR Se le pasa sociedad y fecha de documento y devuelve el ejercicio fiscal   BAPI_COMPANYCODE_GET_PERIOD Devuelve el periodo y ejercicio contable a partir de una fecha y sociedad. Esta funcion puede ser llamada en remota.</description>
    </item>
    
    <item>
      <title>Funciones internas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/funciones_internas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/funciones_internas/</guid>
      <description>Funciones internas#Aquí una lista de funciones internas
 MAX y MIN &amp;ndash;&amp;gt; Devuelve el valor máximo y mínimo de una lista. Si es un string nos devolvería la letra más alta y la mínima. Ejemplo:  print(&amp;#34;Letra máxima: &amp;#34;,max(&amp;#34;hola mundo&amp;#34;)) print(&amp;#34;Letra mínima: &amp;#34;,min(&amp;#34;hola mundo&amp;#34;)) Resultado:
Letra máxima: uLetra mínima:  LEN &amp;ndash;&amp;gt; Devuelve el numéro de elementos de una lista. Si es un string devuelve el número de caracteres.</description>
    </item>
    
    <item>
      <title>Guardar modelos entrenados</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/guardar_modelos_entrenados/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/guardar_modelos_entrenados/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 9. Cómo guardar un modelo entrenado.
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas.
En esta página veremos como se guardan los modelos entrenados para no tener que hacer entrenamientos cada vez que queremos hacer algo. En los ejemplos entrenar algoritmos se hace en segundos, pero en casos reales este entrenamiento puede durar dias o semnanas.</description>
    </item>
    
    <item>
      <title>Incluir librerías propias</title>
      <link>https://irodrigob.github.io/docs/python/framework/django/incluir_librerias_propias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/framework/django/incluir_librerias_propias/</guid>
      <description>Introducción#Django arranca su propio middleware, o servidor, donde solo se puede trabajar con los archivos del proyecto y aplicaciones generadas. Pero no podemos usar librerías propias que tengamos la misma carpeta del proyecto, o en una carpeta dentro del proyecto de Django. El motivo es que no se incluyen dentro de las variables entorno y por lo tanto no las reconoce.
La forma de solucionar son dos dependiendo de donde tengamos la carpeta con nuestra libreria.</description>
    </item>
    
    <item>
      <title>Información general</title>
      <link>https://irodrigob.github.io/docs/sap/abap/archivelink/informacion_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/archivelink/informacion_general/</guid>
      <description>Objetivo#Esta página tendrá información general sobre el archivelink, GOS o BDS que son maneras de distintas de archivar documentos en SAP.
Menú ámbito#El menú SOA_COPY contiene todas las transacciones para crear, gestionar y monitorizar el archivelink
Programas#   Programa Descripción     RSAOT1 Ejemplo de cómo subir y leer documento en archivelink    Tablas#   Tabla Descripción     SGOSATTR Tabla para parametrizar las opciones del menu de archivelink en transacciones    Funciones#   Función Descripción     BDS_GOS_CONNECTIONS_GET Obtiene los adjuntos de un objeto del GOS.</description>
    </item>
    
    <item>
      <title>Información general</title>
      <link>https://irodrigob.github.io/docs/sap/abap/idoc/informacion_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/idoc/informacion_general/</guid>
      <description>Objetivo#Esta página tendrá un listado de información general sobre los IDOC&amp;rsquo;s: transacciones, programas, etc..
Menú ámbito#El menú WEDI contiene todas las transacciones para crear, gestionar y monitorizar IDOCs
Transacciones#   Transacción Descripción     WE19 Clonar IDOC para poderlo procesar   BD87 Analizar IDOC&amp;rsquo;s    Programas#   Programa Descripción     RC1_IDOC_SET_STATUS Permite cambiar el status de un idoc a otro    Tablas#   Tabla Descripción     TBDBE Tabla donde esta la configuración de la función que se lanzará a través de la función BAPI_IDOC_INPUT1    </description>
    </item>
    
    <item>
      <title>Información general</title>
      <link>https://irodrigob.github.io/docs/sap/abap/recursos_humanos/informacion_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/recursos_humanos/informacion_general/</guid>
      <description>Objetivo#Esta página tendrá un listado de información general sobre el módulo de recursos humanos
Funciones#   Función Descripción     HR_READ_INFOTYPE_AUTHC_DISABLE Hace que en la funcion HR_READ_INFOTYPE no haga control de autorizacion. Se ha de poner por cada función de lectura de infotipo   HR_CHECK_AUTHORITY_INFTY Permite saber si se tiene autorizacion para leer/escribir un infotipo    Ejemplos#HR_CHECK_AUTHORITY_INFTY#CALL FUNCTION &amp;#39;HR_CHECK_AUTHORITY_INFTY&amp;#39; EXPORTING pernr = pernr-pernr infty = &amp;#39;0008&amp;#39; subty = &amp;#39;0 &amp;#39; begda = p0001-begda endda = p0001-endda level = &amp;#39;R&amp;#39; uname = sy-uname EXCEPTIONS no_authorization = 1 internal_error = 2 OTHERS = 3.</description>
    </item>
    
    <item>
      <title>Información general</title>
      <link>https://irodrigob.github.io/docs/sap/BW/informacion_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/BW/informacion_general/</guid>
      <description>Objetivo#Esta página contendrá información de general sobre BW que no se muy bien donde clasificar.
Como probar un cubo en R/3#Normalmente los cubos se suelen utilizar desde herramientas de SAP que están fuera del SAP GUI. Pero puede ser interesante, poder probar el cubo para ver que datos tienes y que se puede hacer con él. El siguiente ejemplo de como hacerlo se basa en cubo generado con un CDS desde un sistema S/4 HANA.</description>
    </item>
    
    <item>
      <title>Información general</title>
      <link>https://irodrigob.github.io/docs/sap/gateway/informacion_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/gateway/informacion_general/</guid>
      <description>Objetivo#Esta página tendrá un listado de información general de Gateway
Transacciones#   Transacción Descripción     SMGW Transaccion para ver el monitor   SEGW Transacción para los servicios de Gateway   /IWFND/CACHE_CLEANUP Transaccion para borrar el cache del modelo   /IWFND/ERROR_LOG Transaccion para ver los logs   /IWFND/MAINT_SERVICE Activar y mantener servicios    Como debugear error XML Parse#Los errores de gateway muchas nos hay por donde cogerlos.</description>
    </item>
    
    <item>
      <title>Información general</title>
      <link>https://irodrigob.github.io/docs/sap/ventas/informacion_general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/ventas/informacion_general/</guid>
      <description>Objetivo#Esta página tendrá información a nivel general
Flujo#Una imagen que sintetiza muy bien el flujo de ventas:
</description>
    </item>
    
    <item>
      <title>Iteracciones</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/iteracciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/iteracciones/</guid>
      <description>Iteracciones#Iteracciones condicionales#Llamo iteracciones condicionales aquellas sentencias que no recorren listas sino simplemente repetin un bloque de sentencias hasta que se cumple una condición. La sentencia WHILE sería un ejemplo de ello:
n = 5 print(&amp;#34;Contador&amp;#34;) while n &amp;gt;= 0: print(n) n = n - 1 Resultado:
Contador543210Con la sentencia BREAK se puede salir de un bucle. Ejemplo:</description>
    </item>
    
    <item>
      <title>Lectura tablas del diccionario</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/lectura_tablas_diccionario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/lectura_tablas_diccionario/</guid>
      <description>Introducción#Realmente no tenemos sentencias específica sino que es ampliación del Open SQL para dotarle de más flexibilidad a la hora de leer información
Ejemplo 1#Con este select extendido se busca una parte de los campos de una tabla, pero el resto de campo se completan segun variables rellenadas previamente.
SELECT kschl, kotab, @is_header-customer_code AS keyvalue, @is_header-validity_to AS datab, @is_header-validity_from AS datbi, @zif_rtn_data=&amp;gt;cv_updkz_insert AS updkz INTO CORRESPONDING FIELDS OF TABLE @et_cond_crud FROM ztippqps WHERE pqtyp = @is_header-negotiation_type_code AND keyfield = @lv_keyfield.</description>
    </item>
    
    <item>
      <title>Lista de programas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/programas/programas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/programas/programas/</guid>
      <description>Lista#Generales#   Programa Descripción     RSSPO* Tiene ejemplos de las funcion POPUP_*   BCS_EXAMPLE_7 BCS: Enviar correu-e amb adjunt Excel autocreat (exemple)   RSCPSETEDITOR Este es el programa que a partir del EHP4 permite activar desactivar el word como editor para smartforms y sapscript   BALVBUFDEL Resetea memoria intermedia de ALV. Ideal cuando se cambian textos de elementos de datos.</description>
    </item>
    
    <item>
      <title>Listas y tuplas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/listas_tuplas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/listas_tuplas/</guid>
      <description>Listas y tuplas#Las listas son las que usan [] y las tuplas(). Ambas sirven para guardar datos. Y ambas están indexadas por 0, es decir, al primer registro se accede por el valor 0.
Los string en si mismos son listas como se explica en pagína de cadenas. Pero mientras que en la cadenas los valores son carácteres en una lista/tupla puede contener cualquier valor.
Ejemplo de inicialización:</description>
    </item>
    
    <item>
      <title>Logística</title>
      <link>https://irodrigob.github.io/docs/sap/abap/funciones/logistica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/funciones/logistica/</guid>
      <description>Objetivo#Funciones del módulo de logística. Logística entraría la parte de compras, almacenes, etc.
Lista#   Función Descripción     RM_KOKRS_TO_PLANT_FIND De una centro te devuelve su sociedad FI y CO   CO_RM_COMPANYCODE_FIND De una centro te devuelve su sociedad FI   RK_KOKRS_FIND De una centro te devuelve su sociedad CO   CS_WHERE_USED_MAT De un material devuelve en que lista de material se usa.</description>
    </item>
    
    <item>
      <title>Mapeo de campos</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/mapeo_campos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/mapeo_campos/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten hacer mapeo de campos, digamos que son las que sustituyen al MOVE-CORRESPODING.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#La clase CL_ABAP_CORRESPONDING permite crear mapeos entre tablas y estructuras. En este ejemplo se construye la tabla de mapeos en base a una tabla interna.</description>
    </item>
    
    <item>
      <title>Nomenclaturas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/nomenclaturas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/nomenclaturas/</guid>
      <description>Objetivo#Es tener las indicaciones de las nomenclaturas que uso cuando creo un BOPF. Ya que de esta manera es fácil identificar los objetos a simple vista.
Yo normalmente cuando hago proyecto suele dar un nombre de tres carácteres que usará como prefijo para cualquier objeto que creo, ya sea, BOPF, ya sea, cualquier otro objeto: clases, transacciones, etc.
Estructuras y tablas de diccionario#En la siguiente imagen:</description>
    </item>
    
    <item>
      <title>Notas de SAP</title>
      <link>https://irodrigob.github.io/docs/sap/abap/notas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/notas/</guid>
      <description>Objetivo#Recopilar notas que son interesante para entender el funcionamiento de determinados procesos
Lista#   Nota Descripción     1420281 Note 1420281 - CO-OM tools: SE16N: Deactivating &amp;amp;SAP_EDIT   1083986 Explica las BAPIS para el sistema de clasificacion. Y tiene subnotas que explican como funcionan muchas de ellas.    </description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/operadores/</guid>
      <description>Operadores#Aritméticos#Los operadores son los habituales:
 Sumar: + Resta: - División: / Multiplicación: * Elevar a la potencia: ** Obtener el resto: %  Ejemplos:
d = a * b print(&amp;#34;Resultado&amp;#34;, d) d = ( a + b ) / a print(&amp;#34;Resultado:&amp;#34;, d) Resultado:
Resultado 416.15999999999997Resultado: 3.89String#Con los string podemos contaner y incluso hacer que un caracter aparezca n veces.</description>
    </item>
    
    <item>
      <title>Procesamiento de datos con PCA</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/procesamiento_datos/procesamiento_datos_pca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/procesamiento_datos/procesamiento_datos_pca/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 10. Procesamiento de datos (PCA). De este mismo video se extraerán fotos para aclarar mejor conceptos tal como hace el video.
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas.
Explicación#La librería PCA se utiliza para principalmente dos cosas:
 Reducir el ruido que hay en nuestros datos Poder ver los datos que están en muchas dimensiones en solo dos dimensiones.</description>
    </item>
    
    <item>
      <title>Reconocimiento números escritos a mano</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/reconocimiento_numeros_escrito_mano/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/reconocimiento_numeros_escrito_mano/</guid>
      <description>Introducción#Ejemplo extraído del video Tensorflow: Cómo clasificar números escritos a mano.
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas.
NOTA: El código del video esta basado en Tensor Flow 1.0. Pero el Tensor Flow que se ha instalado es la version 2.x, la llamaremos TF2.0 o TF20 . Por lo tanto hay muchas cosas que no son compatibles. En el código habrá partes las principales que se indique que no se usa en TF20, pero el resto de partes se pondrá en código TF20 para no poner demasiada basura en el código</description>
    </item>
    
    <item>
      <title>Redes convolucionales</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/redes_convolucionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/redes_convolucionales/</guid>
      <description>Introducción#Ejemplo extraído de Redes neuronales convolucionales CNN (Clasificación de imagenes). Se pondrán imagens obtenidas del video para explicar mejor el funcionamiento tal como lo hace en el video.
Como se explico en la página de tipos de redes neuronales este tipo de red nace para procesar de una manera eficiente imagenes, aunque también se usa para procesamiento de texto. Pero realmente su fuerte es el procesamiento de imagenes.</description>
    </item>
    
    <item>
      <title>Relleno de valores</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/relleno_valores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/relleno_valores/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias, que son las que más uso, para poder informar tablas internas en base a otras tablas internas.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
La sentencia estrella de esta página es la FOR. Pero ojo: que si usamos field-symbols/variable no tiene que estar declarada previamente.
Ejemplo 1#Se recorren los datos de MT_TIPPQPS filtrando por dos campos y se rellenando los valores de ET_COND_CRUD con los datos de la estructura leída y de otras variables:</description>
    </item>
    
    <item>
      <title>Servicios con ficheros</title>
      <link>https://irodrigob.github.io/docs/python/framework/django/publicar_servicio_ficheros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/framework/django/publicar_servicio_ficheros/</guid>
      <description>Pre-Introducción :-)#Antes de nada explicar como se guardan los ficheros usando Django. Los ficheros en vez de guardarse en binario en un campo de la base de datos aquí por lo que que leído, se guardan en un directorio interno y en base de datos se guarda la ruta a dicha fichero. Por lo cual, cuando el servicio que devuelve el fichero no devuelve el contenido. Devuelve la url directamente.</description>
    </item>
    
    <item>
      <title>Sistema</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/sistema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/sistema/</guid>
      <description>Introducción#La librería os hay una serie de funciones de sistema que se pueden utilizar. Aquí se recopilan las que se van usando. Esta librería para utilizar hay que hacer lo siguiente al inicio del programa:
import os Logs#Cuando se usán librerías de machine learning como Tensor Flow en programa de Python, si se usa Jupyter Notebooks se muestran una cantidad de logs, cientos de líneas, que desvirtuan lo que realmente se quiere mostrar.</description>
    </item>
    
    <item>
      <title>String template</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/string_templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/string_templates/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten procesar los string.
Los string template son útiles porque simplifican el tratamiento de string o conversiones de campo.
De momento voy a poner en enlace a la ayuda de SAP porque tiene muy buenos ejemplo. Los iré poniendo aquí porque a veces cuesta encontrarlos.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.</description>
    </item>
    
    <item>
      <title>Subir datos propios</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/set_datos_propios/subir_datos_propios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/set_datos_propios/subir_datos_propios/</guid>
      <description>Introducción#Ejemplo extraído del video Machine Learning episodio 11. ¿Cómo subir tu set de datos propio?.
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas.
Explicación#En el video se muestra un excel con los datos iris con multidud de valores. Para este página se ha creado un excel sencillo con la misma estructura pero con datos limitados e inventados.</description>
    </item>
    
    <item>
      <title>Tipos de redes redes neuronales</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/tipos_redes_neuronales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/redes_neuronales/tipos_redes_neuronales/</guid>
      <description>Introducción#Ejemplo extraído de Tipos de redes neuronales. Se pondrán imagens obtenidas del video para explicar mejor el funcionamiento tal como lo hace en el video.
En el video habla de los siguientes tipos:
 Profundas, o DNN. Convolucionales, o CNN. Recurrente, o RNN.  Deep Neural Net(DNN)#Es una red versátil que permite procesas:
 Texto Imagenes pequeñas Datos númericos. Como el set de datos de Iris.</description>
    </item>
    
    <item>
      <title>Traducciones</title>
      <link>https://irodrigob.github.io/docs/react/nextjs/traducciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/react/nextjs/traducciones/</guid>
      <description>Introducción#Por defecto ni React ni NextJS permite hacer textos multiidioma. Pero al ser un sistema abierto alguien se ha trabajado una serie de plug-in para conseguirlo. El objetivo es explicar como hacerlo.
Los pasos vamos a dividirlo en dos:
 Será la instalación, configuración y funcionamiento del Next-i18n para poder los textos multiidioma. Detectar el idioma para pasarselo al Next-i18n.  Instalación y configuración del Next-i18n#Instalación#Hay que instalar el paquete next-i18next:</description>
    </item>
    
    <item>
      <title>Transacciones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/transacciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/transacciones/</guid>
      <description>Objetivo#Recopilación de las transacciones que me parecen interesantes.
Transacciones#SAP R/3 o ECCGenerales    Transacción Descripción     I18N Internacionalizacion. Permite configurar el smartforms para usar word (a partir del EHP4 lo hace este report: RSCPSETEDITOR)   CG3Y Descarga de ficheros del servidor a local   CG3Z Subido de fichero al servidor desde local   SM01 Bloquea transacciones estándar   SLXT Guarda las traducciones hechas en la transacción SE63   DWDM Ejemplos controles de pantalla   BAPI Permite ver los objetos de negocio con sus respectiva funcionalidad.</description>
    </item>
    
    <item>
      <title>Usar dataset</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/usar_datasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/usar_datasets/</guid>
      <description>Introducción#Este articulo lo he tenido que hacer para aprender la base de como funciona los dataset en Tensor Flow, porque si no hay manera de entender los ejemplos más complejos. O ejemplos creados en versión 1.x de Tensor Flow que al usarlos en la versión 2.0 hay que migrarlos.
Libreías de cada ejemplo#Las librérías que uso en cada ejemplo son las sigueintes:
# Libreria tensor flowe import tensorflow as tf # Daset de datos con números escritos a manorom from tensorflow.</description>
    </item>
    
    <item>
      <title>Usar librerias</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/usar_librerias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/usar_librerias/</guid>
      <description>Usar librerias#Importar libreria se hace con la sentencia Import pero tiene variantes según sean librerias propias de Python o sencillas, eso creo, o librerias que están dentro de un paquete.
Librerías propias o sencillas#Ejemplo de como usar la libreria matemática para calcular una raíz cuadrada:
import math print(math.sqrt(20)) Resultado
4.47213595499958Librerías dentro de paquetes#El siguiente ejemplo se recupera la libreria de regresión de KNN:</description>
    </item>
    
    <item>
      <title>Uso GPU</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/usar_gpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/usar_gpu/</guid>
      <description>Introducción#El objetivo es explicar que he hecho para poder hacer utilizar la GPUs de la tarjeta gráfica para las operaciones del machine learning. El motivo, es que una tarjeta gráfica tiene muchos más cpus que se pueden usar paralelamente para los calculos.
Se va explicar como se ha usado para TensorFlow pero puede servir para otras librerías.
NOTA IMPORTANTE: El sistema operativo es Windows
Tensor Flow#Lo primero que hay que hacer es mirar la documentación oficial para averiguar que versión de librerías es necesaria.</description>
    </item>
    
    <item>
      <title>Utilidades generales</title>
      <link>https://irodrigob.github.io/docs/sap/abap/utilidades_generales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/utilidades_generales/</guid>
      <description>Objetivo#Cajón de desastre de cosas que no se muy como clasificar.
Hacks#Saltarse seguridad como desarrollador#Para saltarse la seguridad del usuario desarrollador
URL# http://wiki.sdn.sap.com/wiki/display/Basis/Timezone+changes+best+practices &amp;ndash;&amp;gt; Best practices sobre los husos horarios  Rellenar campos con 0#data: l_char(50). TRANSLATE l_char USING &amp;#39; 0&amp;#39;. WRITE l_char. Truco para saber que BADIS se utilizan en un proceso#Hay que ir a la transacción SE24 informar la clase CL_EXITHANDLER metodo e ir al contenido del método GET_INSTANCE.</description>
    </item>
    
    <item>
      <title>Variables y sesiones</title>
      <link>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/variables_sesiones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/machine_learning/tensorflow/variables_sesiones/</guid>
      <description>Introducción#Ejemplo extraído del video TensorFlow: Variables y Sesiones.
El ejemplo esta creado el Jupiter Notebool y se irá poniendo el código de las distintas celdas.
NOTA: El código del video esta basado en Tensor Flow 1.0. Pero el Tensor Flow que se ha instalado es la version 2.x, la llamaremos TF2.0 o TF20 . Por lo tanto hay muchas cosas que no son compatibles. En el código habrá partes las principales que se indique que no se usa en TF20, pero el resto de partes se pondrá en código TF20 para no poner demasiada basura en el código</description>
    </item>
    
    <item>
      <title>Ventas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/tablas/ventas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/tablas/ventas/</guid>
      <description>Objetivo#Tablas de ventas
Lista#Generales#   Función Descripción     VAPMA Tabla que contiene los datos de VBAK y VBAP pero con muchos menos campos. Y lo más importantes son claves.    </description>
    </item>
    
    <item>
      <title>Ventas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/funciones/ventas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/funciones/ventas/</guid>
      <description>Objetivo#Funciones del módulo de ventas(SD).
Al final hay una sección de ejemplos para algunas funciones. No todas las funciones tienen ejemplo.
Lista#   Función Descripción     RV_DOCUMENT_FLOW Sacar el flujo de documentos en ventas   SD_OBJECT_TYPE_DETERMINE Se le pasa el tipo de documento de SD y devuelve el objeto workflow asociado.    Ejemplos#RV_DOCUMENT_FLOW#FORM ir_flujo USING pe_datos TYPE LINE OF zzc_sd49501=&amp;gt;ty_t_alv.</description>
    </item>
    
    <item>
      <title>Visualizar datos</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/visualizar_datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/visualizar_datos/</guid>
      <description>Visualizar datos#En todos los ejemplos se hace uso de la sentencia print a la hora de visualizar los datos. En esta página se recopila usos que se hace de ella y otras posibles formar de visualizar en pantalla
print#El print muestra los datos en la consola doned se esta ejecutando el programa. Aquí se recopilan formas de usarlo
Hacer operaciones#Es posible mostrar el resultado de una operación que se pone directamente en la sentencia:</description>
    </item>
    
  </channel>
</rss>