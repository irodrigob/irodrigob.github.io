'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/sap/abap/','title':"ABAP",'content':"ABAP\r#\r\rSe aglutina todo lo referente al lenguaje de programación de SAP.\nPublicaciones\r#\r\r\r\rSentencias 7.4\r\r\rNuevas sentencias aparecidas en la versión 7.4\r\r\r"});index.add({'id':1,'href':'/docs/github/enlaces_interesantes/','title':"Enlaces interesantes",'content':"Enlaces\r#\r\r \rComandos en Git \u0026ndash;\u0026gt; https://www.hostinger.es/tutoriales/comandos-de-git  "});index.add({'id':2,'href':'/docs/github/generar_rsa_windows/','title':"Generar clave RSA",'content':"Motivo\r#\r\rEl motivo de crear una clave RSA es poder hacer deploy a Github mediante consola y evitar el siguiente error:\n\rDigo consola porque es el único momento que lo he necesitado, ya que usando VS Code o la propia aplicación de Github no lo he necesitado.\nPasos a seguir\r#\r\r Abrir el git Bash. Para eso hay que tener el instalado el Git para windos y al pulsar la tecla win y al escribir git aparecerá la opción:  \rEn el terminal que aparecerá escribir: ssh-key -t rsa -b 4096 -C \u0026ldquo;mail que nos hemos registrado en github\u0026rdquo; y al pulsar enter nos aparecerá esto:  \rPulsaremos Enter\nSe nos pedirá introducir una frase:\n\rLa frase se dejará en blanco para no tener que introducirla en todos los sitios que se haga push.\nAhora hay que añadir la clave generada al ssh-agent. Pero para eso primero hay que valir que este en marcha. Para ello hay que introducir: eval $(ssh-agent –s):  \rY con la siguiente instrucción se añade la clave al agente: ssh-add ~/.ssh/id_rsa nos pedirá la frase introducida en el paso 2 y si es correcta la añadirá.  \rAhora hay que obtener la key para poderla incluirla en nuestra cuenta github, para eso hay que escribir el siguiente comando:c cat ~/.ssh/id_rsa.pub  \rNota: Imagen cortada por seguridad. Todo lo que nos aparezca hay que copiarlo en un notepad para luego asociarlo a nuestra cuenta.\nAsociar clave a nuestra cuenta Github\r#\r\rAhora hay que ir al github y acceder a los Settings de nuestro usuario e ir a la opción SSH and GPG keys:\n\rY pulsar sobre el botón New SSH Key:\n\rEl en título se puede poner lo que sea, ejemplo el ordenador donde has generado la clave, y la clave generada es la rista que hemos obtenido del comando cat ~/.ssh/id_rsa.pub. Una vez introducida nos aparecerá lo siguiente:\n\rBibliografía\r#\r\rPara poder este artículo me he bsado en el siguiente artículo.\n"});index.add({'id':3,'href':'/docs/github/','title':"Github",'content':"Introducción\r#\r\rEn esta sección iré poniendo todo lo que vaya aprendido sobre Github.\nPublicaciones\r#\r\r\r\rEnlaces interesantes\r\r\rEnlaces interesantes sobre Github\r\r\rGenerar clave RSA\r\r\rGenerar clave RSA en Windows\r\r\r"});index.add({'id':4,'href':'/docs/hugo/','title':"Hugo",'content':"Introducción\r#\r\rEn esta sección iré poniendo todo lo que vaya aprendido sobre Hugo. Hugo para quien no lo sepa permite crear páginas web estáticas que se pueden subir a un repositorio de Github.\nPublicaciones\r#\r\r\r\rPublicar Web Github\r\r\rComo publicar una web en Github\r\r\r"});index.add({'id':5,'href':'/docs/hugo/publicar_web_github/','title':"Publicar Web Github",'content':"Motivo\r#\r\rPara aquellos que no quieren gastarse dinero en productos como Wordpress o no necesitan páginas dinámicas, la opción de crear una de manera gratuíta y usando Hugo es una buena elección.\nPersonalmente la clave es escoger un tema que se nos adapte a lo que necesitamos, porque cada tema tiene ciertos comportamientos que no tiene otros. Por ejemplo, inicialmente había escogido el tema npp-hugo, cuando empece a montar la estructura que quería vi que no era tan flexible en la organización por carpetas como me esperaba (al menos es lo que he visto probandolo). Por ello finalmente y después de revisar unos cuantos temas he optado por el tema book que se ajustaba más lo que buscaba.\nPor ello creo que para usar Hugo es básico escoger con calma el tema que se quiera ya que funcionalidad que tiene un tema no existen en otro. Por ejmeplo, hay páginas template, mardownsyntax.md del tema npp-hugo no son compatibles con el tema book que uso. En mi caso me he dado cuenta mientras hacía pruebas con este tema.\nAparte he visto que la documentación oficial parece echa para construir template porque realmente lo que me ha servido para construir la página han sido los ejemplos que vienen incluídos en la carpeta exampleSite que suele vernir en cada tema.\nPasos\r#\r\rPasos previo\r#\r\rAntes de iniciar el proceso se aconseja instalar la clave RSA en local de Github siguiendo los pasos de este artículo\nInstalar Hugo\r#\r\rHugo se puede descargar de la siguiente página web. Una vez instalado es aconsejable poner el directorio donde se ha instalado en el PATH de window para un mejor acceso:\n\rCrear los repositorios en el Github\r#\r\rEl sitio que se va a crear se tiene que sincronizar con dos repositorios que se han de crear previamente. Estos sitios son:\n  será el encargado de tener los ficheros del sitio que estamos construyendo. El que contendrá los ficheros .md .github.io será el encargado guardar las páginas renderizadas por Hugo en base al contenido en el sitio anterior. Es importante poner el nombre del usuario ya que si no, no funcionara. En mi caso el repositorio creado es: irodrigob.github.io  Crer el sitio en local\r#\r\rHay que abrir la consola de Windows e ir al directorio donde vamos crear el sitio web. Una vez en el directorio hay que escribir: hugo new site nombre_sitio:\n\rAñadir el tema\r#\r\rEn la página web de los temas se pueden encontrar multitud de temas para descargar. Para este sitio se ha utilizado el tema book\n NOTA: Tanto los pantallazos como en las explicación sale el tema npp-hugo, esto es debido a que use incialmente dicho tema para crear el sitio.*  Para instalarlo hay que hacerlo desde la consola hay que hacer los siguientes pasos:\n git init, Crea los archivos para poder sincronizar el sitio con Git git submodule add https://github.com/saadnpq/npq-hugo themes/npqq-hugo, Añade como submodulo el tema y lo descargará en el directorio themes/npqq-hugo Editar el fichero config.toml que esta en el directorio raíz del sitio y poner el contenido del mismo fichero, que hay en el directorio themes/npqq-hugo/example-config.toml. Una vez copiado se ajustarán los datos de configuración básicos.  En consola se irá viendo lo siguiente:\n\rCon esto ya se tiene un primer esbozo del sitio, para ver cómo queda en la consola hay que escribir: hugo server -D\nSi abrimos una navegador e introducimos la url: http://localhost:1313/ veremos como queda el sitio.\nSincronizar el sitio local con Gihub\r#\r\rEsta es la parte que mas me ha costado por no estar acostumbrado a trabajar con Git. Esta es la parte es la que he aprendido que hacer que hacerlo en consola, ya que aunque puedes hacer los push con la aplicación de escritorio de Github o con el VS Code(que es el que uso para crear las páginas) he descubierto, seguramente por desconocimiento, que no funciona igual y se jode de tal manera los archivos de Git que he tenido que borrar sitio y repositorios más de una vez. Ahora, todo lo hago con la consola y ya no tengo errores.\nPersonalmente creo que si los submodulos (solo hemos creado el primero de ellos, el del tema) se hubiesen sincronizado con el Github Desktop no hubiese habido problemas. Pero ahora mismo no tengo ganas de más experimentos.\nLos dos sitios del github los hemos creado en el paso anterior, aunque también es posible crearlo justo en este momento, pero así es como lo he hecho yo. Una vez creados hay que seguir los siguientes pasos para sincronizalos en local.\nDesde la consola de Windows y estando en el directorio del sitio hay que ejecutar los siguientes comandos git:\n git remote add origin git@github.com:irodrigob/navi-developer.git Añade el repositorio que guardará las páginas que vamos creando git add . Le decimos que queremos añdir todas las carpetas del sitio en el git git commit -m \u0026quot;Commit inicial del sitio\u0026quot; Guarda los ficheros añadidos en el paso anterior en el git local.  A nivel de consolo iremos viendo algo parecido a esto:\n\rAhora hay que añadir el repositorio donde se guardarán las páginas renderizadas por Hugo:\n git submodule add git@github.com:irodrigob/irodrigob.github.io.git En este sentencia aparecerá la pregunta de la frase de la clave RSA que hemos hecho previamente para poder subir a Github:  \rAunque en la imagen no se vé, hay una pregunta que pide poner: Yes/No/Phrase. Como no se ha puesto frase, para ser más comodo las subidas, hay que poner Yes para confirmar la clave y así no volverá a realizar la misma pregunta.\nUna vez añadido hay que hacer los siguientes pasos:\n git add . git commit -m \u0026quot;Commit inicial\u0026quot; git push –u origin master Este sube los archivos del repositorio local al remoto  A nivel de consola deberá aparecer algo parecido a esto:\n\rHasta ahora solo hemos subido datos del repositorio que hemos creado para el sitio. Ahora hay que cambiar la configuración para que Hugo publique las páginas en nuestro repositorio de github.io\nPublicando en github.io\r#\r\rEl archivo de configuración config.toml hay que realizar los siguientes cambios:\n Al parámetro baseURL se le tiene que poner nuestra dirección del repositorio creado con el nombre github.io Se añade el parámetro publisDir con el nombre de la carpeta que se ha creado al crear el submodulo del repositorio *github.io\u0026rdquo;. Este directorio es donde Hugo rendizara las páginas markdow a HTML  Así es como quedaría(Nota: Ejemplo del fichero que estoy usando con tema que estoy usando actualmente):\nbaseURL = \u0026quot;https://irodrigob.github.io/\u0026quot;\rlanguageCode = \u0026quot;es-es\u0026quot;\rtitle = \u0026quot;Navi-developer\u0026quot;\rtheme = \u0026quot;hugo-book\u0026quot;\rpublishDir = \u0026quot;irodrigob.github.io\u0026quot; Ahora de nuevo vía consola, y en el directorio del sitio, con el comando hugo se creará la página Web en el directorio del submodulo github.io\nAhora y antes de hacer el pull para subir los archivos al repositorio *github.io\u0026rdquo; vamos a comprobar que la configuración sea la correcta. Para ello de nuevo desde la consola se escribirá: git remote -v:\n\rSi el resultado es como el de la imagen es que todo es correcto.\nAhora para poder subir los archivos generados a nuestro repositorio github.io hay que ir al directorio de dicho repositorio y lanzar los siguientes comandos en la consola de windows:\ngit add .\rgit commit -m \u0026quot;Primera subida!!\u0026quot;\rgit push origin master\rEn consola aparecerá algo parecido a esto:\n\rY ahora si se accede la siguiente página: http://irodrigob.github.io/ se verá el contenido publicado.\nBibliografía\r#\r\rPara poder este artículo me he bsado en el siguiente artículo.\n"});index.add({'id':6,'href':'/docs/sap/','title':"SAP",'content':"Introducción\r#\r\rEn esta sección será posiblemente la principal de la página ya que es el sistema que llevo desarrollando durante más de 20 años.\nSecciones\r#\r\rLas sección de SAP son las siguientes:\n\r\rABAP\r\r\rLenguaje de desarrollo ABAP\r\r\r"});index.add({'id':7,'href':'/docs/sap/abap/sentencias_74/','title':"Sentencias 7.4",'content':"Objetivo\r#\r\rA partir de la versión 7.4 de ABAP aparecerán nuevas sentencia, que se demoninan in-line, que permiten una mayor flexibilidad a la hora de desarrollar. Se demoninan in-line porque se puede combinar varias sentencias en una sola línea, incluso, se puede poner dichas sentencias a la hora de pasar parámetros en clases. Lamentablemente, las funciones no permiten dicha funcionalidad.\nHay que destacar que estas sentencias van mejorando en cada versión, en la versión 7.5 apareciendo nuevas funcionalidades.\nAunque tengo que reconocer que usar estas sentencias son muy guays y parece que sabes, muchas veces su legibilidad queda en entredicho. Y hay veces que hay que usar un mix de sentencias de \u0026ldquo;siempre\u0026rdquo; son más legibles tanto para uno propio, como para la persona que lo va a mantener.\nIré creando páginas para ir clasificando los distintos tipo de sentencias.\nPublicaciones\r#\r\r\r\rBucles\r\r\rSentencias sobre proceso de tablas internas\r\r\rCondiciones\r\r\rSentencias sobre condiciones\r\r\rConversiones\r\r\rSentencias sobre conversión de datos\r\r\rFiltros\r\r\rSentencias sobre el filtrado de datos\r\r\rLectura tablas del diccionario\r\r\rFormas nuevas de leer en las tablas del diccionario\r\r\rMapeo de camos\r\r\rSentencias sobre mapeo de campos\r\r\rRelleno de valores\r\r\rSentencias para informar tablas internas\r\r\rString template\r\r\rSentencias sobre el tratamiento de string\r\r\r"});index.add({'id':8,'href':'/docs/sap/abap/sentencias_74/bucles/','title':"Bucles",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten procesar tablas internas. Este artículo esta muy relacionado con el del relleno de valores ya que se usán las mismas sentencias para procesar tablas internas. Aún asi, lo separo en dos artículos según la finalidad en que se use.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rEl siguiente ejemplo se usa la cláusula GROUP BY de los LOOP que sustituye a los AT NEW. En el primer loop nos devuelve la clave de registros únicos que se va agrupando y que informa en el field-symbol . Y el loop at group  nos devuelve los registros que conforman dicha clave.\nLOOP AT mt_level_agr_type ASSIGNING FIELD-SYMBOL(\u0026lt;ls_level_agr_type\u0026gt;) WHERE id_nivel1 = \u0026#39;OFF\u0026#39; GROUP BY ( id_nivel1 = \u0026lt;ls_level_agr_type\u0026gt;-id_nivel1 id_nivel_inf = \u0026lt;ls_level_agr_type\u0026gt;-id_nivel_inf boart = \u0026lt;ls_level_agr_type\u0026gt;-boart size = GROUP SIZE index = GROUP INDEX ) ASSIGNING FIELD-SYMBOL(\u0026lt;group\u0026gt;). . write:/ \u0026lt;group\u0026gt;-id_nivel1, \u0026lt;group\u0026gt;-id_nivel_inf, \u0026lt;group\u0026gt;-boart. LOOP AT GROUP \u0026lt;group\u0026gt; ASSIGNING FIELD-SYMBOL(\u0026lt;ls_level_agr_type_row\u0026gt;). WRITE:/ \u0026lt;ls_level_agr_type_row\u0026gt;-boart_agr. ENDLOOP. ENDLOOP. Ejemplo 2\r#\r\rEn este ejemplo es similar al anterior la diferencia es que dentro del loop ya tendremos los registros únicos según lo que se indique en el GROUP BY.\nLOOP AT mt_key_field_text_cond ASSIGNING FIELD-SYMBOL(\u0026lt;ls_key_field_text_cond_group\u0026gt;) WHERE kschl = \u0026lt;ls_kschl\u0026gt;-kschl AND field_cust_is_hier = zcl_rtn_customer_data=\u0026gt;is_customer_hierarchy( iv_customer ) AND field_cust IS NOT INITIAL GROUP BY \u0026lt;ls_key_field_text_cond_group\u0026gt;-kotab. En la clausula GROUP BY se indica los campos que se quiere hacer la agrupación\nEjemplo 3\r#\r\rEjemplo encontrado de como hacer un collect:\nactual_collect = VALUE #( FOR GROUPS group OF \u0026lt;flight\u0026gt; IN original_table GROUP BY ( carrid = \u0026lt;flight\u0026gt;-carrid connid = \u0026lt;flight\u0026gt;-connid ) ( REDUCE #( INIT sum_aux TYPE sflight FOR line IN GROUP group NEXT sum_aux = VALUE #( BASE sum_aux carrid = line-carrid connid = line-connid price = sum_aux-price + line-price seatsmax = sum_aux-seatsmax + line-seatsmax seatsocc = sum_aux-seatsocc + line-seatsocc paymentsum = sum_aux-paymentsum + line-paymentsum seatsmax_b = sum_aux-seatsmax_b + line-seatsmax_b seatsocc_b = sum_aux-seatsocc_b + line-seatsocc_b seatsmax_f = sum_aux-seatsmax_f + line-seatsmax_f seatsocc_f = sum_aux-seatsocc_f + line-seatsocc_f ) ) ) ). Ejemplo collect\r#\r\rEn este ejemplo es propio y permite saber cuantas repeticiones que hay de las price list(PLTYP)\nTYPES: BEGIN OF ts_pltyp_count, pltyp TYPE knvv-pltyp, count TYPE i, END OF ts_pltyp_count. TYPES: tt_pltyp_count TYPE STANDARD TABLE OF ts_pltyp_count WITH EMPTY KEY. \u0026#34; Se cuenta cuantas price list hay repetidas DATA(lt_count) = VALUE tt_pltyp_count( FOR GROUPS lt_group OF \u0026lt;wa1\u0026gt; IN lt_customer_sales GROUP BY ( pltyp = \u0026lt;wa1\u0026gt;-pltyp ) ( REDUCE #( INIT ls_count TYPE ts_pltyp_count FOR ls_group IN GROUP lt_group NEXT ls_count = VALUE #( BASE ls_count pltyp = ls_group-pltyp count = ls_count-count + 1 ) ) ) ). Este es un caso, cuya legibilidad no queda clara y tengas que leer la sentencias varias veces para entenderla. Sobretodo porque son cosas que, al menos a mi, no se usan muy a menudo.\nEjemplo de un DELETE ADJACENT DUPLICATES con la sentencia REDUCE\r#\r\rTYPES: BEGIN OF ts_dates_intervals, datab TYPE datab, datbi TYPE datab, END OF ts_dates_intervals. TYPES: tt_dates_intervals TYPE STANDARD TABLE OF ts_dates_intervals WITH EMPTY KEY. DATA(lt_dates_intervals) = VALUE tt_dates_intervals( ( datab = \u0026#39;20200101\u0026#39; datbi = \u0026#39;20201231\u0026#39; ) ( datab = \u0026#39;20200101\u0026#39; datbi = \u0026#39;20201231\u0026#39; ) ( datab = \u0026#39;20200101\u0026#39; datbi = \u0026#39;20211231\u0026#39; ) ( datab = \u0026#39;2190301\u0026#39; datbi = \u0026#39;20211231\u0026#39; ) ( datab = \u0026#39;2190301\u0026#39; datbi = \u0026#39;20200830\u0026#39; ) ). DATA(lt_dates) = VALUE tt_dates_intervals( FOR GROUPS lt_group OF \u0026lt;wa\u0026gt; IN lt_dates_intervals GROUP BY ( datab = \u0026lt;wa\u0026gt;-datab datbi = \u0026lt;wa\u0026gt;-datbi ) ( REDUCE #( INIT ls_dates TYPE ts_dates_intervals FOR ls_group IN GROUP lt_group NEXT ls_dates = VALUE #( BASE ls_dates datab = ls_group-datab datbi = ls_group-datbi ) ) ) ). Otra sentencia que usando las sentences de siempre quedan más claras para cualquiera que las lea.\nContar el valor de un campo en una tabla interna\r#\r\rEjemplo que cuenta los registros que cumplen unas determinas condiciones:\ncs_layout_options-number_columns_fixed = REDUCE #( INIT x = 0 FOR \u0026lt;fcat_ui5\u0026gt; IN it_fieldcatalog_ui5 WHERE ( fixed_column = abap_true ) NEXT x = x + 1 ). Concatenar todos los valores de un campo de una tabla separandolos por un cáracter separador\r#\r\rSe puede hacer de tres formas:\n Ejemplo 1  DATA(lv_sql) = REDUCE string( INIT sql TYPE string FOR \u0026lt;ls_fields\u0026gt; IN lt_fields NEXT sql = sql \u0026amp;\u0026amp; COND #( LET sep = \u0026#39;,\u0026#39; IN WHEN sql IS NOT INITIAL THEN |{ sep } { \u0026lt;ls_fields\u0026gt; }| ELSE |{ \u0026lt;ls_fields\u0026gt; }| ) ). Ejemplo 2  DATA(lv_sql) = REDUCE string( INIT sql TYPE string FOR \u0026lt;ls_fields\u0026gt; IN lt_fields NEXT sql = sql \u0026amp;\u0026amp; COND #( WHEN sql IS NOT INITIAL THEN |, { \u0026lt;ls_fields\u0026gt; }| ELSE |{ \u0026lt;ls_fields\u0026gt; }| ) ). Ejemplo 3  DATA(lv_sql) = REDUCE string( INIT sql TYPE string FOR \u0026lt;ls_fields\u0026gt; IN lt_fields NEXT sql = sql \u0026amp;\u0026amp; CONV string( LET sep = COND #( WHEN sql IS NOT INITIAL THEN \u0026#39;,\u0026#39; ELSE \u0026#39;\u0026#39; ) IN |{ sep } { \u0026lt;ls_fields\u0026gt; }| ) ). Todas ellas casi funcionan de la misma manera, la diferencia es como se concatena los campos. Casi, porque el ejemplo 3 pone un espacio en blanco antes del primer campo.\nComo nota personal el código que finalmente use para el desarrollo que estaba haciendo es el número 2.\n"});index.add({'id':9,'href':'/docs/sap/abap/sentencias_74/condiciones/','title':"Condiciones",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten hacer condiciones.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rPermite que una variable se inicialice segun una condicion determinada:\nDATA(lv_updkz) = COND #( WHEN is_header-negotiation_code IS INITIAL THEN zif_rtn_data=\u0026gt;cv_updkz_insert WHEN is_header-has_changed = abap_true THEN zif_rtn_data=\u0026gt;cv_updkz_edit ). Ejemplo 2\r#\r\rUso de SWITCH haciendo una conversion de variable;\n\u0026lt;ls_cond_crud\u0026gt;-value = SWITCH #( \u0026lt;ls_conditions_values_field\u0026gt;-field_type WHEN zif_rtn_negotiation_data=\u0026gt;cs_field_types-flex_group THEN \u0026lt;field\u0026gt; LSE CONV string( \u0026lt;field\u0026gt; ) ). Ejemplo 3\r#\r\rDATA lv_valor TYPE string. DO 10 TIMES. lv_valor = COND #( LET x = sy-index MOD 2 IN WHEN x = 0 THEN |par| ELSE |impar| ). WRITE:/ lv_valor. ENDDO. "});index.add({'id':10,'href':'/docs/sap/abap/sentencias_74/conversiones/','title':"Conversiones",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten convertir valores de un campos a otro.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rLo que antes se hacia:\nDATA lo_elemdesc type ref to cl_abap_elemdescr. Lo_elemdesc ?= cl_abap_typedescr=\u0026gt;describe_by_data( iv_abap_value. Ahora se puede hacer en una sola línea: DATA(lo_elemdesc) = CAST cl_abap_elemdescr( cl_abap_typedescr=\u0026gt;describe_by_data( iv_abap_value ) ). Ejemplo 2\r#\r\rConvertir los valores de un select para adaptarlos a la variable donde se van a guardar:\nSELECT SINGLE CAST( months_past AS INT2 ), CAST( months_future AS INT2 ) INTO (@ev_months_past, @ev_months_future) FROM zrtn_t_0037 WHERE vkorg = @iv_vkorg AND vtweg = @iv_vtweg AND spart = @iv_spart. "});index.add({'id':11,'href':'/docs/','title':"Docs",'content':""});index.add({'id':12,'href':'/docs/sap/abap/sentencias_74/filtros/','title':"Filtros",'content':"Introducción\r#\r\rEn este grupo se irán poniendo distintos ejemplos de la sentencia FILTER que es un sentencia que no he usado mucho.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\r\u0026lt;ls_values_search_sap\u0026gt;-kotab_data = FILTER #( lt_values IN FILTER #( lt_konp USING KEY loevm WHERE loevm_ko = \u0026#39;\u0026#39; ) WHERE knumh = knumh ). Lo bueno del filter es que te crea una tabla o te mueve directamente el contenido de la tabla con el filtro aplicado. En el caso de usar búsqueda directa (segundo FILTER) te obliga, eso creo, ha tener una clave para la búsqueda.\nEjemplo 2\r#\r\rdata(et_cust_hier) = FILTER #( lt_cust_hier IN lt_cust_sales USING KEY kunnr WHERE kunnr = kunnr ). Se filtra el contenido de la tabla LT_CUST_HIER con los valores en LT_CUST_SALES filtrando por el cliente. Importante la tabla LT_CUST_SALES debe ser de tipo SORT. ET_CUST_HIER se creará del mismo tipo que LT_CUST_HIER.\n"});index.add({'id':13,'href':'/docs/sap/abap/sentencias_74/lectura_tablas_diccionario/','title':"Lectura tablas del diccionario",'content':"Introducción\r#\r\rRealmente no tenemos sentencias específica sino que es ampliación del Open SQL para dotarle de más flexibilidad a la hora de leer información\nEjemplo 1\r#\r\rCon este select extendido se busca una parte de los campos de una tabla, pero el resto de campo se completan segun variables rellenadas previamente.\nSELECT kschl, kotab, @is_header-customer_code AS keyvalue, @is_header-validity_to AS datab, @is_header-validity_from AS datbi, @zif_rtn_data=\u0026gt;cv_updkz_insert AS updkz INTO CORRESPONDING FIELDS OF TABLE @et_cond_crud FROM ztippqps WHERE pqtyp = @is_header-negotiation_type_code AND keyfield = @lv_keyfield. Tenemos que pondemos rellenar campos de una tabla/estructura a partir de una constantes. Antes se tendría que haber hecho un loop para hacerlo. Cuando usamos estas capacidades extendidas hay que usar el símbolo @ en las variables que no pertencen al selecy: parámetros, variables, etc..\nEjemplo 2\r#\r\rMismo select que el del ejemplo 1 pero crea la tabla interna donde se guardarán los datos de manera automática, sin declarar previamente.\nSELECT kschl, kotab, @is_header-customer_code AS keyvalue, @is_header-validity_to AS datab, @is_header-validity_from AS datbi, @zif_rtn_data=\u0026gt;cv_updkz_insert AS updkz INTO TABLE @data(et_cond_crud) FROM ztippqps WHERE pqtyp = @is_header-negotiation_type_code AND keyfield = @lv_keyfield. "});index.add({'id':14,'href':'/docs/sap/abap/sentencias_74/mapeo_campos/','title':"Mapeo de camos",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten hacer mapeo de campos, digamos que son las que sustituyen al MOVE-CORRESPODING.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nEjemplo 1\r#\r\rLa clase CL_ABAP_CORRESPONDING permite crear mapeos entre tablas y estructuras. En este ejemplo se construye la tabla de mapeos en base a una tabla interna. Nota: Los campos que se informan en el mapeo deben de existir ya que sino se provoca una excepción.\ncl_abap_corresponding=\u0026gt;create( source = is_header destination = es_header_crud mapping = VALUE cl_abap_corresponding=\u0026gt;mapping_table( FOR ls_mapping IN mt_mapping_crud WHERE ( area = \u0026#39;HEADER_NEGOTIATION\u0026#39; AND id_nivel1 = cv_level1 ) ( level = 0 kind = cl_abap_corresponding=\u0026gt;mapping_component srcname = ls_mapping-field_from dstname = ls_mapping-field_to ) ) )-\u0026gt;execute( EXPORTING source = is_header CHANGING destination = es_header_crud ). Ejemplo 2\r#\r\r\u0026lt;ls_summary_all\u0026gt; = CORRESPONDING #( BASE ( \u0026lt;ls_summary_all\u0026gt; ) \u0026lt;ls_datos\u0026gt; ). Se mueven los campos de \u0026lt;ls_datos\u0026gt; a \u0026lt;ls_summary_all\u0026gt;. Esto por defecto hace que los campos que están en \u0026lt;ls_summary_all\u0026gt; pero no en \u0026lt;ls_datos\u0026gt; se dejan en blanco aunque tengan valores. Para eso hay que usar la cláusula BASE y entre paréntesis la estructura destino para que no limpie los campos que no tiene.\n"});index.add({'id':15,'href':'/docs/sap/abap/sentencias_74/relleno_valores/','title':"Relleno de valores",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias, que son las que más uso, para poder informar tablas internas en base a otras tablas internas.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\nLa sentencia estrella de esta página es la FOR. Pero ojo: que si usamos field-symbols/variable no tiene que estar declarada previamente.\nEjemplo 1\r#\r\rSe recorren los datos de MT_TIPPQPS filtrando por dos campos y se rellenando los valores de ET_COND_CRUD con los datos de la estructura leída y de otras variables:\net_cond_crud = VALUE #( FOR ls_tippqps IN mt_tippqps WHERE ( pqtyp = is_header-negotiation_type_code AND keyfield = lv_keyfield ) ( kschl = ls_tippqps-kschl kotab = ls_tippqps-kotab keyvalue = is_header-customer_code datab = is_header-validity_to datbi = is_header-validity_from updkz = zif_rtn_data=\u0026gt;cv_updkz_insert ) ). Nota: Si et_cond_crud tuviera datos se perderían, si se quieren añadir los datos a los existentes hay que añadir la opción BASE:\net_cond_crud = VALUE #( BASE ( et_cond_crud ) FOR ls_tippqps IN mt_tippqps WHERE ( pqtyp = is_header-negotiation_type_code AND keyfield = lv_keyfield ) ( kschl = ls_tippqps-kschl kotab = ls_tippqps-kotab keyvalue = is_header-customer_code datab = is_header-validity_to datbi = is_header-validity_from updkz = zif_rtn_data=\u0026gt;cv_updkz_insert ) ). Ejemplo 2\r#\r\rAmpliación de la sentencia INSERT de siempre pero con en este caso no es necesario crear estructuras intermediante o usar el insert/append a un field-symbols y luego informar los valores\nINSERT VALUE #( sign = \u0026#39;I\u0026#39; option = \u0026#39;EQ\u0026#39; low = abap_false ) INTO TABLE lt_params_sl. "});index.add({'id':16,'href':'/docs/sap/abap/sentencias_74/string_templates/','title':"String template",'content':"Introducción\r#\r\rEn este grupo se irán poniendo las distintas sentencias que nos permiten procesar los string.\nLos string template son útiles porque simplifican el tratamiento de string o conversiones de campo.\nDe momento voy a poner en enlace a la ayuda de SAP porque tiene muy buenos ejemplo. Los iré poniendo aquí porque a veces cuesta encontrarlos.\nEstas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.\n"});})();