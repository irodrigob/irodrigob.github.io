<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BOPF on Navi-developer</title>
    <link>https://irodrigob.github.io/docs/sap/abap/bopf/</link>
    <description>Recent content in BOPF on Navi-developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    
	<atom:link href="https://irodrigob.github.io/docs/sap/abap/bopf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Acciones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/acciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/acciones/</guid>
      <description>Objetivo#Las acciones se usan para llamar a procesos externos del BOPF. Por ejemplo yo los uso para crear un pedido, lanzar otro programa, etc..
Yo suelo usar una clase general para agrupar acciones de un mismo nodo. En algunos artículos y el propio BOPF aconseja hacer una clase por acción. Pero lo veo una manera de generar clases que a lo mejor solo tiene cuatro líneas de código.</description>
    </item>
    
    <item>
      <title>API desde ABAP</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/api_abap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/api_abap/</guid>
      <description>Objetivo#La API de acceso al ABAP es siempre la misma por eso voy a poner los ejemplos de cada tipo de operación que se quiera hacer.
Yo para estos casos me suelo crear un helper para simplificar las llamadas entre las clases del proceso y del BOPF.
Instanciar variables para acceder al BOPF#Lo primero que se suele hacer es instanciar las variables necesarias para operar con los BOPF.</description>
    </item>
    
    <item>
      <title>Código ejemplo dentro del BOPF</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/plantillas_codigo_interno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/plantillas_codigo_interno/</guid>
      <description>Objetivo#Aquí están las plantillas de ejemplo ABAP que se usarán dentro de las clases que se usarán en validaciones, determinaciones, etc..
Instanciar clase de mensajes#Los mensajes de los BOPF se recogen en una clase generica que pueda ser usada en las determinaciones, validaciones, etc..
IF eo_message IS NOT BOUND. &amp;#34; Se instancia la clase de mensajes en caso de no estarlo eo_message = /bobf/cl_frw_factory=&amp;gt;get_message( ).</description>
    </item>
    
    <item>
      <title>Determinaciones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/determinaciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/determinaciones/</guid>
      <description>Objetivo#Las determinaciones se usan para rellenar atributos transitorios, son aquellos campos que se definen en la estructura transitoria. Yo los uso para completar descripciones y hacer cálculos.
Yo suelo usar una clase general para agrupar determinaciones de un mismo nodo. En algunos artículos y el propio BOPF aconseja hacer una clase por determinación. Pero lo veo una manera de generar clases que a lo mejor solo tiene cuatro líneas de código.</description>
    </item>
    
    <item>
      <title>Nomenclaturas</title>
      <link>https://irodrigob.github.io/docs/sap/abap/bopf/nomenclaturas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/bopf/nomenclaturas/</guid>
      <description>Objetivo#Es tener las indicaciones de las nomenclaturas que uso cuando creo un BOPF. Ya que de esta manera es fácil identificar los objetos a simple vista.
Yo normalmente cuando hago proyecto suele dar un nombre de tres carácteres que usará como prefijo para cualquier objeto que creo, ya sea, BOPF, ya sea, cualquier otro objeto: clases, transacciones, etc.
Estructuras y tablas de diccionario#En la siguiente imagen:</description>
    </item>
    
  </channel>
</rss>