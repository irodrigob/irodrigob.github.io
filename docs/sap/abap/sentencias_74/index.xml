<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sentencias &gt;= 7.4 on Navi-developer</title>
    <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/</link>
    <description>Recent content in Sentencias &gt;= 7.4 on Navi-developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    
	<atom:link href="https://irodrigob.github.io/docs/sap/abap/sentencias_74/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bucles</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/bucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/bucles/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten procesar tablas internas. Este artículo esta muy relacionado con el del relleno de valores ya que se usán las mismas sentencias para procesar tablas internas. Aún asi, lo separo en dos artículos según la finalidad en que se use.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.</description>
    </item>
    
    <item>
      <title>Condiciones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/condiciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/condiciones/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten hacer condiciones.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#Permite que una variable se inicialice segun una condicion determinada:
DATA(lv_updkz) = COND #( WHEN is_header-negotiation_code IS INITIAL THEN zif_rtn_data=&amp;gt;cv_updkz_insert WHEN is_header-has_changed = abap_true THEN zif_rtn_data=&amp;gt;cv_updkz_edit ). Ejemplo 2#Uso de SWITCH haciendo una conversion de variable;</description>
    </item>
    
    <item>
      <title>Conversiones</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/conversiones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/conversiones/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten convertir valores de un campos a otro.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#Lo que antes se hacia:
DATA lo_elemdesc type ref to cl_abap_elemdescr. Lo_elemdesc ?= cl_abap_typedescr=&amp;gt;describe_by_data( iv_abap_value. Ahora se puede hacer en una sola línea: DATA(lo_elemdesc) = CAST cl_abap_elemdescr( cl_abap_typedescr=&amp;gt;describe_by_data( iv_abap_value ) ).</description>
    </item>
    
    <item>
      <title>Filtros</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/filtros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/filtros/</guid>
      <description>Introducción#En este grupo se irán poniendo distintos ejemplos de la sentencia FILTER que es un sentencia que no he usado mucho.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#&amp;lt;ls_values_search_sap&amp;gt;-kotab_data = FILTER #( lt_values IN FILTER #( lt_konp USING KEY loevm WHERE loevm_ko = &amp;#39;&amp;#39; ) WHERE knumh = knumh ). Lo bueno del filter es que te crea una tabla o te mueve directamente el contenido de la tabla con el filtro aplicado.</description>
    </item>
    
    <item>
      <title>Lectura tablas del diccionario</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/lectura_tablas_diccionario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/lectura_tablas_diccionario/</guid>
      <description>Introducción#Realmente no tenemos sentencias específica sino que es ampliación del Open SQL para dotarle de más flexibilidad a la hora de leer información
Ejemplo 1#Con este select extendido se busca una parte de los campos de una tabla, pero el resto de campo se completan segun variables rellenadas previamente.
SELECT kschl, kotab, @is_header-customer_code AS keyvalue, @is_header-validity_to AS datab, @is_header-validity_from AS datbi, @zif_rtn_data=&amp;gt;cv_updkz_insert AS updkz INTO CORRESPONDING FIELDS OF TABLE @et_cond_crud FROM ztippqps WHERE pqtyp = @is_header-negotiation_type_code AND keyfield = @lv_keyfield.</description>
    </item>
    
    <item>
      <title>Mapeo de camos</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/mapeo_campos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/mapeo_campos/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten hacer mapeo de campos, digamos que son las que sustituyen al MOVE-CORRESPODING.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
Ejemplo 1#La clase CL_ABAP_CORRESPONDING permite crear mapeos entre tablas y estructuras. En este ejemplo se construye la tabla de mapeos en base a una tabla interna.</description>
    </item>
    
    <item>
      <title>Relleno de valores</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/relleno_valores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/relleno_valores/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias, que son las que más uso, para poder informar tablas internas en base a otras tablas internas.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.
La sentencia estrella de esta página es la FOR. Pero ojo: que si usamos field-symbols/variable no tiene que estar declarada previamente.
Ejemplo 1#Se recorren los datos de MT_TIPPQPS filtrando por dos campos y se rellenando los valores de ET_COND_CRUD con los datos de la estructura leída y de otras variables:</description>
    </item>
    
    <item>
      <title>String template</title>
      <link>https://irodrigob.github.io/docs/sap/abap/sentencias_74/string_templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/sap/abap/sentencias_74/string_templates/</guid>
      <description>Introducción#En este grupo se irán poniendo las distintas sentencias que nos permiten procesar los string.
Los string template son útiles porque simplifican el tratamiento de string o conversiones de campo.
De momento voy a poner en enlace a la ayuda de SAP porque tiene muy buenos ejemplo. Los iré poniendo aquí porque a veces cuesta encontrarlos.
Estas sentencias se pueden utilizar para crear nuevas variables o ponerlas como entrada de parámetro en clases.</description>
    </item>
    
  </channel>
</rss>