<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GraphQL on Navi-developer</title>
    <link>https://irodrigob.github.io/docs/graph_ql/</link>
    <description>Recent content in GraphQL on Navi-developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    
	<atom:link href="https://irodrigob.github.io/docs/graph_ql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cliente/servidor GraphQL</title>
      <link>https://irodrigob.github.io/docs/graph_ql/cliente_servidor_graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/graph_ql/cliente_servidor_graphql/</guid>
      <description>Introducción#En este artículo se comenzaba a explicar como configurar el servidor GraphQL para conectarlo contra una base de datos MongoDB en el cloud. Ahora vamos usar el mismo proyecto para configurar el cliente para consumir en la aplicación los datos. Esta configuración puede servir para consumir datos de un servidor externo de GraphQL.
Como en el servidor vamos a usar NextJS para instalar y probar los ejemplos.</description>
    </item>
    
    <item>
      <title>Configurando servidor GraphQL</title>
      <link>https://irodrigob.github.io/docs/graph_ql/servidor_graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/graph_ql/servidor_graphql/</guid>
      <description>Introducción#Este artículo esta basado es este artículo.Puede ser que los pasos que haga difieran un poco del artículo pero es lo que tiene basarse en un artículo de hace un año, y más como avanza de rápido estos lenguajes.
En este artículo haremos la instalación básica del servidor de GraphQL.
Instalación#Antes de hacer la instalación he creado la siguiente estructura de carpetas en mi proyecto:</description>
    </item>
    
    <item>
      <title>Probando servidor GraphQL</title>
      <link>https://irodrigob.github.io/docs/graph_ql/testing_servidor_graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/graph_ql/testing_servidor_graphql/</guid>
      <description>Introducción#Una vez se tenga el schema definido, el resolver, y el servidor configurado y conectado con MongoDB es momento de probarlo. En el artículo donde se explica como configurar el servidor se indica que para acceder al sandbox para probar el servidor hay que ir a la siguiente URL:
http://localhost:3000/api/graphqlEl puerto 3000 es porque estamos usando NextJS para las pruebas.
Estado inicial MongoDB#La foto inicial que tenemos en MongoDB es la siguiente:</description>
    </item>
    
    <item>
      <title>Resolvers</title>
      <link>https://irodrigob.github.io/docs/graph_ql/resolvers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/graph_ql/resolvers/</guid>
      <description>Introducción#Los resolver son los ejecutores de lo que se ha definido en los schemas. En el resolver es donde se llama al sistema donde obtendremos, o actualizaremos, los datos que necesitemos, en nuestro caso la conexión con MongoDB. La potencia que tiene graphQL que es el sistema donde están los datos es irrelevantes porque al final se puede conectar a donde sea, como si es un fichero plano.</description>
    </item>
    
    <item>
      <title>Schemas</title>
      <link>https://irodrigob.github.io/docs/graph_ql/schemas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/graph_ql/schemas/</guid>
      <description>Introducción#Los schemas es la definición principal de los vas a poder hacer en GraphQL, es decir, se definen:
 Los tipos de datos que puedes usar Las querys que puedes llamar y como llamarlas. Las operaciones de edición, crear o modificar, que puedes realizar.  Si hago un simil con SAP Gateway es la definción de las Entitys cuando se crea un servicio oData. Todo los ejemplos que explicaré se basan en NodeJS usando el framework de React llamado Nextjs.</description>
    </item>
    
  </channel>
</rss>