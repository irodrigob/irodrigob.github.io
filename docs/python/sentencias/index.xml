<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sentencias on Navi-developer</title>
    <link>https://irodrigob.github.io/docs/python/sentencias/</link>
    <description>Recent content in Sentencias on Navi-developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    
	<atom:link href="https://irodrigob.github.io/docs/python/sentencias/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entrada de datos</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/entrada_datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/entrada_datos/</guid>
      <description>Entrada de datos#Para pedir datos existe la sentencia *input&amp;rdquo;, esta sentencia en el VSCODE abre una ventana, como la de los comandos, donde te pide los datos.
Ejemplo:
nombre = input(&amp;#34;¿dime tu nombre?&amp;#34;) print(nombre) Resultado:
ivan</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/variables/</guid>
      <description>Variables#Existen tres tipos de variables, al menos por lo que he visto que son: string, enteras y flotantes.
# Esta es integer a=23 # Esta es float b=23.456 # Esta es string c=&amp;#34;hola mundo&amp;#34; Para saber el tipo de variable en cualquier momento se puede usar la siguiente sentencia:
type(c) Convertir variables#Si queremos convertir el formato de una variable a otra. Como hay tres tipos de &amp;ldquo;tipos&amp;rdquo;, hay tres funciones que lo hace: INT, FLOAT, STR</description>
    </item>
    
    <item>
      <title>Cadenas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/cadenas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/cadenas/</guid>
      <description>Cadenas#Las cadenas son secuencias de carácteres. Es decir, una variable de tipo de string puedes acceder a una posición concreta. Es como acceder a una posición de un array o lista. Ejemplo:
texto = &amp;#34;hola&amp;#34; print(&amp;#34;Segunda letra del texto es:&amp;#34;, texto[1]) Resultado:
Segunda letra del texto es: oOJO: Que aquí los arrays también empiezan por 0.
Con la sentencia LEN se puede saber el tamaño de la cadena.</description>
    </item>
    
    <item>
      <title>Captura de excepciones</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/captura_excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/captura_excepciones/</guid>
      <description>Captura excepciones#Para captura excepciones y que no salgan error raros al hacer operaciones tenemos la sentencia TRY..EXCEPT
En el siguiente ejemplo extráido de un manual hay una formula para pasar de grados Farenheit a Celsius:
ent = input(&amp;#39;Introduzca la Temperatura Fahrenheit:&amp;#39;) try: fahr = float(ent) cel = (fahr - 32.0) * 5.0 / 9.0 print(&amp;#34;Grados celsius&amp;#34;:cel) except: print(&amp;#39;Por favor, introduzca un número&amp;#39;) NOTA: Aquí también tiene que haber una identación en el código dentro del TRY y del EXCEPT</description>
    </item>
    
    <item>
      <title>Condiciones</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/condiciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/condiciones/</guid>
      <description>Condiciones#Las condiciones son como en la mayoria de lenguajes
 x == y &amp;ndash;&amp;gt; x es igual a y x != y &amp;ndash;&amp;gt; x es distinto de y x &amp;gt; y &amp;ndash;&amp;gt; x es mayor que y x &amp;lt; y &amp;ndash;&amp;gt; x es menor que y x &amp;gt;= y &amp;ndash;&amp;gt; x es mayor o igual que y x &amp;lt;= y &amp;ndash;&amp;gt; x es menor o igual que y x is y &amp;ndash;&amp;gt; x es lo mismo que y x is not y &amp;ndash;&amp;gt; x no es lo mismo que y Operadores lógicos son: and(y), or(o) y not(no) IN Devuelve si un cadena esta dentro de otra.</description>
    </item>
    
    <item>
      <title>Constantes internas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/constantes_internas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/constantes_internas/</guid>
      <description>Iteracciones#Las constantes internas, son eso, constantes propias de Python que tienen un valor fijo y que pueden servir para inicializar valores.
 None &amp;ndash;&amp;gt; Sirve para indicar que una variable esta vacia.  </description>
    </item>
    
    <item>
      <title>Ficheros</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/ficheros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/ficheros/</guid>
      <description>Ficheros#Leer un fichero#Se puede hacer de dos manera con la sentencia WITH y sin ella.
Ejemplo modo sin WITH
file = open(&amp;#34;welcome.txt&amp;#34;) data = file.read() print data file.close() # Importante hay que cerrar el fichero para evitar bloqueos Con la opción WITH
with open(&amp;#34;hola.txt&amp;#34;) as file: data = file.read() Con WITH parece ser que el control de excepciones es mejor y tareas simples como la preparación del fichero y su cierre se hace de manera automática.</description>
    </item>
    
    <item>
      <title>Funciones internas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/funciones_internas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/funciones_internas/</guid>
      <description>Funciones internas#Aquí una lista de funciones internas
 MAX y MIN &amp;ndash;&amp;gt; Devuelve el valor máximo y mínimo de una lista. Si es un string nos devolvería la letra más alta y la mínima. Ejemplo:  print(&amp;#34;Letra máxima: &amp;#34;,max(&amp;#34;hola mundo&amp;#34;)) print(&amp;#34;Letra mínima: &amp;#34;,min(&amp;#34;hola mundo&amp;#34;)) Resultado:
Letra máxima: uLetra mínima:  LEN &amp;ndash;&amp;gt; Devuelve el numéro de elementos de una lista. Si es un string devuelve el número de caracteres.</description>
    </item>
    
    <item>
      <title>Iteracciones</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/iteracciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/iteracciones/</guid>
      <description>Iteracciones#Iteracciones condicionales#Llamo iteracciones condicionales aquellas sentencias que no recorren listas sino simplemente repetin un bloque de sentencias hasta que se cumple una condición. La sentencia WHILE sería un ejemplo de ello:
n = 5 print(&amp;#34;Contador&amp;#34;) while n &amp;gt;= 0: print(n) n = n - 1 Resultado:
Contador543210Con la sentencia BREAK se puede salir de un bucle. Ejemplo:</description>
    </item>
    
    <item>
      <title>Listas y tuplas</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/listas_tuplas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/listas_tuplas/</guid>
      <description>Listas y tuplas#Las listas son las que usan [] y las tuplas(). Ambas sirven para guardar datos. Y ambas están indexadas por 0, es decir, al primer registro se accede por el valor 0.
Los string en si mismos son listas como se explica en pagína de cadenas. Pero mientras que en la cadenas los valores son carácteres en una lista/tupla puede contener cualquier valor.
Ejemplo de inicialización:</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/operadores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/operadores/</guid>
      <description>Operadores#Aritméticos#Los operadores son los habituales:
 Sumar: + Resta: - División: / Multiplicación: * Elevar a la potencia: ** Obtener el resto: %  Ejemplos:
d = a * b print(&amp;#34;Resultado&amp;#34;, d) d = ( a + b ) / a print(&amp;#34;Resultado:&amp;#34;, d) Resultado:
Resultado 416.15999999999997Resultado: 3.89String#Con los string podemos contaner y incluso hacer que un caracter aparezca n veces.</description>
    </item>
    
    <item>
      <title>Sistema</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/sistema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/sistema/</guid>
      <description>Introducción#La librería os hay una serie de funciones de sistema que se pueden utilizar. Aquí se recopilan las que se van usando. Esta librería para utilizar hay que hacer lo siguiente al inicio del programa:
import os Logs#Cuando se usán librerías de machine learning como Tensor Flow en programa de Python, si se usa Jupyter Notebooks se muestran una cantidad de logs, cientos de líneas, que desvirtuan lo que realmente se quiere mostrar.</description>
    </item>
    
    <item>
      <title>Usar librerias</title>
      <link>https://irodrigob.github.io/docs/python/sentencias/usar_librerias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://irodrigob.github.io/docs/python/sentencias/usar_librerias/</guid>
      <description>Usar librerias#Importar libreria se hace con la sentencia Import pero tiene variantes según sean librerias propias de Python o sencillas, eso creo, o librerias que están dentro de un paquete.
Librerías propias o sencillas#Ejemplo de como usar la libreria matemática para calcular una raíz cuadrada:
import math print(math.sqrt(20)) Resultado
4.47213595499958Librerías dentro de paquetes#El siguiente ejemplo se recupera la libreria de regresión de KNN:</description>
    </item>
    
  </channel>
</rss>